{
    "math": {
        "aime_evaluation.dev.v0": "AIME math competition",
        "algebra-word-problems.s1.simple-v0": "Basic algebra word problems",
        "math-derivatives.dev.v0": "Test the model's ability to calculate math functions derivatives.",
        "math_equations.dev.v0": "Test model's ability to explain and solve math equations described in words.",
        "math_for_5th-grader.dev.v0": "Evaluates the model's ability to solve 5th grade level math problems with slightly complicated sentences.",
        "math_logic_operations.dev.v0-1": "Evaluates the model's ability to perform mathematical operations given a redefinition of standard operation rules.",
        "math_polish.dev.v0": "Test the model's ability to solve simple math problems written in Polish language using words and respond in the same way.",
        "probability": {
            "probabilities-word-problems.test.v1": "Test the model's ability to calculate probabilities given word problems.",
            "probability-questions.dev.v0": "A collection of probability questions that ChatGPT fails.  Let's see if GPT-4 can do better.",
        },
        "simple_math.dev.v0": "Eval that checks ability to do simple math questions.",
        "linear-equations.dev.v0": null,
        "linear-regression.dev.v0": "Tests the model's ability to run linear regressions on small datasets",
        "linear-regression-meta.dev.v0": "Tests the model's ability evaluate submissions against the correct answer",
        "arithmetic-expression.dev.v0": "Generate arithmetic expressions",
        "arithmetical_puzzles.dev.v0": "Solve arithmetical puzzles in natural language",
        "determinant.test.v1": null,
        "multi-step-equations.dev.v0": null,
        "count_intersections_polynomial.dev.v0": "Count intersections between x-axis and a polynomial",
        "matrix_mult_rows.dev.v0": "Test the model's mathematical ability to infer what is needed to multiply two matrices.",
    },
    "computer-science": {
        "bitwise.dev.v0": "Simulate a simple bitwise operating machine",
        "forth-stack-sim.dev.v0": "Simulate a simple forth stack machine",
        "forth-stack-sim-basic.dev.v0": "Simulate a simple forth stack machine",
        "forth-stack-sim-detailed.dev.v0": "Simulate a simple forth stack machine",
        "pointer-value-retrieval-easy-few-examples.dev.v0": "Easy pointer-value retrieval task from few examples, pointer is seperated from values.",
        "pointer-value-retrieval-easy-many-examples.dev.v0": "Easy pointer-value retrieval task from many examples, pointer is separated from values.",
        "pointer-value-retrieval-medium-few-examples.dev.v0": "Medium difficulty pointer-value retrieval task from few examples, pointer targets multiple values.",
        "pointer-value-retrieval-medium-many-examples.dev.v0": "Medium difficulty pointer-value retrieval task from many examples, pointer targets multiple values.",
        "pointer-value-retrieval-hard-few-examples.dev.v0": "Hard pointer-value retrieval task from few examples, pointer hidden among values.",
        "pointer-value-retrieval-hard-many-examples.dev.v0": "Hard pointer-value retrieval task from many examples, pointer hidden among values.",
        "css-selectors-verbal.dev.v0": "Translate natural language to CSS selectors",
        "css-selectors-explain.dev.v0": "Translate CSS selectors to natural language",
        "python_list_comprehension.dev.v0": "Test model's ability to understand a basic usage of python's list comprehension syntax.",
        "computer-science-problems.s1.simple-v0": "Computer science multiple choice",
        "automata-and-complexity.dev.v0": "Computer science true/false questions",
        "infiniteloop-match.s1.simple-v0": "Halting problem",
        "spider-sql.dev.v0": "Spider SQL dataset",
        "context-free-grammar.dev.v0": "Context-free-grammar understanding",
        "coq-editing.dev.v0": "Coq code understanding",
        "coq-proof-step-match.dev.v0": "Coq code understanding",
        "coq-editing-meta.dev.v0": null,
        "co-sql.dev.v0": "Text-to-SQL",
        "code_combination.dev.v0": "Combine code snippets",
        "code_progress.dev.v0": "Code understanding",
        "csharp-linq.dev.v0": "C# code understanding",
        "cybersecurity-filepaths.dev.v0": "Identify malicious Windows filepath",
        "event-categories.dev.v0": "Categorize Windows Event Logs",
        "reverse-polish-notation.dev.v0": "Test the model's ability to parse expression and create reverse polish notation.",
        "reverse-shell.dev.v0": "Test the model's ability to classify whether the code is reverse shell attack.",
        "singlestore-vectorsearch.dev.v0": "Accurately generate the SQL query with the correct syntax for performing vector search in SingleStore DB.",
        "syntax-check.dev.v1": "Test the model's ability to determine programming language from a snippet.",
    },
    "logic": {
        "born-first.dev.v0": "Determine who was born first",
        "dice-rotation-sequence.dev.v0": "Follow rotations of a 6-sided dice",
        "logiqa-logical-reasoning-plus.dev.v0": "logical reasoning instruction or the logiqa plus dataset",
        "logiqav2-logical-reasoning-plus.dev.v0": "logical reasoning instruction for the logiqav2 plus dataset",
        "logic-liar-paradox.dev.v0": "Linguistic nuances and logical reasoning",
        "logic-statements.dev.v0": null,
        "logic-fact.dev.v0": null,
        "formal-logic.dev.v0": "Evaluate expressions in formal logic",
        "diagrammatic_logic.dev.v2": null,
        "human-safety.test.v0": "Logical reasoning about (almost) real-life situation where humans might be in danger",
        "logic-container.dev.v0": "Eval that checks ability to do logical problems involving jars with water and balances.",
        "logic-grid.dev.v0": "Test the model's ability to solve grid-based logic puzzles.\nThis eval contains 90 puzzles in combinations of 3 to 4 categories and 4 to 7 unique values per category.\nThe exact cardinality combinations of categories to unique values is as follows;\n15 puzzles each for sizes 3x4, 3x5, 4x4, 4x5, 4x6, and 4x7.\n",
        "logic-riddles.dev.v0": null,
        "logic_and_probability.dev.v0": "Eval that checks ability to do logical physics and statistics questions.",
        "logical-black-scholes.test.v1": "Test the model's ability to determine an individual variables' effect on the output of the black-scholes model.",
        "logical_counting.dev.v0": null,
        "logical_reasoning_letter_series_test.dev.v0": "I have tested the model ability by giving it Logical Reasoning Questions about letter series. Where gpt-3.5-turbo accuray is 0.4.",
        "reclor-logical-reasoning-plus.dev.v0": "logical reasoning instruction for the reclor plus dataset",
        "integer-sequence-predictions.dev.v0": null,
        "integer-sequence-predictions-notable.dev.v0": null,
        "integer-sequence-predictions-obscure.dev.v0": null,
        "integer-sequence-predictions-misc.dev.v0": null,
        "logiqa.dev.v0": null,
    },
    "language": {
        "belarusian": {
            "belarusian-lexicon.dev.v0": "Distinguish between existing and hallucinated Belarusian words",
            "belarusian-grammar.dev.v0": "Understand Belarusian grammar",
            "belarusian-numerals.dev.v0": "Convert Belarusian numerals to numbers",
            "belarusian-orthography.dev.v0": "Switch between classical and modern orthographies of Belarusian",
            "belarusian-proverbs.dev.v0": "Complete proverbs in Belarusian",
            "belarusian-rhyme.dev.v0": "Find rhyming words in Belarusian",
            "belarusian-russian-translation.dev.v0": "Translate Belarusian into Russian and back",
            "belarusian-syllable-count.dev.v0": "Count syllables in Belarusian words.",
            "belarusian-synonyms.dev.v0": "Classify if the Belarusian words are synonyms or not",
            "belarusian-word-analogy-inflection.dev.v0": "Solve Belarusian word analogy problems",
        },
        "bulgarian": {
            "bulgarian-lexicon.dev.v0": "Distinguish between existing and hallucinated Bulgarian words",
        },
        "brazilian": {
            "brazilian-lexicon.dev.v0": "Distinguish between existing Brazilian words",
        },
        "english": {
            "categorize-with-distractors.dev.v0": "Classify nouns",
            "test_english_pronunciations.dev.v0": "We evaluated the ability of GPT to distinguish between words that have the same pronunciation in standard British English.",
        },
        "ukraine": {
            "ukraine-gec-fluency-style.dev.v0": "Fluency eval. Test the model's ability to detect and correct style errors.",
            "ukraine-gec-fluency-calque.dev.v0": "Fluency eval. Test the model's ability to detect and correct word-for-word translation from other languages errors.",
            "ukraine-gec-fluency-poorflow.dev.v0": "Fluency eval. Test the model's ability to detect and correct unnatural sentence flow errors.",
            "ukraine-gec-fluency-repetition.dev.v0": "Fluency eval. Test the model's ability to detect and correct repetition of words errors.",
            "ukraine-gec-fluency-other.dev.v0": "Fluency eval. Test the model's ability to detect and correct other fluency errors errors.",
            "ukraine-gec-grammar-aspect.dev.v0": "Grammar eval. Test the model's ability to detect and correct incorrect usage of verb aspect errors.",
            "ukraine-gec-grammar-case.dev.v0": "Grammar eval. Test the model's ability to detect and correct incorrect usage of case of any notional part of speech errors.",
            "ukraine-gec-grammar-comparison.dev.v0": "Grammar eval. Test the model's ability to detect and correct incorrect formation of comparison degrees of adjectives and adverbs errors.",
            "ukraine-gec-grammar-conjunction.dev.v0": "Grammar eval. Test the model's ability to detect and correct incorrect usage of conjunctions errors.",
            "ukraine-gec-grammar-gender.dev.v0": "Grammar eval. Test the model's ability to detect and correct incorrect usage of gender of any notional part of speech errors.",
            "ukraine-gec-grammar-number.dev.v0": "Grammar eval. Test the model's ability to detect and correct incorrect usage of number of any notional part of speech errors.",
            "ukraine-gec-grammar-partvoice.dev.v0": "Grammar eval. Test the model's ability to detect and correct incorrect usage of participle voice errors.",
            "ukraine-gec-grammar-prep.dev.v0": "Grammar eval. Test the model's ability to detect and correct incorrect preposition usage errors.",
            "ukraine-gec-grammar-tense.dev.v0": "Grammar eval. Test the model's ability to detect and correct incorrect usage of verb tense errors.",
            "ukraine-gec-grammar-ungrammaticalstructure.dev.v0": "Grammar eval. Test the model's ability to detect and correct digression from syntactic norms errors.",
            "ukraine-gec-grammar-verbaform.dev.v0": "Grammar eval. Test the model's ability to detect and correct incorrect usage of an analytical verb form errors.",
            "ukraine-gec-grammar-verbvoice.dev.v0": "Grammar eval. Test the model's ability to detect and correct incorrect usage of verb voice errors.",
            "ukraine-gec-grammar-other.dev.v0": "Grammar eval. Test the model's ability to detect and correct other grammatical errors errors.",
            "ukraine_electronic_petitions.val.v0": null
        },
        "chinese": {
            "chinese-lantern-riddles.dev.v0": "Solve Chinese lantern riddles",
            "chinese-remainder-theorem.dev.v0": "Solve systems of congruences",
            "chinese_ancient_masterpieces_dynasty.dev.v0": "Identify the dynasty of Chinese ancient masterpieces",
            "chinese_ancient_poetry.dev.v0": "Chinese poem knowledge",
            "chinese_chu_ci.dev.v0": "Chinese poem knowledge",
            "chinese_famous_novel.dev.v0": "Chinese novel knowledge",
            "chinese_hard_translations.dev.v0": "Chinese language understanding",
            "chinese_homonym.dev.v0": "Chinese language understanding",
            "chinese-homophonic.dev.v0": null,
            "chinese_idioms.dev.v0": "Recognize Chinese idioms",
            "chinese_modern_poem_identification.test.v1": null,
            "chinese_poem.dev.v0": null,
            "chinese_shi_jing.test.v1": null,
            "chinese_song_ci.dev.v0": null,
            "chinese_tang_poetries.dev.match-v1": "Chinese poem knowledge",
            "chinese_zodiac.dev.v0": null,
            "convert_chinese_lower_case_num_to_num.dev.v0": "Converting chinese numbers",
            "convert_num_to_chinese_lower_case_num.dev.v0": "Converting chinese numbers",
            "convert_chinese_upper_case_num_to_num.dev.v0": "Converting chinese numbers",
            "convert_num_to_chinese_upper_case_num.dev.v0": "Converting chinese numbers",
            "Chinese_character_riddles.dev.v0": "Chinese characters, language and culture",
            "number-reading.dev.v0": "Translate chinese to arabic numerals",
            "iso-to-lunar-calendar.dev.v0": "Test the model's ability to convert dates from ISO 8601 format into the Chinese lunar calendar.\n\nAll dates are in the future as of 2023-05-04.",
            "lunar-calendar-to-iso.dev.v0": "Test the model's ability to convert dates from the Chinese lunar calendar into ISO 8601 format, with a target Gregorian-calendar year given as a hint (the lunar calendar operates on a 60-year cycle, so this eliminates any ambiguity).\n\nAll dates are in the future as of 2023-05-04.",
            "mapping_to_matricies.dev.v0": null,
            "Unfamiliar-Chinese-Character.dev.v0": null,
            "canto_wu_pronunciation.dev.v0": "Understand Cantonenese and Wu Chinese pronounciation (zero-shot)",
            "canto_wu_pronunciation_fewshot.dev.v0": "Understand Cantonenese and Wu Chinese pronounciation (few-shot)",
            "marxist_philosophy_exam_simple.dev.v0": "Test the model's ability to solve Chinese Marxist Philosophy Exam.",
        },
        "japanese": {
            "japanese-decimal-units.dev.v0": "Japan has its own decimal unit. Test it.",
            "japanese-itpassport-exam01.dev.v0": "Japanese IT Passport Exam",
            "japanese-national-medical-exam02.dev.v0": null,
            "japanese-station.dev.v0": null,
            "japanese_approval.dev.v0": "Tests for proper translation of Japanese \"\u306f\u3044\" and \"\u3044\u3044\u3048\" depending on the context.",
            "japanese_city_name_pronunciation.dev.v0": "Answer the correct pronunciation of Japanese cities",
            "japanese_mahjong_discard_tile.dev.v0": "Correctly understand the common rule of discarding tile strategy in Japanese Mahjong",
            "japanese-number-reading.dev.v0": "Translate japanese number into arabic numerals.",
            "japanese_onomatopoeia.dev.v0": null,
            "japanese_populer_video_game_title_and_the_publisher.val.v0": "Knowledge about popular japanese video games",
            "japanese-national-medical-exam01.dev.v0": null,
            "japanese_driving_license.s1.simple-v0": "Japanese Driving licence exam",
            "job_listing_title_for_a_caregiver_in_japan.test.v1": "Job listing title for a caregiver in Japan",
            "japanese-remote-island-to-prefecture.dev.v0": "Answer prefecture of given Japanese remote island",
            "test_japanese_english_numerals.dev.v0": "We evaluated the ability of GPT to distinguish between Japanese numerical representations and English translations.",
            "test_japanese_radical.dev.v0": "In Japan, the radical changes depending on the type of kanji. Test your reading of various radicals.",
            "test-japanese-units.dev.v0": "In Japan, when counting things, the unit changes depending on the type. Test your use of complex units.",
            "kanji-idioms.test.v0": "Ability to recognize kanji idioms.",
            "manga-translation-page.dev.v0": null,
            "manga-translation-panel.dev.v0": null,
            "manga-translation-bubble.dev.v0": null,

        },
        "korean": {
            "korean-consonant-vowel-combination.dev.v0": "Combine Korean consonants and vowels to form Hangul character",
            "korean-honorific.dev.v0": "Classifying Korean honorific/non-honorific sentences.",
            "korean-phonetics.dev.v0": "Identify Korean words and their phonetic transcriptions.",
            "korean-postposition.dev.v0": "Evaluates GPT can identify correct postposition in a Korean sentence.",
            "korean_date_counting.dev.v0": "Test the model's understanding of Korean date counting.",
            "korean_dialects.dev.v0": "Test the model's ability to determine which South Korean dialect a sentence belongs to.",
            "korean_foreign_words.dev.v0": "Choose correctly spelled foreign words in Korean.",
            "korean_romanization.dev.v0": "Test the model's understanding of Korean Romanization Rules. Capitalization is not tested because it depends on the context. Only test whether romanization follows the standard pronunciation method of the Korean language.",
            "korean_spelling.dev.v0": null,
            "korean_yaminjeongeum.dev.v0": "Yamin-Jeongeum is a leetspeak for Korean. Test your ability to translate it to proper Korean.",
            "confusing_korean.dev.v0": "Korean language understanding",
            "pure_korean.dev.v0": "Evaluates GPT can identify pure Korean words.",
        },
        "norwegian": {
            "norwegian-lexicon.dev.v0": "Test the model's ability to distinguish old Norwegian words.",
            "norwegian-rhymes.dev.v0": "Test the knowledge of Norwegian Bokm\u00e5l phonetics with dictionary words that appear to rhyme but do not, or words that appear to not rhyme, but do.",
        },
        "portugese": {
            "portuguese-kinship-riddles.dev.v0": "An evaluation of the ability to solve logical reasoning problems involving kinship relationships.",
            "portuguese-sarcasm.dev.v0": "An evaluation on sarcasm detection in Portuguese sentences",
            "portuguese-syllable-count.dev.v0": "Evaluates how many syllabels a given word has.",
        },
        "turkish": {
            "turkish_characters.dev.v0": "Eval that checks ability to identify non-english characters in a Turkish text.",
        },
        "polish": {
            "polish-lexicon.dev.v0": "Test the model's ability to distinguish between existing and hallucinated Polish words.",
            "polish-proverbs.dev.v0": "Test the model's ability to complete proverbs in Polish language",
            "polish-syllable-count.val.v0": null,
            "polish_rhymes_generation.v0": "Generating polish rhymes.",
        },
        "hebrew": {
            "hebrew-homophones.dev.v0": "Number of Hebrew homophone errors in a sentence",
            "hebrew-same-noun-gender.v0": "Do these hebrew nouns have the same grammatical gender?",
            "hebrew-plurals.dev.v0": "Return the plural form for all the singular words in the sentences.",
            "hebrew_talmud_suka.dev.v0": "Simple questions on the \"suka\" part of the jewish \"talmud babli\", similar simple tests in jewish schools at 5 grade.",
            "hebrew-rhyme.v0": "Hebrew Translation + Rhyming",
            "gregorian-to-hebrew-date.dev.v0": "Converting Gregorian dates to Hebrew dates written in English",
            "hebrew-bible.dev.v0": "Questions on the bible, similar to preliminary questions in the international yearly bible contest in Israel",
        },
        "russian": {
            "russian-nlp-tasks.dev.v0": null,
            "russian-rhyme.v0": "Russian Translation + Rhyming.",
            "russian_medical.dev.v0": null,
            "ru_rhyming_phrases.dev.v0": "Russian rhyming phrases for kids. This is a simple but important task for learning the rhyming patterns of Russian.",
            "russian-english-homonym-context-resolution.dev.v0": null,
            "russian-lexicon.dev.v0": "Test the model's ability to distinguish between existing Russian words.",
            "russian-verse.dev.v0": "The most popular Russian poems that nearly every Russian speaker can recall",
            "russian_sarcasm.dev.v0": "An evaluation on Russian sarcasm detection.",
            "russe.test.v0": "Detect whether word has same meaning in two russian sentences or not",
            "complex-analogies-en-ru.dev.v0": null,
        },
        "italian": {
            "italian-new-words.dev.v0": "Distinguish Italian words that have recently entered the language.",
            "italian-rhyme.v0": "Italian translation and rhyming.",
            "italian_big_math_expression.dev.v0": "Solve written mathematical expressions in Italian",
        },
        "swedish": {
            "swedish-spelling.dev.v0": "Identify misspelled Swedish words",
            "swedish_sat.dev.v0": "Test the model's ability to answer questions from the Swedish h\u00f6gskoleprovet, kind of like the SATs in the US. The 30 questions are from the spring test 2023 verbal part, test number 3.",
        },
        "finnish": {
            "finnish-rhyme.dev.v0": "Finnish translation and rhyming",
        },
        "french": {
            "french-lexicon.dev.v0": "Distinguish between existing French words",
            "french-part-of-speech.dev.v0": "What part of speech a given word can have in French",
            "french_homonym_and_homograph.dev.v0": "Distinguish French language homonyms and homographs",
        },
        "dutch": {
            "dutch-lexicon.dev.v0": "Distinguish between existing hallucinated Dutch words",
            "dutch-rhymes.dev.v0": "Checking if two words in the Dutch rhyme",
            "rare-and-loanwords-dutch-lexicon.dev.v0": "Test the model's ability to distinguish between existing Dutch words, including rare words and loanwords.",
        },
        "greek": {
            "greek-vocabulary.dev.v0": null,
            "greek-nt-manuscripts.v0": "Providing Gregory-Aland coding, symbolic sigla, and common designated century for the most important Greek Uncial manuscripts of the New Testament",
        },
        "hindi": {
            "hindi_upsc.dev.v0": null,
            "hindi_shuddha.dev.v0": null,
            "hindi_words.dev.v0": null,
        },
        "mongolian": {
            "simple-knowledge-mongolian.dev.v0": "Mongolian language",
        },
        "afrikaans": {
            "afrikaans-lexicon.dev.v0": "Distinguish between existing Afrikaans words",
        },
        "indonesian": {
            "indonesian_numbers.dev.v0": null,
        },
        "irish": {
            "irish-lexicon.dev.v0": "Distinguish between existing and hallucinated Irish words",
            "irish-plural-nouns.dev.v0": "Ability on Irish plural nouns in both the genitive and nominative case.",
        },
        "latin": {
            "latin-grammar.dev.v0": "Test the model's ability to distinguish between grammatically well-formed and ungrammatical Latin sentences.",
        },
        "nepali": {
            "nepali-numerals.dev.v0": "Test the model's ability to convert Nepali numerals to numbers.",
            "nepali-song-singer.dev": "Test the model's ability to understand English transliteration of Nepali phrase and provide us the singer of that particular title.",
        },
        "romanian": {
            "romanian-logic.dev.v0": "Test the model's ability to solve a variety of mathematical, logical and grammatical problems using the Romanian language.",
            "romanian_homonyms.dev.v0": "Check GPT's ability to recognize Romanian homonyms.",
        },
        "sindarin": {
            "sindarin-fluency.dev.v0": "Tests the model's ability to accurately translate Sindarin to English.",
        },
        "spanish": {
            "spanish-lexicon.dev.v0": "Test the model's ability to recognize Spanish words included in the dictionary of the Spanish language.",
            "spanish_feminine_noun_masculine_article.dev.v0": "In Spanish there are are a number of nouns like \"agua\" which are feminine but use the masculine article, \"El agua\" is correct and \"La agua\" is incorrect",
        },
        "urdu": {
            "urdu-lexicon.dev.v0": "Test the model's ability to distinguish between existing and hallucinated Urdu language words.",
            "urdu-transliteration.dev.v0": "Test the model's ability to transliterate English (Roman Urdu) to Urdu.",
        }
    },
    "geography": {
        "compare-countries-area.dev.v0": "Which country has the largest area",
        "countries.dev.v0": null,
        "largest_country.dev.v0": "Determining the largest country by the area from the list",
        "shared-borders.dev.v0": "Test the model's ability to list the countries that share a land border with a given pair of countries. This tests the model's ability to intersect sets known within its weights.",
    },
    "aggregate-benchmarks": {
        "mmlu": {
            "mmlu-abstract-algebra.val.ab-v1": null,
            "mmlu-anatomy.val.ab-v1": null,
            "mmlu-astronomy.val.ab-v1": null,
            "mmlu-business-ethics.val.ab-v1": null,
            "mmlu-clinical-knowledge.val.ab-v1": null,
            "mmlu-college-biology.val.ab-v1": null,
            "mmlu-college-chemistry.val.ab-v1": null,
            "mmlu-college-computer-science.val.ab-v1": null,
            "mmlu-college-mathematics.val.ab-v1": null,
            "mmlu-college-medicine.val.ab-v1": null,
            "mmlu-college-physics.val.ab-v1": null,
            "mmlu-computer-security.val.ab-v1": null,
            "mmlu-conceptual-physics.val.ab-v1": null,
            "mmlu-econometrics.val.ab-v1": null,
            "mmlu-electrical-engineering.val.ab-v1": null,
            "mmlu-elementary-mathematics.val.ab-v1": null,
            "mmlu-formal-logic.val.ab-v1": null,
            "mmlu-global-facts.val.ab-v1": null,
            "mmlu-high-school-biology.val.ab-v1": null,
            "mmlu-high-school-chemistry.val.ab-v1": null,
            "mmlu-high-school-computer-science.val.ab-v1": null,
            "mmlu-high-school-european-history.val.ab-v1": null,
            "mmlu-high-school-geography.val.ab-v1": null,
            "mmlu-high-school-government-and-politics.val.ab-v1": null,
            "mmlu-high-school-macroeconomics.val.ab-v1": null,
            "mmlu-high-school-mathematics.val.ab-v1": null,
            "mmlu-high-school-microeconomics.val.ab-v1": null,
            "mmlu-high-school-physics.val.ab-v1": null,
            "mmlu-high-school-psychology.val.ab-v1": null,
            "mmlu-high-school-statistics.val.ab-v1": null,
            "mmlu-high-school-us-history.val.ab-v1": null,
            "mmlu-high-school-world-history.val.ab-v1": null,
            "mmlu-human-aging.val.ab-v1": null,
            "mmlu-human-sexuality.val.ab-v1": null,
            "mmlu-international-law.val.ab-v1": null,
            "mmlu-jurisprudence.val.ab-v1": null,
            "mmlu-logical-fallacies.val.ab-v1": null,
            "mmlu-machine-learning.val.ab-v1": null,
            "mmlu-management.val.ab-v1": null,
            "mmlu-marketing.val.ab-v1": null,
            "mmlu-medical-genetics.val.ab-v1": null,
            "mmlu-miscellaneous.val.ab-v1": null,
            "mmlu-moral-disputes.val.ab-v1": null,
            "mmlu-moral-scenarios.val.ab-v1": null,
            "mmlu-nutrition.val.ab-v1": null,
            "mmlu-philosophy.val.ab-v1": null,
            "mmlu-prehistory.val.ab-v1": null,
            "mmlu-professional-accounting.val.ab-v1": null,
            "mmlu-professional-law.val.ab-v1": null,
            "mmlu-professional-medicine.val.ab-v1": null,
            "mmlu-professional-psychology.val.ab-v1": null,
            "mmlu-public-relations.val.ab-v1": null,
            "mmlu-security-studies.val.ab-v1": null,
            "mmlu-sociology.val.ab-v1": null,
            "mmlu-us-foreign-policy.val.ab-v1": null,
            "mmlu-virology.val.ab-v1": null,
            "mmlu-world-religions.val.ab-v1": null
        }
    },
    "finance": {
        "finance.dev.v0": "Financial concepts & math",
        "stock-options-bear-call-spread.dev.v0": "Stock options knowledge",
        "stock-options-bull-call-spread.dev.v0": "Stock options knowledge",
        "stock-options-iron-butteryfly-spread.dev.v0": "Stock options knowledge",
        "stock-options-inverse-iron-butterfly-spread.dev.v0": "Stock options knowledge",
        "stock-options-iron-condor-spread.dev.v0": "Stock options knowledge",
        "stock-options-inverse-iron-condor-spread.dev.v0": "Stock options knowledge",
        "stock-option-terms-bear-call-spread.dev.v0": "Stock options knowledge",
        "stock-option-terms-bull-call-spread.dev.v0": "Stock options knowledge",
        "stock-option-terms-iron-butterfly-spread.dev.v0": "Stock options knowledge",
        "stock-option-terms-inverse-iron-butteryfly-spread.dev.v0": "Stock options knowledge",
        "stock-option-terms-iron-condor-spread.dev.v0": "Stock options knowledge",
        "stock-option-terms-inverse-iron-condor-spread.dev.v0": "Stock options knowledge",
        "finance_calc.dev.v0": "Understand interest and inflation.",
        "financial-derivatives.dev.v0": "Questions about financial derivative",
        "ner_finance.dev.v0": "Named entity recognition over financial documents.",
    },
    "coqa": {
        "coqa-match.dev.v0": null,
        "coqa-fact.dev.v0": null,
        "coqa-fact-expl.dev.v0": null,
        "coqa-closedqa-correct.dev.v0": null,
        "coqa-closedqa-relevance.dev.v0": null,
        "coqa-closedqa-conciseness.dev.v0": null,
    },
    "chemistry": {
        "balance-chemical-equation.dev.v0": null,
        "ph-calculation.dev.v0": "Basic mathematics + chemistry",
    },
    "music": {
        "music-theory-chord-names.dev.v0": "Test the model's ability to identify chords from the given four notes",
        "music-theory-chord-notes.dev.v0": "Test the model's ability to spell out the notes in a given chord name",
        "music-theory-triads-identification.dev.v0": "Test the model's ability to identify triadic structures using the jazz shorthand notation",
        "music-theory-tetrads-identification.dev.v0": "Test the model's ability to identify tetradic structures using the jazz shorthand notation",
        "music_theory_scale_modes.dev.v0": "Test the model's ability to identify which western music scale a series of 8 notes belongs to",
        "guess-the-singer.dev.v0": "Ability to predict singer by the first 10 words of the song",
    },
    "reasoning": {
        "mazes": {
            "mazes-singlemove-3x3.test.v2": "Evaluate a model's ability to make the correct first move in a 2-dimensional 3x3 maze.",
            "mazes-singlemove-4x4.test.v2": "Evaluate a model's ability to make the correct first move in a 2-dimensional 4x4 maze.",
            "mazes-singlemove-10x10.test.v2": "Evaluate a model's ability to make the correct first move in a 2-dimensional 10x10 maze.",
            "mazes-3x3.test.v2": "Evaluate a model's ability to solve a 2-dimensional 3x3 maze to completion.",
            "mazes-4x4.test.v2": "Evaluate a model's ability to solve a 2-dimensional 4x4 maze to completion.",
            "mazes-10x10.test.v2": "Evaluate a model's ability to solve a 2-dimensional 10x10 maze to completion.",
        },
        "abstract-causal-reasoning-text.dev.v0": "Causal induction",
        "abstract-causal-reasoning-symbolic.dev.v0": "Causal induction",
        "counterfactual-reasoning-fuzzy-match.dev.simple-v0": null,
        "pararule-plus-multi-step-deductive-reasoning.dev.v0": "multi-step deductive reasoning instruction for the PARARULE-Plus dataset",
        "comprehensive-graph-reasoning.dev.v0": "Reasoning about graphs",
        "persian-kinship-riddles.dev.v0": "An evaluation set to assess the logical reasoning abilities for solving kinship riddles in Persian language",
        "poker_analysis.test.v1": "Examine the model's capacity to strategize & make probabilistic reasoning within the framework of poker.",
        "reasoning_with_contradictory_statements.dev.v0": null,
        "seating_arrangements.dev.v0": "Test the model's spatial reasoning ability using seating arrangement questions with limited solution sets.",
        "simple-block-puzzles.dev.v0": "Test the model's spatial reasoning abilities by asking it to combine two blocks to recreate a shape.",
        "squares-gpt.dev.v0": "Test the model's ability to solve basic geometric reasoning questions.",
        "raven_matrices": {
            "raven-matrices-symbolic-center-single.dev.v0": "Evaluate the abstract reasoning abilities of the model on a symbolic version of the Raven test. Matrices composed of a single centered object.",
            "raven-matrices-symbolic-distribute-four.dev.v0": "Evaluate the abstract reasoning abilities of the model on a symbolic version of the Raven test. Matrices composed of four object.",
            "raven-matrices-symbolic-distribute-nine.dev.v0": "Evaluate the abstract reasoning abilities of the model on a symbolic version of the Raven test. Matrices composed of nine object.",
            "raven-matrices-symbolic-in-center-single-out-center-single.dev.v0": "Evaluate the abstract reasoning abilities of the model on a symbolic version of the Raven test. Matrices composed of a small object inside a big object.",
            "raven-matrices-symbolic-in-distribute-four-out-center-single.dev.v0": "Evaluate the abstract reasoning abilities of the model on a symbolic version of the Raven test. Matrices composed of four small objects inside a big object.",
            "raven-matrices-symbolic-left-center-single-right-center-single.dev.v0": "Evaluate the abstract reasoning abilities of the model on a symbolic version of the Raven test. Matrices composed of two objects aligned horizontally.",
            "raven-matrices-symbolic-up-center-single-down-center-single.dev.v0": "Evaluate the abstract reasoning abilities of the model on a symbolic version of the Raven test. Matrices composed of two objects aligned vertically.",
            "raven-matrices-symbolic-open-center-single.dev.v0": "Evaluate the abstract reasoning abilities of the model on a symbolic version of the Raven test with no multiple choices provided. Matrices composed of a single centered object.",
            "raven-matrices-symbolic-open-distribute-four.dev.v0": "Evaluate the abstract reasoning abilities of the model on a symbolic version of the Raven test with no multiple choices provided. Matrices composed of four object.",
            "raven-matrices-symbolic-open-distribute-nine.dev.v0": "Evaluate the abstract reasoning abilities of the model on a symbolic version of the Raven test with no multiple choices provided. Matrices composed of nine object.",
            "raven-matrices-symbolic-open-in-center-single-out-center-single.dev.v0": "Evaluate the abstract reasoning abilities of the model on a symbolic version of the Raven test with no multiple choices provided. Matrices composed of a small object inside a big object.",
            "raven-matrices-symbolic-open-in-distribute-four-out-center-single.dev.v0": "Evaluate the abstract reasoning abilities of the model on a symbolic version of the Raven test with no multiple choices provided. Matrices composed of four small objects inside a big object.",
            "raven-matrices-symbolic-open-left-center-single-right-center-single.dev.v0": "Evaluate the abstract reasoning abilities of the model on a symbolic version of the Raven test with no multiple choices provided. Matrices composed of two objects aligned horizontally.",
            "raven-matrices-symbolic-open-up-center-single-down-center-single.dev.v0": "Evaluate the abstract reasoning abilities of the model on a symbolic version of the Raven test with no multiple choices provided. Matrices composed of two objects aligned vertically.",
            "raven-matrices-text-center-single.dev.v0": "Evaluate the abstract reasoning abilities of the model on a text version of the Raven test. Matrices composed of a single centered object.",
            "raven-matrices-text-distribute-four.dev.v0": "Evaluate the abstract reasoning abilities of the model on a text version of the Raven test. Matrices composed of four object.",
            "raven-matrices-text-distribute-nine.dev.v0": "Evaluate the abstract reasoning abilities of the model on a text version of the Raven test. Matrices composed of nine object.",
            "raven-matrices-text-in-center-single-out-center-single.dev.v0": "Evaluate the abstract reasoning abilities of the model on a text version of the Raven test. Matrices composed of a small object inside a big object.",
            "raven-matrices-text-in-distribute-four-out-center-single.dev.v0": "Evaluate the abstract reasoning abilities of the model on a text version of the Raven test. Matrices composed of four small objects inside a big object.",
            "raven-matrices-text-left-center-single-right-center-single.dev.v0": "Evaluate the abstract reasoning abilities of the model on a text version of the Raven test. Matrices composed of two objects aligned horizontally.",
            "raven-matrices-text-up-center-single-down-center-single.dev.v0": "Evaluate the abstract reasoning abilities of the model on a text version of the Raven test. Matrices composed of two objects aligned vertically.",
            "raven-matrices-text-open-center-single.dev.v0": "Evaluate the abstract reasoning abilities of the model on a text version of the Raven test with no multiple choices provided. Matrices composed of a single centered object.",
            "raven-matrices-text-open-distribute-four.dev.v0": "Evaluate the abstract reasoning abilities of the model on a text version of the Raven test with no multiple choices provided. Matrices composed of four object.",
            "raven-matrices-text-open-distribute-nine.dev.v0": "Evaluate the abstract reasoning abilities of the model on a text version of the Raven test with no multiple choices provided. Matrices composed of nine object.",
            "raven-matrices-text-open-in-center-single-out-center-single.dev.v0": "Evaluate the abstract reasoning abilities of the model on a text version of the Raven test with no multiple choices provided. Matrices composed of a small object inside a big object.",
            "raven-matrices-text-open-in-distribute-four-out-center-single.dev.v0": "Evaluate the abstract reasoning abilities of the model on a text version of the Raven test with no multiple choices provided. Matrices composed of four small objects inside a big object.",
            "raven-matrices-text-open-left-center-single-right-center-single.dev.v0": "Evaluate the abstract reasoning abilities of the model on a text version of the Raven test with no multiple choices provided. Matrices composed of two objects aligned horizontally.",
            "raven-matrices-text-open-up-center-single-down-center-single.dev.v0": "Evaluate the abstract reasoning abilities of the model on a text version of the Raven test with no multiple choices provided. Matrices composed of two objects aligned vertically."
        }
    },
    "law": {
        "aba_mrpc_true_false.dev.v0": null,
        "illinois-law.v0": "Predict law cases verdict",
        "us-tort-law.dev.v0": "Law multiple choice",
        "adultery_state_laws.dev.v0": "Law Q&A",
        "brazilian_laws.test.v1": null,
        "utah_real_estate.dev.v0": "tests the model's ability to read and understand Utah's real estate law.",
    },
    "biology": {
        "three-pt-mapping.dev.v0": "Calculate gene positions",
        "count_token_freq_dna.dev.v0": "Count occurrence of specific nucleotide within provided DNA sequences",
        "dna-melting-calculation.dev.v0": "Solve DNA melting temperature problems",
    },
    "physics": {
        "beam.analysis.dev.v0": "Beam analysis (physics)",
        "physics.interaction.dev.v0": "Test the model's ability to predict the direction in which an object is likely to fall towards.",
    },
    "games": {
        "backgammon": {
            "backgammon-can-hit.dev.v0": "Backgammon understanding",
            "backgamon-illegal-move.dev.v0": "Backgammon understanding",
        },
        "chess": {
            "chess-piece-count.s1.simple-v0": "Chess moves, rules and theory",
            "chess.match.dev.v0": "Play chess",
            "mate-in-one.dev.v0": "Find the checkmating move for various board positions",
        },
        "game-theory.dev.v0": "Reasoning about normal-form games such as Paper-Rock-Scissors",
        "connect4.s1.v1": null,
    },
    "string-processing": {
        "reverse-string.s1.simple-v0": "Reverse strings",
        "rot13.s1.simple-v0": "ROT13",
        "anagrams.test.v1": null,
        "bigrams.dev.v0": null,
        "complex-replace-characters.dev.v0": null,
        "base64-decode-simple.dev.v0": "Base64 decode",
        "first-letters.dev.v0": null,
        "invoices.dev.v0": "Parse real-world numerical data",
        "last-word-nth.s1.simple-v0": "Identify last word of sentence based on index",
        "find-letter.dev.v0": null,
        "json_patch_object.dev.v0": "Create minimal, correct JSON Patches for nested objects",
        "swap-words.dev.v0": null
    },
    "other": {
        "allergen-information.dev.v0": "Identify allergen information",
        "naughty_strings.test.v1": null,
        "naughty_strings_fuzzy.test.v1": null,
        "naughty_strings_graded.test.v1": null,
        "naughty_strings_graded_meta.test.v1": null,
        "joke-fruits": {
            "joke-fruits.dev.v0": null,
            "joke-fruits-v2.dev.v0": null,
            "joke-fruits-likert.dev.v0": null,
            "joke-fruits-meta.dev.v0": null,
            "joke-fruits-expl-meta.dev.v0": null,
            "joke-fruits-ans-meta.dev.v0": null
        },
        "knot-theory": {
            "knot-theory-unknotting-problem.dev.v0": null,
            "knot-theory-code-conversion.dev.v0": null,
            "knot-theory-unknotting-number.dev.v0": null
        },
        "joke-and-rap-battle": {
            "joke-animals-vs-fruits.dev.v0": null,
            "rap-people-vs-people.dev.v0": null,
            "rap-animals-vs-fruits.dev.v0": null,
            "rap-people-vs-fruits.dev.v0": null
        },
        "actors-sequence.dev.match-v1": "Evaluate multiple actor output, sequence following, tokenization, logic ability",
        "match_banking77.test.v1": null,
        "convert-hex-hsl-lightness.dev.v0": "Convert hex color to HSL",
        "crepe.dev.v2": null,
        "cube-pack.dev.v0": null,
        "decrypt-caesar-cipher.dev.v0": null,
        "emoji-riddle.s1.simple-v0": "Solve emoji riddles",
        "emotional-intelligence.dev.v0": "Emotional Intelligence",
        "escher-sentences.dev.v0": null,
        "fcc_amateur_extra.dev.v0": "US FCC Amateur Radio License multiple choice questions",
        "heart-disease.v0": "Predict heart disease",
        "imperial_date_to_string.dev.v0": null,
        "hellaswag.val.ab-v1": null,
        "lambada.oaitest.v1": null,
        "lat_long_identify.dev.v0": null,
        "loss-logic-fact.dev.v0": null,
        "map-electronic-component-part-to-fact.dev.v0": null,
        "medmcqa.dev.v0": null,
        "mendelian_inheritance.dev.v0": null,
        "moral_exceptQA.test.v1": "Morality",
        "number-pattern.dev.v0": null,
        "partially_solved_crossword_clues.dev.v0": null,
        "pattern_identification.dev.v0": null,
        "hand_ranks.test.v1": null,
        "positive-binary-operations.test.v1": null,
        "qa.dev.v0": "Q&A based on context",
        "regex.match.dev.v0": null,
        "rucola.test.v0": ".",
        "sarcasm.test.v1": "Sarcasm detection",
        "sort-numbers.s1.simple-v0": "Sorting numbers",
        "svg_understanding.v0": "Visual understanding of SVG files",
        "taxes.dev.v0": null,
        "tempo_to_measure_count.dev.v0": "Calculate number of measures in a song",
        "mg-humor-people_jp.dev.v0": null,
        "diversity.dev.v0": null,
        "best.dev.v0": null,
        "ukraine-eit.val.v0": null,
        "unified-patch.dev.v0": null,
        "utility_price_parsing.dev.v0": null,
        "which-is-heavier.dev.v0": "Which of two quantities is heavier",
        "2D or 3D environment": {
            "simple-visual-understanding.dev.v0": "Test the model's ability to understand simple visual scenarios as well as some simple 2D navigation",
            "simple_physics_engine.dev.v0": "Test the model's ability to reason about and simulate a simplified physics model in a 2d environment.",
            "2d_movement.dev.v0": "Understanding 2D environment",
            "3d_globe_movement.dev.v0": "Understanding 3D environment",
            "3d_object_manipulation.dev.v0": "Understanding 3D object manipulation",
            "geometry_puzzle.dev.v0": "Solve spatial and geometrical puzzles",
            "track_objects.dev.v0": "Test the model's ability to track objects after being moved around",
            "tracking-shuffled-objects.dev.v0": null,
        },
        "GPT-model-text-detection.dev.v0": "Distinguish between human-written and AI-generated text",
        "abstract2title.test.v1": "Abstract to Title",
        "accounting_audit.dev.v0": null,
        "arc.dev.v0": null,
        "alternate_numeral_systems.dev.v0": "Convert base 10 numbers into alternate numeral systems",
        "ambiguous-sentences.dev.v0": "Understanding ambiguous sentences",
        "ascii-digit-recognition.dev.v0": "ASCII digit recognition ability",
        "ascii-wordart.dev.v0": "Identify ASCII art that represents words.",
        "asl-classifiers.dev.v0": "Understand American Sign Language",
        "astro_eval.dev.v0": "Predict planetary routes",
        "atpl_exams.dev.v0": null,
        "benjaminmoore_to_hex.dev.v0": null,
        "bias_detection.dev.v0": "Classify sentences in news",
        "blackfoot-numerals-modern.dev.v0": "Convert Blackfoot numerals to numbers",
        "body-movement.dev.zero_shot_v0": "Understand human body movement",
        "building_floorplan.test.v1": null,
        "cardinal-directions.dev.v0": null,
        "cissp-study-questions.test.v1": null,
        "color_theory_complementary.dev.v0": "Color theory understanding",
        "consensus_summary.dev.v0": "Produce a Consensus in response to a scientific inquiry",
        "corr2cause.dev.v0": "Ability to infer causation from correlation.",
        "cricket_situations.dev.v0": "Apply rules of the sport cricket to different situations",
        "crontab.dev.v0": null,
        "date-booking.dev.v0": null,
        "date-calculator.test.v1": null,
        "day-of-week-from-date.dev.v0": null,
        "detect-hshd.dev.v0": null,
        "dhammapada-reference.dev.v0": "Knowledge about Dhammapada verses",
        "diabetes.dev.v0": null,
        "direct-speech-tag.dev.v0": null,
        "directions.dev.v0": "Keep state of direction after a series of turns",
        "euler_problems.dev.v0": "Solve Euler problems",
        "european-date-format-challenge.dev.v0": "Understand MM/DD/YYYY vs. DD/MM/YYYY date formats",
        "find-thirukkural.dev.v0": "Accurately finds the correct Thirukkural in Tamil which the user asks for in English.",
        "find_country_from_svg.dev.v0": "Distinguish country based on its svg shape",
        "finger-tracking.dev.v0": "Track a ring moving across fingers",
        "food.test.v1": null,
        "formal-grammar-to-regex.dev.v0": null,
        "gears_rotation.dev.v0": "Determine the rotation of a gear given a disposition of multiple gears and the rotation of one of them",
        "german-part-of-speech.dev.v0": "What part of speech a given word can have in German",
        "gol.dev.v1": "Determine the next state in a simple game of life board",
        "gpt-protocol-buffers.dev.v0": null,
        "historical-kana-orthography-reading.dev.v0": "Reading historical kana orthography",
        "iambic-pentameter.dev.v0": null,
        "interlingual-homograph.dev.v0": "Determine whether the given word is an interlingual homograph or not",
        "internal_representations.dev.v0": null,
        "invert_word_wise.dev.v0": "Logically, inverting strings twice just results in the original string again. The LLMs find it very difficult to deduce it, and somehow (at least up to GPT-3.5) mix things up.",
        "invoice_due_date_leap_day_adjustment.dev.v0": null,
        "iqbal-poetry-translation.dev.v0": "Correctly translate Iqbal's poetry into English",
        "translation-meta.dev.v0": null,
        "irony.dev.v0": "Identify one of three types of irony, situational, verbal, or dramatic",
        "isosceles-right-triangle.dev.v0": null,
        "jee-math.dev.v0": null,
        "list_comparison_missing_name.dev.v0": "Test the model's ability to determine which name is present in list 1 but not in list 2. List 1 is formatted 'First Last' while list two is formatted 'Last First'. Lists are between 20-35 names long.",
        "mandaliof-table.dev.v0": "Test the model's ability to determine which atom has the largest atomic number.",
        "medication_dose.dev.v0": "Test to model's ability to accurately identify medication doses that are outside the standard dose range.",
        "monthly_metric_comparison.dev.v0": "This eval tests the models ability to compare monthly metric.",
        "missing-operators.s1.simple-v0": "Example eval that checks sampled text matches the expected output.",
        "multistep-word-problems.dev.v0": "Test the model's ability to solve complex, multistep math word problems",
        "newsology.dev.v0": "Ask the model to pick a fruit, when telling the model that we have provided a list of vegetables. And then vice versa (pick vegetable, from basket of fruit).",
        "next-val-series.dev.simple-v0": "Test the model's ability to predict the next value in a series.",
        "nfl-point-combinations.dev.v0": "Test the model's ability to calculate all the possible ways to for an NFL team to achieve a final score.",
        "non-compound-names.dev.v0": null,
        "non-compound-names-meta.dev.v0": null,
        "number_series_test.dev.v0": null,
        "numbers_game.dev.v0": "Test the model's ability to solve permutation questions",
        "numeral-type-comparisons.dev.v0": "Evaluate the LLM's ability to compare similar or identical numerals across formats in arithmetic and linguistic contexts",
        "numerical-cabbala-casanova.dev.v0": null,
        "nutrition.dev.v0": "Test the model's nutritional accuracy, providing parsable and accurate responses using metric notation when asked about specific values.",
        "ordered-history-events.dev.v0": null,
        "ordering_randomised_versionlist.dev.v0": "This evaluation aims to test prompt engineered failure cases to order a randomised version history list, but causes chronological ordering failures such as 7.5.2 -> 7.4.2 -> 7.5.1 -> 7.4.1 (incorrectly inserted 7.4.2 in between 7.5.2 and 7.5.1 in the Explainable AI chain of thoughts) and 7.5.2 -> 7.5.1 -> 7.5.0 -> 7.4.1 (incorrectly skipped over 7.4.2 in the Explainable AI chain of thoughts).",
        "override-system-instruction.dev.v0": null,
        "pantone_to_hex.dev.v0": null,
        "parable-to-moral-match-en.dev.v0": null,
        "parable-to-moral-match-zh.dev.v0": null,
        "passing-balls.dev.v0": "Tests the model's ability to correctly determine the last player holding a ball after a sequence of passes.",
        "quartz.test.v1": null,
        "path_enclosed_area.dev.v0": "Geometric calculation of the total area enclosed by a given path on a flat plane",
        "phonetics-identify-words-needing-missing-gpcs.s1.simple-v0": "Identify if an input string matches the list of allowed Grapheme-Phoneme Correspondences",
        "points-on-line.dev.v0": "Tests the model's ability to calculate three points (start, center, end) on a line.",
        "population_span_extraction.dev.v0": "The model is shown abstracts of clinical drug trials and tasked with extracting the text spans that specify the population demographic of the shown abstract. The population demographic can be but is not necessarily specified in multiple seperate spans.",
        "premature-conclusions.dev.v0": "This test evaluates the model's ability to identify insufficient data and prevent premature or unsupported deductions.",
        "match_product-matching_fewshot.dev.v1": "Evaluate LLM performance on the task of Product Matching (pair-wise binary classification). Examples are a subsample of the WDC Products 80cc20rnd000un validation set. This is the few-shot version with 10 negative and 10 positive demonstrations from the paper 'Using ChatGPT for Entity Matching' by Ralph Peeters and Christian Bizer.",
        "match_product-matching_rules.dev.v1": "Evaluate LLM performance on the task of Product Matching (pair-wise binary classification). Examples are a subsample of the WDC Products 80cc20rnd000un validation set. This is the zeroshot with rules version from the paper 'Using ChatGPT for Entity Matching' by Ralph Peeters and Christian Bizer.",
        "match_product-matching_zeroshot.dev.v1": "Evaluate LLM performance on the task of Product Matching (pair-wise binary classification). Examples are a subsample of the WDC Products 80cc20rnd000un validation set. This is the zeroshot version from the paper 'Using ChatGPT for Entity Matching' by Ralph Peeters and Christian Bizer.",
        "prompt-injection.dev.v0": "Test the model's ability to distinguish between instructions and data.",
        "proofreader.dev.v0": "Test the model ability to check text correctness without fact checking.",
        "ral_to_hex.dev.v0": null,
        "rectangles.dev.v0": null,
        "recurrence-relation.test.v1": null,
        "relative-orientations.dev.v0": null,
        "resistor-ohm-calculator.dev.simple-v0": "Test the model's ability to calculate resistance (in ohms) of a resistor, given color of each band",
        "resource_id_extraction.dev.v0": "Evaluates correctness for identifying UI Elements based on description and extracting resourceIds from Android XML dumps.",
        "reverse-sort-words-eng-simple.dev.v0": "Tests performance to sort different comma-separated english words in reverse alphabetical order. Inlcudes duplicate words.",
        "rhetorical-devices.dev.v0": "Evaluate model's understanding of rhetorical device usage in sentences",
        "rock-climbing.dev.v0": null,
        "rubiks-colors.dev.v0": "Test the model's ability to determine colors on the face of a Rubik's cube following a scramble.",
        "security_guide.dev.v0": "Providing good cybersecurity guidance for common attacks",
        "seo-keywords.dev.v0": "Test the model's ability to generate SEO keywords.",
        "sexagenary_cycle_calculation.dev.v0": null,
        "shape-in-shape.dev.v1": "Test the model's ability to check whether a given shape will fit within another shape.",
        "shopping_discount_comparison.dev.v0": "Test the model's ability to compare discounts and select the best one",
        "simple-charting.dev.v0": "Test the model's ability to generate the appropriate chart type for a given dataset.",
        "singapore_data_protection_decisions.dev.v0": "This evaluation checks the model's ability to act as a legal researcher, accurately extracting relevant paragraphs given a document and a query, set in the context of decisions made by Singapore's Personal Data Protection Commission.",
        "smiles_to_formula.dev.v0": null,
        "soc_codes.dev.v0": "Eval that checks the models ability to classify a job title into a SOC codes issued by the American Bureau of Labor Statistics",
        "solve-for-variable.dev.v0": "Multiple-choice questions about solving a mathematical equation for a variable.",
        "south-african-bands.dev.v0": "Test the model's ability to understand that we are providing the name of a South African band, find the supplied band, and if the band has a lead vocalist provide the stage name or real name of the vocalist.",
        "split_chinese_characters.dev.v0": null,
        "stats-tests.dev.v0": null,
        "superficial-patterns.dev.v0": null,
        "svg_alphabet.dev.v0": "Evaluates correctness the letter of the alphabet the SVG corresponds to.",
        "svg_to_text.dev.v0": "Evaluates correctness for reading text encoded in svg",
        "syllables.dev.v1": null,
        "tetris.dev.v0": "Tests the models ability of spacial awareness by rotating tetris cubes. Tests all 7 classic tetris blocks and performs clockwise and counterclockwise rotations from different starting points.",
        "thirty_six_stratagems.test.v1": "Test the accuracy of the model to understand the 36 stratagems of Sun Tzu's Art of War",
        "test-time-zone-conversion.dev.v0": "Test the models ability to convert between different times zones, including the 2 week period between daylight savings time change in Europe and US.",
        "tokyo-station-number.dev.v0": "Station numbering for Tokyo Metro and Tokyu Railways.",
        "tricky-word-problems.dev.v0": "Test the model's ability to recognize and correctly account for unexpected and potentially misleading information provided in word problems.",
        "unique_combinations.dev.v0": "Given a set of values, find the unique combination that satisfies a constraint.",
        "unsolvable_questions.dev.v0": null,
        "unwanted-rhyming.dev.v0": null,
        "viewport_to_grid_size.dev.v3": "Evaluates a models ability to determine the size of an obscured grid using information only from initial constraints and a visible viewport.",
        "vigenere.s1.simple-v0": "Test the model's ability to perform the simple Vigenere character operation.",
        "vintage_phone_keyboard_decode.dev.v0": "An array of correspondence between letters and numbers on the mobile phone keyboard evals, examining the model the ability to distinguish and analyze the relationship within groups in multiple groups composed of English letters and numbers.",
        "wkt_understanding.dev.v0": "Test understanding of Multipolygon WKT (Well-Known Text) representation of vector geometry objects (https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry).",
        "word-association-related-words": {
            "word-association-related-words-2.test.v1": "Evaluate a model's ability to determine a secret word based on a list of 2 related words.",
            "word-association-related-words-3.test.v1": "Evaluate a model's ability to determine a secret word based on a list of 3 related words.",
            "word-association-related-words-4.test.v1": "Evaluate a model's ability to determine a secret word based on a list of 4 related words.",
            "word-association-related-words-5.test.v1": "Evaluate a model's ability to determine a secret word based on a list of 5 related words."
        },
        "word_vector_over_reliance.dev.simple-v0": "Example eval that checks sampled text matches the expected output."
    }
}
