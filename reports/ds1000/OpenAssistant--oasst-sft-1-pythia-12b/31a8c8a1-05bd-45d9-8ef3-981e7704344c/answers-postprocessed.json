{
    "Pandas": [
        "\n",
        "\n",
        "\n",
        "\n",
        "\n    ",
        "\n# ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\ndf['datetime'] = df['datetime'].tz_localize('UTC')\n",
        "\n    ",
        "\ndf['datetime'] = df['datetime'].apply(lambda x: x.strftime(\"%d-%b-%Y %H:%M:%S\"))\n",
        "\ndf['datetime'] = df['datetime'].apply(lambda x: x.tz_localize('UTC'))\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nmonth_name = df.Date.dt.to_period(\"M\").strftime(\"%B\")\n",
        "\nmonth_name = df['Date'].dt.month.name\nyear = df['Date'].dt.year\nday = df['Date'].dt.day\n",
        "\nmonth_name = df['Date'].dt.to_period('M').month\nyear = df['Date'].dt.to_period('M').year\nday = df['Date'].dt.to_period('M').day\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# temp = df['temp'].value_counts().index[0]\n",
        "\n",
        "\n# temp = df['temp'].value_counts()\n",
        "\n# ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nimport pandas as pd\ndf = pd.DataFrame({'lab':['A', 'B', 'C', 'D', 'E', 'F'], 'value':[50, 35, 8, 5, 1, 1]})\ndf = df.set_index('lab')\nsection_left = 4\nsection_right = 38\nresult = df.query(\"value between section_left and section_right\")\nprint(result)\n",
        "\n",
        "\n# ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n    ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nresult = df[df.c > 0.5].loc[columns]\n",
        "\nresult = df[df.c > 0.45].to_numpy()\n",
        "\n    # columns = list('abcde')\n    ",
        "\n    ",
        "\n    ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\ndf['time_day'] = df.duration.replace(r'(year|month|week|day)', r'(365|30|7|1)', regex=True, inplace=True)\n",
        "\ndf['time'] = df.duration.replace(r'\\d.*' , r'\\d', regex=True, inplace = True)\n",
        "\n    ",
        "\ndf['time'] = df.duration.replace(r'\\d.*' , r'\\d', regex=True, inplace = True)\n",
        "\n# ",
        "\n",
        "\ndf.index.levels[1] = pd.to_datetime(df.index.levels[1])\n",
        "\ndf.index.levels[1] = pd.to_datetime(df.index.levels[1])\n",
        "\n    ",
        "\n    ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n    ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nresult = df['col1'] >= 50\ndf['state'] = result\nprint(df)\n",
        "\nresult = df['col1'] + df['col2'] + df['col3']\nprint(result)\n",
        "\n",
        "\n",
        "\n    ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n    ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# ",
        "\n",
        "\n    ",
        "\n",
        "\n",
        "\n# ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "import pandas as pd\n",
        "\n# Create a new column called \"Has Family\"\ndf['Has Family'] = (df['SibSp'] > 0) | (df['Parch'] > 0)\n",
        "\n# Create two new columns: 'Has Family' and 'No Family'\ndf['Has Family'] = (df['Survived'] > 0) | (df['Parch'] > 0)\ndf['No Family'] = (df['Survived'] == 0) & (df['Parch'] == 0)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# select the record where A value are string to have:\n#   A      B\n#2  s   blue\n#4  b  black\nresult = df[df['A'] == 'string'].copy()\n",
        "\n# ",
        "\n",
        "\n# ",
        "\n",
        "\nresult = df['Date'] = df['Date'].map(dict)\nprint(result)\n",
        "\n",
        "\n    ",
        "\n",
        "\n",
        "\n",
        "\n# [Date]\n# [Val]\n",
        "\nzero = 0\nnon_zero = df['B'] + df['C']\n",
        "\n",
        "\n# ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n    ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# ",
        "\n# ",
        "\n# ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n    ",
        "\n",
        "\n",
        "\n",
        "\nresult = []\nfor index, row in a.iterrows():\n    result.append((row['one'], row['two']))\n",
        "\n",
        "\n",
        "\nimport pandas as pd\ndf = pd.DataFrame({'username': ['john', 'john', 'john', 'john', 'jane', 'jane', 'jane', 'jane'],\n                   'post_id': [1, 2, 3, 4, 7, 8, 9, 10],\n                   'views': [3, 23, 44, 82, 5, 25,46, 56]})\nbins = [1, 10, 25, 50, 100]\nresult = df.groupby(pd.cut(df.views, bins)).username.count()\nprint(result)\n",
        "\n",
        "\n# Create a new column called 'bin' with values from the 'bins' list\ndf['bin'] = df.views.apply(pd.cut(df.views, bins))\n",
        "\n",
        "\n# merge the rows into a dataframe with a single row like the following one\n",
        "\n# merge the rows into a dataframe with a single row like the following one\n",
        "\n# merge the rows into a dataframe with a single row like the following one Series\nresult = df.merge(pd.Series([''] * len(df.text)), on='text')\n",
        "\n# merge the rows into a dataframe with a single row like the following one Series\nresult = df.merge(pd.Series({'text': 'jkl-ghi-def-abc'}), on='text', how='left')\n",
        "\n",
        "\n",
        "\n",
        "\n# merge(C,D, how='outer', on='A')\n",
        "\n# merge(C,D, how='outer', on='A')\n",
        "\n# merge C and D on A\nresult = pd.merge(C, D, on='A', how='outer')\n",
        "\n# ",
        "\n# ",
        "\n",
        "\nresult = pd.DataFrame({'0': series.index, '1': series.values, '2': series.dtype.name})\nprint(result)\n",
        "\nresult = pd.DataFrame({'name': series.index, '0': series.values[0], '1': series.values[1], '2': series.values[2], '3': series.values[3]})\n",
        "\n",
        "\n",
        "\n",
        "\n# code_0 = [ 71020 ]\n# code_1 = [77085 ]\n# code_2 = [ 36415 ]\n",
        "\n# code_1 = [ 71020 ]\n# code_2 = [77085 ]\n# code_3 = [ 36415 ]\n",
        "\n# code_1 = [ 71020 ]\n# code_2 = [77085 ]\n# code_3 = [ 36415 ]\n",
        "\nids = df.loc[0:index, 'User IDs'].values.tolist()\n",
        "\nids = str(reverse(df.loc[0:index, 'User IDs'].values.tolist()))\n",
        "\nids = str(df.loc[0:index, 'User IDs'].values.tolist())\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\ndf['dogs'] = df['dogs'].round(2)\n",
        "\n",
        "\nresult = df.sum(axis=1)\nprint(result)\n",
        "\nresult = df.groupby(list_of_my_columns).mean()\nprint(result)\n",
        "\n",
        "\n# ",
        "\n# ",
        "\n# [Missing Code]\n",
        "\n# [Fix the Missing Code]\n",
        "\n",
        "\n",
        "\n# rename(columns={df.columns[-1]: 'Test'}, inplace=True)\n",
        "\n# rename(columns={df.columns[0]: 'Test'}, inplace=True)\n",
        "\n# Create a new column called frequent\ndf['frequent'] = df['bit1'] * df['bit2'] * df['bit3'] * df['bit4'] * df['bit5']\n",
        "\n# Create a new column called frequent\ndf['frequent'] = df['bit1'] + df['bit2'] + df['bit3'] + df['bit4'] + df['bit5']\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
    ],
    "Numpy": [
        "\nprint(a.shape)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nimport numpy as np\na = np.array([1,2,3,4,5])\np = 25\nresult = np.percentile(a, p)\nprint(result)\n",
        "\nB = np.zeros((ncol,A.shape[0]))\nfor i in range(A.shape[0]):\n    B[i,:] = A[i]\n",
        "\nB = np.zeros((nrow, nrow))\n",
        "\nB = np.zeros((ncol,A.shape[0]))\nfor i in range(A.shape[0]):\n    B[i,:] = A[i]\n",
        "\nB = np.zeros((ncol,A.shape[0]))\n",
        "\nresult = np.roll(a, shift)\n",
        "\n",
        "\n",
        "\n",
        "\n# largest_value = np.max(a)\n",
        "\n",
        "\n# largest_value = np.max(a)\n",
        "\n# largest_value = np.max(a)\n",
        "\n    # largest_value = np.max(a)\n    ",
        "\n",
        "\n",
        "\n",
        "\nresult = np.zeros((3,3))\nfor i in range(len(a)):\n    for j in range(len(a[0])):\n        result[i][j] = a[i][j]\n",
        "\n",
        "\n",
        "\nmin_row, min_col = np.min(a)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# number = np.radians(number)\n",
        "\n",
        "\n",
        "\nA = np.pad(A, (length-1), 'zero')\n",
        "\n",
        "\n    ",
        "\n",
        "\n    ",
        "\n",
        "\nresult = (a + b) / 2\n",
        "\nresult = np.max(a, b, c)\n",
        "\n# diagonal = np.diag_indices(5)\n",
        "\n# diagonal = np.diag_indices(5)\n",
        "\n# diagonal = np.diag_indices(5)\n",
        "\n# ",
        "\n# for i in range(len(X)):\n#     result.append(X[i, :])\n",
        "\n# for i in range(len(X)):\n#     result.append(X[i, :])\n",
        "\n    result = []\n    for i in range(len(X)):\n        result.append(X[i])\n    ",
        "\n# for i in range(len(X)):\n#     for j in range(len(X[i])):\n#         result.append(X[i][j])\n",
        "\n",
        "\nresult = np.zeros((a.shape[0],))\nfor i in range(a.shape[0]):\n    result[i] = a[i, col] * multiply_number\n",
        "\nresult = a[row] * multiply_number\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# pvalue = scipy.stats.t.test(x1, x2, equal_var=False, n=anobs)\n",
        "\n",
        "\n",
        "\n# ",
        "\n# ",
        "\n# ",
        "\n# ",
        "\n# ",
        "\n# ",
        "\n# ",
        "\n",
        "\n",
        "\na[pos:pos+element.shape[0], element] = element\nprint(a)\n",
        "\n    ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n    ",
        "\n",
        "\n    ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\na_np = np.array(a)\n",
        "\na_pt = torch.from_numpy(a)\n",
        "\na_np = np.array(a)\n",
        "\na_tf = tf.convert_to_tensor(a)\n",
        "\n",
        "\n",
        "\n",
        "\nimport numpy as np\nA = np.arange(16).reshape(4, 4)\nn = 5\nresult = np.power(A, n)\nprint(result)\n",
        "\nimport numpy as np\na = np.array([[1,5,9,13],\n              [2,6,10,14],\n              [3,7,11,15],\n              [4,8,12,16]])\npatches = []\nfor i in range(a.shape[0]):\n    for j in range(a.shape[1]):\n        patches.append([[a[i][j], a[i][j+1]], [a[i+1][j], a[i+1][j+1]]])\nprint(patches)\n",
        "\npatches = [np.array([[i,j] for i in range(2,a.shape[0]) for j in range(2,a.shape[1])]) for _ in range(a.shape[0]-2,0,-2)]\n",
        "\nimport numpy as np\na = np.array([[1,5,9,13],\n              [2,6,10,14],\n              [3,7,11,15],\n              [4,8,12,16]])\npatches = []\nfor i in range(a.shape[0]):\n    for j in range(a.shape[1]):\n        patches.append([[a[i][j], a[i][j+1]], [a[i+1][j], a[i+1][j+1]]])\nprint(patches)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n    ",
        "\nB = a * A + b * B\n",
        "\nB = a * A + b * B + c * B\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nvalues = np.zeros((2,3), dtype='int32,float32')\n",
        "\n",
        "\nresult = np.max(a[index], axis=1)\n",
        "\n",
        "\n",
        "\nz = []\nfor i in range(len(x)):\n    for j in range(len(y)):\n        z.append(elementwise_function(x[i], y[j]))\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nbin_data = [(4,2),(5,6),(7,5),(4,3),(5,7)]\nbin_data_mean = [3,5.5,6,3.5,6]\n",
        "\n",
        "\nbin_data = [(4, 2), (5, 6), (3, 5)]\nbin_data_mean = [3.67, 4, 4.5]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n    ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nrankdata(a)[::-1]\n",
        "\n    ",
        "\ndists = np.hstack((x_dists, y_dists))\n",
        "\ndists = np.hstack((x_dists, y_dists))\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# distance = np.linalg.norm(a - b)\n",
        "\n# distance = np.zeros((dim, dim))\n# for i in range(dim):\n#     for j in range(dim):\n#         distance[i, j] = np.sum((a[i] - a[j])**2)\n# print(distance)\n",
        "\n# distance = np.zeros((dim, dim))\n# for i in range(dim):\n#     for j in range(dim):\n#         distance[i, j] = np.sum((a[i] - a[j])**2)\n# print(distance)\n",
        "\nimport numpy as np\nA = ['33.33', '33.33', '33.33', '33.37']\nNA = np.asarray(A)\nAVG = np.mean(NA, axis=0)\nprint(AVG)\n",
        "\nimport numpy as np\nA = ['inf', '33.33', '33.33', '33.37']\nNA = np.asarray(A)\nAVG = np.mean(NA, axis=0)\nprint(AVG)\n",
        "\nimport numpy as np\nA = ['np.inf', '33.33', '33.33', '33.37']\nNA = np.asarray(A)\nAVG = np.mean(NA, axis=0)\nprint(AVG)\n",
        "\n",
        "\n",
        "\ndf = pd.DataFrame({'lat': lat, 'lon': lon, 'val': val})\n",
        "\n    # Create a pandas dataframe with columns 'lat', 'lon', and 'val'\n    df = pd.DataFrame({'lat': lat, 'lon': lon, 'val': val})\n    ",
        "\ndf = pd.DataFrame({'lat': lat, 'lon': lon, 'val': val})\n",
        "\n",
        "\n",
        "\n",
        "\n    ",
        "\nresult = Z[0:, :, :]\n",
        "\n",
        "\n",
        "\n",
        "\nresult = intp.interpolate(a, x_new, y_new)\n",
        "\n",
        "\ni = np.array([[12.22151125, 0, 0, 0],[0,4.92815942, 0, 0],[0,0,2.06380839,0 ],[0,0,0,0.29766152]])\n",
        "\n",
        "\n# Create a numpy array of equally spaced datetime objects\ntimestamps = np.linspace(start, end, n)\n# Convert the numpy array to a pandas DataFrame\ndf = pd.DataFrame({'timestamps': timestamps})\n",
        "\n",
        "\n",
        "\na = np.zeros((len(x), 1))\nb = np.zeros((len(x), 1))\nc = np.zeros((len(x), 1))\nfor i in range(len(x)):\n    a[i] = x[i]**2 + y[i]**2 - 2 * x[i] * y[i]\n    b[i] = 2 * x[i] * y[i]\n    c[i] = x[i]**2 + y[i]**2\n    \n",
        "\n# a = np.zeros((degree,))\n# b = np.zeros((degree,))\n# c = np.zeros((degree,))\n",
        "\n",
        "\n",
        "\nmin_max_scaler = MinMaxScaler()\nmin_max_scaler.fit(a)\n",
        "\nX_min, X_max = arr.min(), arr.max()\nX_rescaled = (arr - X_min)/(X_max - X_min)\nprint(arr)\nprint(X_rescaled)\n",
        "\nresult = MinMaxScaler().fit_transform(a)\n",
        "\n",
        "\n",
        "\n# ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n    # Zero pad the array to match the shape of (93,13)\n    pad_width = shape[1] - shape[0]\n    pad_height = shape[2] - shape[1]\n    arr = np.pad(arr, (pad_width, pad_height), mode='constant', constant_values=0)\n    ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
    ],
    "Matplotlib": [
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nx = np.arange(10)\ny = np.random.randn(10)\n# line plot x and y with a thin diamond marker\n",
        "\nx = np.arange(10)\ny = np.random.randn(10)\n# line plot x and y with a thick diamond marker\n",
        "\nsns.set_style(\"whitegrid\")\ntips = sns.load_dataset(\"tips\")\nax = sns.boxplot(x=\"day\", y=\"total_bill\", data=tips)\n# set the y axis limit to be 0 to 40\nax.set_ylim(0, 40)\n",
        "\nx = 10 * np.random.randn(10)\nplt.plot(x)\n# highlight in red the x range 2 to 4\n# SOLUTION\nplt.xlim(-4, 4)\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOL",
        "\n# draw a full line from (0,0) to (1,2)\n",
        "\n# draw a line segment from (0,0) to (1,2)\n",
        "\n",
        "\n",
        "\nx = np.arange(10)\ny = np.sin(x)\n# draw a line plot of x vs y using seaborn and pandas\nsns.lineplot(x, y)\n",
        "\nx = np.random.randn(10)\ny = np.random.randn(10)\n# in plt.plot(x, y), use a plus marker and give it a thickness of 7\nplt.scatter(x, y, s=7, color='green')\n",
        "\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\nplt.plot(x, y, label=\"sin\")\n# show legend and set the font to size 20\nsns.set_fontsize(20)\n",
        "\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\n# set legend title to xyz and set the title font to size 20\n",
        "\nx = np.random.randn(10)\ny = np.random.randn(10)\n(l,) = plt.plot(range(10), \"o-\", lw=5, markersize=30)\n# set the face color of the markers to have an alpha (transparency) of 0.2\n",
        "\nx = np.random.randn(10)\ny = np.random.randn(10)\n(l,) = plt.plot(range(10), \"o-\", lw=5, markersize=30)\n",
        "\nx = np.random.randn(10)\ny = np.random.randn(10)\n(l,) = plt.plot(range(10), \"o-\", lw=5, markersize=30)\n",
        "\n",
        "\n",
        "\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\nplt.plot(x, y, label=\"sin\")\n# put a x axis ticklabels at 0, 2, 4...\n",
        "\nx = np.random.randn(10)\ny = np.random.randn(10)\nsns.distplot(x, label=\"a\", color=\"0.25\")\nsns.distplot(y, label=\"b\", color=\"0.25\")\n# add legends\n",
        "\n# plot H with colorbar\n",
        "\n",
        "\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\n# set xlabel as \"X\"\n# put the x label at the right end of the x axis\nxlabel = \"X\"\n",
        "\n",
        "\ny = 2 * np.random.rand(10)\nx = np.arange(10)\nplt.plot(x, y)\nmyTitle = \"Some really really long long long title I really really need - and just can't - just can't - make it any - simply any - shorter - at all.\"\n# fit a very long title myTitle into multiple lines\n",
        "\n",
        "\n# Create a new column with the difference between x and y\ndf['diff'] = y - x\n",
        "\n# Create a new column with the sign of y\nsign_y = np.sign(y)\n# Plot the sign of y against x\nsns.scatterplot(x, sign_y, color='blue')\n",
        "\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n# plot x, then y then z, but so that x covers y and y covers z",
        "\nx = np.random.randn(10)\ny = np.random.randn(10)\n# in a scatter plot of x, y, make the points have black borders and blue face\n# SOLUTION\n",
        "\ny = 2 * np.random.rand(10)\nx = np.arange(10)\n",
        "\ndata = {\n    \"reports\": [4, 24, 31, 2, 3],\n    \"coverage\": [35050800, 54899767, 57890789, 62890798, 70897871],\n}\ndf = pd.DataFrame(data)\nsns.factorplot(y=\"coverage\", x=\"reports\", kind=\"bar\", data=df, label=\"Total\")\n",
        "\ny = 2 * np.random.rand(10)\nx = np.arange(10)\nax = sns.lineplot(x=x, y=y)\n# SOLUTION: Add a dashes line to the plot\n# SOLUTION: Start by defining the dashes line style\n# SOLUTION: Use the `set_style` method to set the dashes line style\n# SOLUTION: Use the `set_xlim` and `set_ylim` methods to set the x and y limits of the dashes line\n# SOLUTION: Use the `set_xlabel` and `set_ylabel` methods to set the x and y labels for the dashes line\n# SOLUTION: Use the `ax.set_title` method to set the title for the plot\n# SOLUTION: Add the dashes line to the plot\n# SOLUTION: Use the `ax.add_lines` method to add the dashes line to the plot\n# SOLUTION: Use the `ax.legend` method to add the dashes line to the plot's legend\n# SOLUTION: Set the plot limits and labels\n# SOLUTION: Set the x-axis limits to be the range of x values\n# SOLUTION: Set the y-axis limits to be the range of y values\n# SOLUTION: Set the x-axis labels to the x values\n# SOLUTION: Set the y-axis labels to the y values\n# SOLUTION: Add the plot title and axes labels\n# SOLUTION: Add the plot axes labels\n# SOLUTION: Add the plot title to the plot\n# SOLUTION: Set the plot font size and style\n# SOLUTION: Set the font size to be larger than the default\n# SOLUTION: Set the font style to be bold\n# SOLUTION: Set the plot line width and color\n# SOLUTION: Set the line width to be thicker than the default\n# SOLUTION: Set the line color to be a darker shade of the default color\n# SOLUTION: Set the plot line style\n# SOLUTION: Set the line style to be dotted\n# SOLUTION: Set the plot line font size and style\n# SOLUTION: Set the font size to be smaller than the default\n# SOLUTION: Set the font style to be lighter\n# SOLUTION: Set the plot line width and color\n# SOLUTION: Set the line width to be thicker than the default\n# SOLUTION: Set the line color to be a lighter shade of the default color\n# SOLUTION: Set the plot line style\n# SOLUTION: Set the line style to be solid\n# SOLUTION: Set the plot line font size and style\n# SOLUTION: Set the font size to be smaller than the default\n# SOLUTION: Set the font style to be lighter\n# SOLUTION: Set the plot line width and color\n# SOLUTION: Set the line width to be thicker than the default\n# SOLUTION: Set the line color to be a lighter shade of the default color\n# SOLUTION: Set the plot line style\n# SOLUTION: Set the line style to be dotted\n# SOLUTION: Set the plot line font size and style\n# SOLUTION: Set the font size to be smaller than the default\n# SOLUTION: Set the font style to be lighter\n# SOLUTION: Set the plot line width and color\n# SOLUTION: Set the line width to be thicker than the default\n# SOLUTION: Set the line color to be a lighter shade of the default color\n# SOLUTION: Set the plot line style\n# SOLUTION: Set the line style to be solid\n# SOLUTION: Set the plot line font size and style\n# SOLUTION: Set the font size to be smaller than the default\n# SOLUTION: Set the font style to be lighter\n# SOLUTION: Set the plot line width and color\n# SOLUTION: Set the line width to be thicker than the default\n# SOLUTION: Set the line color to be a lighter shade of the default color\n# SOLUTION: Set the plot line style\n# SOLUTION: Set the line style to be dotted\n# SOLUTION: Set the plot line font size and style\n# SOLUTION: Set the font size to be smaller than the default\n# SOLUTION: Set the font style to be lighter\n# SOLUTION: Set the plot line width and color\n# SOLUTION: Set the line width to be thicker than the default\n# SOLUTION: Set the line color to be a lighter shade of the default color\n# SOLUTION: Set",
        "\nx = np.linspace(0, 2 * np.pi, 400)\ny1 = np.sin(x)\ny2 = np.cos(x)\n# plot x vs y1 and x vs y2 in two subplots, sharing the x axis\n",
        "\n",
        "\nx = np.arange(10)\ny = np.sin(x)\ndf = pd.DataFrame({\"x\": x, \"y\": y})\nsns.lineplot(x=\"x\", y=\"y\", data=df)\n# remove x axis label\nsns.set_xlabel(\"x\")\nplt.show()",
        "\nx = np.arange(10)\ny = np.sin(x)\ndf = pd.DataFrame({\"x\": x, \"y\": y})\nsns.lineplot(x=\"x\", y=\"y\", data=df)\n# remove x tick labels\nplt.xticks(range(0, 10, 2), fontsize=8)\nplt.xlabel(\"x\", fontsize=8)\nplt.ylabel(\"y\", fontsize=8)\nplt.show()",
        "\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n# show xticks and vertical grid at x positions 3 and 4\n# SOLUTION\nxticks = np.arange(3, 5)\nplt.xticks(xticks, fontsize=8)\nplt.yticks(fontsize=8)\n# SOLUTION\n# show xticks and vertical grid at x positions 3 and 4\n",
        "\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n# show yticks and horizontal grid at y positions 3 and 4\n# SOLUTION\nticks = np.arange(3, 5)\nplt.xticks(ticks, labels=[\"3\", \"4\"])\nplt.yticks(ticks)\n# add grid lines\nplt.grid()\n# show x-axis label and tick marks\n# SOLUTION\nplt.xlabel(\"X axis label\")\nplt.ylabel(\"Y axis label\")\nplt.xticks(range(10), fontsize=14)\nplt.yticks(ticks, fontsize=14)\n# show seaborn plot\n# SOLUTION\nsns.scatterplot(x, y, color=\"blue\")\n",
        "\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n# show yticks and horizontal grid at y positions 3 and 4\n# show xticks and vertical grid at x positions 1 and 2\n",
        "\n",
        "\nx = 10 * np.random.randn(10)\ny = x\nplt.plot(x, y, label=\"x-y\")\n# put legend in the lower right\n# SOLUTION\nsns.scatterplot(x, y, color=\"blue\", marker=\"^\", s=300)\n",
        "\nfig, axes = plt.subplots(ncols=2, nrows=2, figsize=(8, 6))\naxes = axes.flatten()\nfor ax in axes:\n    ax.set_ylabel(r\"$\\ln\\left(\\frac{x_a-x_b}{x_a-x_c}\\right)$\")\n    ax.set_xlabel(r\"$\\ln\\left(\\frac{x_a-x_d}{x_a-x_e}\\right)$\")\nplt.show()\nplt.clf()\n",
        "\nx = np.arange(10)\ny = np.arange(10, 20)\nz = np.arange(10)\nplt.plot(x, y)\nplt.plot(x, z)\n# Give names to the lines in the above plot 'Y' and 'Z' and show them in a legend\n",
        "\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# Plot y over x\n# Label the x-axis as \"X\"\n# Set the space between the x-axis label and the x-axis to be 20\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# plot y over x\n# do not show xticks for the plot\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# Plot y over x\n# move the y axis tick labels to the right\n",
        "\n# Plot y over x and label y axis \"Y\"\n# Show y axis tick labels on the left and y axis label on the right\n",
        "\ntips = sns.load_dataset(\"tips\")\n# Make a seaborn joint regression plot (kind='reg') of 'total_bill' and 'tip' in the tips dataframe\n# change the line and scatter plot color to green but keep the distribution plot in blue\n",
        "\n",
        "\ntips = sns.load_dataset(\"tips\")\n# Make a seaborn joint regression plot (kind='reg') of 'total_bill' and 'tip' in the tips dataframe\n# do not use scatterplot for the joint plot\n",
        "\n",
        "\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# Plot y over x and label the x axis as \"X\"\n# Make both the x axis ticks and the axis label red\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# Plot y over x and label the x axis as \"X\"\n# Make the line of the x axis red\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# plot y over x with tick font size 10 and make the x tick labels vertical\n",
        "\nplt.plot([0.22058956, 0.33088437, 2.20589566], [0, 1, 2], 'ro-')\nplt.show()\n",
        "\n",
        "\n",
        "\n",
        "\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n]\n# make a seaborn scatter plot of bill_length_mm and bill_depth_mm\n# use markersize 30 for all data points in the scatter plot\n",
        "\na = [2.56422, 3.77284, 3.52623]\nb = [0.15, 0.3, 0.45]\nc = [58, 651, 393]\n# make scatter plot of a over b and annotate each data point with correspond numbers in c\n# SOLUTION\n# create a dataframe from the list of tuples\ndf = pd.DataFrame({'a': a, 'b': b, 'c': c})\n# plot the dataframe\nplt.scatter(df['a'], df['b'], s=300, color='blue')\n# add labels to the points\n# show the plot\nplt.show()\n",
        "\n# Plot y over x in a line chart and label the line \"y over x\"\n# Show legend of the plot and give the legend box a title\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# Plot y over x in a line chart and label the line \"y over x\"\n# Show legend of the plot and give the legend box a title  \"Legend\"\n# Bold the legend title\n",
        "\nx = np.random.rand(10)\ny = np.random.rand(10)\n# Make a histogram of x and show outline of each bar in the histogram\n# Make the outline of each bar has a line width of 1.2\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# Make two subplots. Make the first subplot three times wider than the second subplot but they should have the same height.\n# SOLUTION\n# SOLUTION\nsubplot1, subplot2, subplot3 = plt.subplots(nrows=3, ncols=1)\nsubplot1.plot(x, y)\nsubplot2.plot(x, y)\nsubplot3.plot(x, y)\n# Set the plot limits\nsubplot1.xlim(-0.5, 10.5)\nsubplot1.ylim(-0.5, 10.5)\nsubplot2.xlim(-0.5, 10.5)\nsubplot2.ylim(-0.5, 10.5)\nsubplot3.xlim(-0.5, 10.5)\nsubplot3.ylim(-0.5, 10.5)\n# Set the tick labels\nsubplot1.xlabel('X')\nsubplot1.ylabel('Y')\nsubplot2.xlabel('X')\nsubplot2.ylabel('Y')\nsubplot3.xlabel('X')\nsubplot3.ylabel('Y')\n# Set the font size\nsubplot1.fontsize(14)\nsubplot2.fontsize(14)\nsubplot3.fontsize(14)\n# Set the title\nsubplot1.title('First Subplot')\nsubplot2.title('Second Subplot')\nsubplot3.title('Third Subplot')\n# Set the plot limits and font size for the x-axis labels\nplt.xlim(-0.5, 10.5)\nplt.ylim(-0.5, 10.5)\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Plot')\n# Set the font size for the y-axis labels\nplt.xticks(range(-0.5, 10.5), fontsize=14)\nplt.yticks(range(-0.5, 10.5), fontsize=14)\n# Set the plot limits and font size for the tick labels\nplt.show()\n",
        "\n",
        "\nx = np.random.rand(10)\ny = np.random.rand(10)\n# Plot a grouped histogram of x and y on a single chart with matplotlib\n# Use grouped histogram so that the histogram don't overlap with each other\n# SOLUTION\n# Create a dataframe with the x and y values\ndf = pd.DataFrame({'x': x, 'y': y})\n# Create a bins object with the desired number of bins\n bins = np.linspace(0, 1, 10)\n# Create a hist object with the desired bins and plot it\nhist = df.hist( bins=bins, align='left', rwidth=0.8)\n# Add labels to the x-axis and y-axis\nplt.xlabel('x')\nplt.ylabel('y')\n# Add the plot to the figure\nplt.show()\n",
        "\n",
        "\n",
        "\n# Plot a\nplt.plot(x[:, 0], x[:, 1], 'ro')\nplt.xlabel('a')\nplt.ylabel('b')\nplt.title('Histogram of x')\n# Plot b\nplt.plot(x[:, 1], x[:, 0], 'ro')\nplt.xlabel('b')\nplt.ylabel('a')\nplt.title('Histogram of x')\n",
        "\nx = np.arange(10)\ny = np.arange(10)\nz = np.arange(10)\na = np.arange(10)\n# plot y over x and z over a in two different subplots\n# Set \"Y and Z\" as a main title above the two subplots\n",
        "\npoints = [(3, 5), (5, 10), (10, 150)]\n# plot a line plot for points in points.\n# Make the y-axis log scale\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# plot y over x\n# use font size 20 for title, font size 18 for xlabel and font size 16 for ylabel\n",
        "\n",
        "\nlines = [[(0, 1), (1, 1)], [(2, 3), (3, 3)], [(1, 2), (1, 3)]]\nc = np.array([(1, 0, 0, 1), (0, 1, 0, 1), (0, 0, 1, 1)])\n# Plot line segments according to the positions specified in lines\n# Use the colors specified in c to color each line segment\n",
        "\nx = np.arange(0, 1000, 50)\ny = np.arange(0, 1000, 50)\n# plot y over x on a log-log plot\n# mark the axes with numbers like 1, 10, 100. do not use scientific notation\n",
        "\n",
        "\n",
        "\n",
        "\nx = np.arange(10)\ny = np.arange(10)\na = np.arange(10)\nz = np.arange(10)\n# Plot y over x and a over z in two side-by-side subplots.\n# Label them \"y\" and \"a\" and make a single figure-level legend using the figlegend function\n",
        "\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n]\n# Make 2 subplots.\n# In the first subplot, plot a seaborn regression plot of \"bill_depth_mm\" over \"bill_length_mm\"\n# In the second subplot, plot a seaborn regression plot of \"flipper_length_mm\" over \"bill_length_mm\"\n# Do not share y axix for the subplots\n",
        "\nx = np.arange(10)\ny = np.arange(10)\nfig, ax = plt.subplots(1, 1)\nplt.xlim(1, 10)\nplt.xticks(range(1, 10))\nax.plot(y, x)\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# Plot y over x\n# Show legend and use the greek letter lambda as the legend label\n",
        "\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(y, x)\nplt.xticks(range(0, 10, 2))\n# Add extra tick labels to existing xticks\nfor i in range(2, 11):\n    plt.xticks(range(i, 10, 2))\n",
        "\nxticks = np.arange(0, len(x)-1, 2)\nplt.xticks(xticks, rotation='-60', ha='left')\n",
        "\nx = np.arange(2010, 2020)\ny = np.arange(10)\nplt.plot(x, y)\n# Rotate the yticklabels to -60 degree. Set the xticks vertical alignment to top.\n# SOLUTION\n",
        "\nx = np.arange(2010, 2020)\ny = np.arange(10)\nplt.plot(x, y)\n# Set the transparency of xtick labels to be 0.5\nplt.xticks(range(len(xticklabels)), xticklabels)\n",
        "\n",
        "\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# make a two columns and one row subplots. Plot y over x in each subplot.\n# Give the plot a global title \" Figure \"\n",
        "\nvalues = [[1, 2], [3, 4]]\ndf = pd.DataFrame(values, columns=[\"Type A\", \"Type B\"], index=[\"Index 1\", \"Index 2\"])\n# Plot values in df with line chart\n# label the x axis and y axis in this plot as \"X\" and \"Y\"\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# Make a scatter plot with x and y\n# Use vertical line hatch for the marker and make the hatch dense\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# Make a scatter plot with x and y and remove the edge of the marker\n# Use vertical line hatch for the marker\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# Make a scatter plot with x and y\n# Use star hatch for the marker\n",
        "\n",
        "\n# Plot a heatmap of data in the rectangle where right is 5, left is 1, bottom is 1, and top is 4.\n",
        "\n",
        "\n",
        "\n",
        "\nlabels = [\"a\", \"b\"]\nheight = [3, 4]\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar",
        "\n",
        "\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# Plot y over x\n# Turn minor ticks on and show gray dashed minor grid lines\n# Do not show any major grid lines\n",
        "\n",
        "\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# Plot y over x in a line chart but use transparent marker with non-transparent edge\n# SOLUTION\n# Create a transparent marker\ntransparent_color = 'rgba(0,0,0,0.5)';\nmarkers = [plt.Marker(x, y, color=transparent_color, label=' transparent marker')]\n# Add the markers to the plot\nplt.plot(x, y, markers=markers)\n# Set the plot limits and display the plot\nplt.xlim(-0.5, 10.5); plt.ylim(-0.5, 10.5); plt.axis('off'); plt.show()\n",
        "\n# Plot a vertical line at 55 with green color\n",
        "\n# Specify the values of blue bars (height)\nblue_bar = (23, 25, 17)\n# Specify the values of orange bars (height)\norange_bar = (19, 18, 14)\n# Plot the blue bar and the orange bar side-by-side in the same bar plot.\n# Make  sure the bars don't overlap with each other.\n",
        "\n# Plot z over a in the second subplot\nplt.plot(a, z)\n",
        "\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# plot y over x\n# use a tick interval of 1 on the a-axis\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\ndata = np.random.random((10, 10))\n# plot the 2d matrix data with a colorbar\n# SOLUTION\n# Create a figure and add a colorbar to it\nfig, ax = plt.subplots()\nax.imshow(data, aspect='auto', cmap='gray')\n# Set the limits of the colorbar\ncbar_min = 0\ncbar_max = 1\ncbar_range = np.linspace(cbar_min, cbar_max, 256)\n# Create a colorbar\ncbar = plt.colorbar(ax, cbar_range, label='Colormap')\n# Set the tick labels for the colorbar\ncbar.set_ticks(np.linspace(0, 1, 256))\n# Add labels to the tick labels\nfor i, j in zip(cbar.get_ticks(), data.shape):\n    cbar.set_label(f'{i:.2f} {j:.2f}')\n# Set the title of the figure\nplt.title('2D Matrix Data with a Colorbar')\n# Show the figure\nplt.show()\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# Plot y over x. Give the plot a title \" Figure 1\". bold the word \" Figure\" in the title but do not bold \"1\"\n",
        "\ndf = pd.DataFrame(\n    {\n        \"id\": [\"1\", \"2\", \"1\", \"2\", \"2\"],\n        \"x\": [123, 22, 356, 412, 54],\n        \"y\": [120, 12, 35, 41, 45],\n    }\n)\n# Use seaborn to make a pairplot of data in `df` using `x` for x_vars, `y` for y_vars, and `id` for hue\nsns.scatterplot(x=\"x\", y=\"y\", hue=\"id\", data=df)\n# Hide the legend in the output figure\nplt.legend()\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# Plot y over x and invert the x axis\n",
        "\nx = np.arange(11)\ny = np.arange(11)\nplt.xlim(0, 10)\nplt.ylim(0, 10)\n# Plot a scatter plot x over y and set both the x limit and y limit to be between 0 and 10\n# Turn off axis clipping so data points can go beyond the axes\n",
        "\n# Plot the data points to have red inside and have black border\n",
        "\n# plot y over x on a 2 by 2 subplots with a figure size of (15, 15)\n# repeat the plot in each subplot\nfor i in range(2):\n    for j in range(2):\n        plt.subplot(2, 2, i + j)\n        plt.plot(x[i], y[i], 'ro')\n        plt.plot(x[j], y[j], 'ro')\n        plt.show()\n",
        "\nx = np.random.rand(100) * 10\n# Make a histogram of x\n# Make the histogram range from 0 to 10\n# Make bar width 2 for each bar in the histogram and have 5 bars in total\n",
        "\n# Plot y over x and show the error according to `error`\nplt.plot(x, y, 'ro')\nplt.errorbar(x, y, yerr=error)\nplt.show()\n",
        "\nxvec = np.linspace(-5.0, 5.0, 100)\nx, y = np.meshgrid(xvec, xvec)\nz = -np.hypot(x, y)\nplt.contourf(x, y, z)\n# draw x=0 and y=0 axis in my contour plot with white color\n",
        "\n",
        "\nx = np.arange(10)\ny = np.arange(10)\nz = np.arange(10)\na = np.arange(10)\n# Plot y over x and z over a in two side-by-side subplots\n# Make \"Y\" the title of the first subplot and \"Z\" the title of the second subplot\n# Raise the title of the second subplot to be higher than the first one\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# make 4 by 4 subplots with a figure size (5,5)\n# in each subplot, plot y over x and show axis tick labels\n# give enough spacing between subplots so the tick labels don't overlap\n",
        "\n",
        "\n",
        "\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# Plot y over x in a line chart. Show x axis tick labels on both top and bottom of the figure.\n# SOLUTION\n# Create a Pandas DataFrame to store the data\ndf = pd.DataFrame({'x': x, 'y': y})\n# Add a column to the DataFrame to store the index of the data\ndf.index = range(len(df))\n# Plot the data using matplotlib\nplt.plot(df['x'], df['y'], 'ro-')\n# Add title and axes labels to the plot\nplt.title('Line Chart of y over x')\nplt.xlabel('x')\nplt.ylabel('y')\n# Set the plot limits to include the full range of data\nplt.xlim(-0.5, 10.5)\nplt.ylim(-0.5, 10.5)\n# Show the plot\nplt.show()\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# Plot y over x in a line chart. Show x axis tick labels but hide the x axis ticks\n# SOLUTION\n# Create a Pandas DataFrame to store the data\ndf = pd.DataFrame({'x': x, 'y': y})\n# Add a column to the DataFrame to store the index of the data points\ndf['index'] = np.arange(len(df))\n# Plot the data using matplotlib\nplt.plot(df['x'], df['y'], 'ro-')\n# Add labels to the x and y axes\nplt.xlabel('x')\nplt.ylabel('y')\n# Set the plot limits to only show the data points\nplt.axis('off')\n# Show the plot\nplt.show()\n",
        "\ndf = sns.load_dataset(\"exercise\")\n# Make catplots of scatter plots by using \"time\" as x, \"pulse\" as y, \"kind\" as hue, and \"diet\" as col\n# Change the subplots titles to \"Group: Fat\" and \"Group: No Fat\"\n",
        "\ndf = sns.load_dataset(\"exercise\")\n# Make catplots of scatter plots by using \"time\" as x, \"pulse\" as y, \"kind\" as hue, and \"diet\" as col\n# Change the xlabels to \"Exercise Time\" and \"Exercise Time\"\n",
        "\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# plot y over x with label \"y\"\n# make the legend fontsize 8\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# Plot y over x with figsize (5, 5) and dpi 300\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# Plot y over x with label \"y\" and show legend\n# Remove the border of frame of legend\n",
        "\n",
        "\ndf = sns.load_dataset(\"penguins\")[[\"bill_length_mm\", \"species\", \"sex\"]]\n# Make a stripplot for the data in df. Use \"sex\" as x, \"bill_length_mm\" as y, and \"species\" for the color\n# Remove the legend from the stripplot\nsns.stripplot(df, x=\"sex\", y=\"bill_length_mm\", color=\"species\")\n# Add title and axes labels to the plot\nplt.title(\"Penguin Sex and Bill Length by Species\")\nplt.xlabel(\"Sex\")\nplt.ylabel(\"Bill Length (mm)\")\n# Add a tick mark to the x-axis at each species value\nplt.xticks(range(df.shape[0]))\n# Add a tick mark to the y-axis at each species value\nplt.yticks(range(df.shape[1]))\n# Set the plot limits to include all data points\nplt.xlim(-0.5, 5.5)\nplt.ylim(-0.5, 5.5)\n# Set the plot aspect ratio to 1:1\nplt.axis('off')\n# Show the plot\nplt.show()\n",
        "\nsns.scatterplot(x=\"a\", y=\"c\", data=df)\nsns.show()\n",
        "\n# Plot the 3D scatter plot\n",
        "\nx = np.arange(10)\ny = np.arange(10)\n# Plot y over x in a line chart and name axis with labels (\"x\" and \"y\")\n",
        "\n"
    ],
    "Tensorflow": [
        "\nresult = x + 1\n",
        "\nresult = x + 1\n",
        "\n",
        "\nimport tensorflow as tf\nlabels = [0, 6, 5, 4, 2]\nresult = tf.keras.layers.Dense(10, activation='sigmoid', input_shape=(len(labels),))(labels)\nprint(result)\n",
        "\n",
        "\n    ",
        "\n",
        "\ndef my_map_func(i):\n  return [i, i+1, i+2]\nds = tf.data.Dataset.from_tensor_slices(input)\nds =ds.map(map_func=lambda input: my_map_func(input))\nelement = tf.compat.v1.data.make_one_shot_iterator(ds).get_next()\nresult = []\nwith tf.compat.v1.Session() as session:\n  for _ in range(9):\n    result.append(session.run(element))\nprint(result)\n",
        "\nimport tensorflow as tf\ntf.compat.v1.disable_eager_execution()\nexample_input = [10, 20, 30]\nresult = []\nwith tf.compat.v1.Session() as session:\n  for _ in range(9):\n    result.append(session.run(f(example_input)))\nprint(result)\n",
        "\nzero_padding = [1, 1, 1, 1, 0, 0, 0, 0]\nresult = [tf.pad(x, zero_padding) for x in lengths]\n",
        "\nzero_mask = tf.zeros((8,), dtype=tf.int32)\nzero_mask[0:lengths[0]] = 1\nzero_mask[lengths[0]:lengths[1]] = 0\nzero_mask[lengths[1]:lengths[2]] = 0\nzero_mask[lengths[2]:lengths[3]] = 0\nzero_mask[lengths[3]:lengths[4]] = 1\nzero_mask[lengths[4]:lengths[5]] = 0\nzero_mask[lengths[5]:lengths[6]] = 0\nzero_mask[lengths[6]:lengths[7]] = 1\n",
        "\nresult = [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0]\n",
        "\n    result = [1, 1, 1, 1, 0, 0, 0, 0]\n    ",
        "\nzero_padding = [1, 1, 1, 0, 0, 0, 0]\nresult = tf.pad(tf.ones(8), zero_padding)\n",
        "\n",
        "\n    ",
        "\nresult = a.reshape((50, 100, 512))\n",
        "\na = a.reshape((50, 100, 1, 512))\n",
        "\nresult = a.reshape((1, 50, 100, 1, 512))\n",
        "\nimport tensorflow as tf\nimport numpy as np\nnp.random.seed(10)\nA = tf.constant(np.random.randint(100,size=(5, 3)))\nresult = np.sum(A, axis=1)\n### output your answer to the variable 'result'\nprint(result)\n",
        "\n",
        "\nresult = 1 / (A + 1e-16)\n",
        "\nresult = (tf.sub(a, b))\n",
        "\nresult = (tf.square(tf.sub(a, b))) + tf.reduce_sum(a)\n",
        "\n    ",
        "\nm = x[y,z]\n",
        "\nm = x[[row,col]]\n",
        "\n    ",
        "\nC = np.dot(A, B)\n",
        "\nC = np.dot(A, B)\n",
        "\n# [Missing Code]\n",
        "\n    ",
        "\n",
        "\n",
        "\n    ",
        "\nA = tf.random.normal([100,100])\nB = tf.random.normal([100,100])\nwith tf.Session() as session:\n    result = session.run(tf.reduce_sum(tf.matmul(A,B)))\n    print(result)\n",
        "\n# ",
        "\n# ",
        "\n    ",
        "\n",
        "\n",
        "\nimport tensorflow as tf\nseed_x = 10\n### return the tensor as variable 'result'\nresult = tf.random.uniform(low=1, high=4, seed=seed_x)\nprint(result)\n",
        "\nimport tensorflow as tf\nseed_x = 10\n### return the tensor as variable 'result'\nresult = tf.random.uniform(low=2, high=5, seed=seed_x)\nprint(result)\n",
        "\nimport tensorflow as tf\ndef f(seed_x=10):\n    # Seed the random number generator\n    tf.random.seed(seed_x)\n    # Generate 10 random integers from a uniform distribution in {1, 2, 3, 4}\n    result = [tf.random.uniform(low=1, high=4) for _ in range(10)]\n    # Return the generated integers\n    return result\n",
        "\nimport tensorflow as tf\n### output the version of tensorflow into variable 'result'\nresult = tf.version.version\nprint(result)\n"
    ],
    "Scipy": [
        "\nA = polyfit(x, y, 2)\nB = polyfit(x, y, 3)\n",
        "\nA = polyfit(x, y, 2)\nB = polyfit(x, y, 3)\n",
        "\nA = 4\nB = 0.1\nC = 1\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nz_scores = scipy.stats.zscore(p_values)\n",
        "\n# mu = mu\n",
        "\n",
        "\nsp.sparse.csr_matrix(sa) * sp.sparse.csr_matrix(sb)\n",
        "\n    ",
        "\n",
        "\n",
        "\nrotated_image = rotate(data_orig, angle)\n",
        "\n# diagonal = np.diagonal(M)\n",
        "\n",
        "\n    ",
        "\n",
        "\n",
        "\n",
        "\nc1 = c1.todense()\nc2 = c2.todense()\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n    # [Begin of Code]\n    ",
        "\n",
        "\nM= np.transpose(M)\n",
        "\n    ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# median = np.median(arr)\n# mode = np.mode(arr)\n",
        "\n",
        "\n",
        "\n",
        "\n    # [Missing Code]\n    ",
        "\n# [Begin of B-spline code]\nx_spline = np.linspace(x[0, :], x[-1, :], 100)\ny_spline = np.linspace(y[0, :], y[-1, :], 100)\n# [End of B-spline code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nfrom scipy import sparse\nsa = sparse.random(10, 10, density = 0.01, format = 'lil')\nresult = True\n",
        "\n# ",
        "\np_value = stats.ranksums(pre_course_scores, during_course_scores)\n",
        "\n    ",
        "\n# kurtosis = np.sum(np.power(a, 4)) / (np.power(a, 2) * np.power(a, 3))\n",
        "\n# kurtosis = (a**3).sum() / (a**3).sum(axis=1)\n",
        "\n",
        "\n    ",
        "\n# extraPoints = [[0.5,0.2], [3, 0], [4,0],[5,0], [4,3]]\n",
        "\n# extraPoints = [[0.5,0.2], [3, 0], [4,0],[5,0], [4,3]]\n",
        "\n# sparse.csr_matrix((vectors, (0, 1)), shape=(3, 100))\n",
        "\n# ",
        "\nresult = M[row, column]\n",
        "\nresult = M[row, column]\n",
        "\ninterp1d(x, array[:, :, :], axis=1)\n",
        "\n",
        "\n    ",
        "\nresult = np.dctmtx(N)\n",
        "\n# ",
        "\nM = np.zeros((N+1, N+1))\nfor i in range(N+1):\n   for j in range(i+1):\n      M[i,j] = choose(i, j) * p**j * (1-p)**(i-j)\n",
        "\nresult = stats.zscore(df['sample1'], df['sample2'], df['sample3'])\n",
        "\nresult = stats.zscore(df['sample1'], df['sample2'], df['sample3'])\n",
        "\n",
        "\n",
        "\n# alpha = 1.0\n",
        "\n",
        "\n",
        "\n    ",
        "\nx = scipy.ndimage.resample(x, shape, order=1)\n",
        "\n",
        "\nx1 = np.linspace(x0[0], x0[1], 5)\nx2 = np.linspace(x0[2], x0[3], 5)\nx3 = np.linspace(x0[4], x0[5], 5)\nx = np.vstack((x1, x2, x3))\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nresult = sa +sb\n",
        "\nresult = sa +sb\n",
        "\n",
        "\n    ",
        "\nV += x\n",
        "\nV += x\n",
        "\nV += x\n",
        "\n",
        "\n",
        "\n# ",
        "\n# ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nimport numpy as np\nfrom scipy.optimize import fsolve\ndef equation(x, a, b):\n    return x + 2*a - b**2\nxdata = np.arange(4)+3\nadata = np.random.randint(0, 10, (4,))\nresult = fsolve(equation, x0=0.5, args=(a,b))\nprint(result)\n",
        "\n",
        "\n",
        "\n",
        "\nresult = scipy.interpolate.griddata(x, y, eval)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\ndf = df[df['NUM1'] < 3]\n"
    ],
    "Sklearn": [
        "\n",
        "\n",
        "\n",
        "\n    # Convert the data from a Scikit-learn Bunch object to a Pandas DataFrame\n    df = pd.DataFrame(data)\n    ",
        "\n# Create a new column with the one-hot-encoded values\ndf['one_hot_encoded'] = df['Col3'].apply(lambda x: np.bincount(x, minlength=1)[1:])\n",
        "\n# Create a dictionary to store the unique names\nunique_names = {}\n# Iterate over the rows of the dataframe\nfor index, row in df.iterrows():\n    # Extract the name from the row\n    name = row[\"Col1\"]\n    # Check if the name is already in the dictionary\n    if name in unique_names:\n        # Increment the count of the occurrences of the name\n        unique_names[name] += 1\n    else:\n        # Add the name to the dictionary and increment the count\n        unique_names[name] = 1\n",
        "\n# Create a new column with the one-hot-encoded values\ndf['one_hot_encoded'] = df['Col4'].apply(lambda x: np.bincount(x, minlength=1)[1:])\n",
        "\n# Create a new column with the one-hot-encoded values\ndf['one_hot_encoded'] = df['Col3'].apply(lambda x: np.bincount(x, minlength=1)[1:])\n",
        "\n# Create a new column with the one-hot-encoded values\ndf['one_hot_encoded'] = df['Col3'].apply(lambda x: np.bincount(x, minlength=1)[0])\n",
        "\n",
        "\n",
        "\n# merge the sparse matrix with the dataframe\ndf = pd.concat([df_origin, transform_output], axis=1)\n",
        "\n# Merge the csr_matrix with the other columns of the dataframe\ndf_merged = pd.concat([df_origin, transform_output], axis=1)\n",
        "\n    ",
        "\n",
        "\n",
        "\nsteps = clf.named_steps\n",
        "\n",
        "\n",
        "\nsteps = clf.named_steps\n",
        "\n",
        "\n",
        "\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold\nX, y = load_data()\nassert type(X) == np.ndarray\nassert type(y) == np.ndarray\ncv = StratifiedKFold(5).split(X, y)\nlogreg = LogisticRegression()\nproba = logreg.predict_proba(X)\nprint(proba)\n",
        "\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold\nX, y = load_data()\nassert type(X) == np.ndarray\nassert type(y) == np.ndarray\ncv = StratifiedKFold(5).split(X, y)\nlogreg = LogisticRegression()\nproba = logreg.fit(X, y).predict_proba(cv)\nprint(proba)\n",
        "\n",
        "\n    ",
        "\nmodel_name = model.fit(X, y).__name__\n",
        "\nmodel.fit(X, y)\n",
        "\nmodel_name = model.name\n",
        "\n",
        "\n",
        "\n",
        "\n# ",
        "\n",
        "\n",
        "\npreprocessor = preprocess\n",
        "\nprePro = lambda x: x.lower()\n",
        "\n",
        "\n",
        "\ncoef = grid.best_params[\"model__alpha\"]\n",
        "\ncoef = grid.best_params[\"model__alpha\"]\n",
        "\nimport pandas as pd\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.feature_selection import SelectFromModel\nimport numpy as np\nX, y = load_data()\nclf = ExtraTreesClassifier(random_state=42)\nclf = clf.fit(X, y)\nprint(column_names)\n",
        "\n",
        "\nimport pandas as pd\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.feature_selection import SelectFromModel\nimport numpy as np\nX, y = load_data()\nclf = ExtraTreesClassifier(random_state=42)\nclf = clf.fit(X, y)\nprint(column_names)\n",
        "\n",
        "\nkm.fit(X)\n",
        "\nkm.fit(X)\n",
        "\nkm.fit(X)\n",
        "\n    ",
        "\n# ",
        "\n# OneHotEncoder(sparse=False)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# cosine_similarities_of_queries = np.zeros((3, 5))\n",
        "\n# cosine_similarities_of_queries = np.zeros((len(queries), len(documents)))\n# for i in range(len(queries)):\n#     for j in range(len(documents)):\n#         cosine_similarities_of_queries[i, j] = np.dot(tfidf[queries[i]], documents[j])\n# print(cosine_similarities_of_queries)\n",
        "\n    ",
        "\n# Convert features to 2D array\nnew_features = np.array(features)\n",
        "\n# Convert the features to a 2D-array\nnew_f = np.array(f)\n",
        "\n# Convert the features to a 2D-array\nnew_features = np.array(features)\n",
        "\n    # Convert each feature to a one-hot encoding\n    one_hot_encodings = [np.eye(len(feature)) for feature in features]\n    ",
        "\n# Convert the features to a 2D-array\nnew_features = np.array(features)\n",
        "\n",
        "\n",
        "\n",
        "\n# Hierarchical clustering using scipy.cluster.hierarchy\n# prefer answer in a list like [label1, label2, ...]\nclusters = hierarchy.fit(data_matrix)\n",
        "\n",
        "\n",
        "\n# [Begin of Code]\n# Scaling the data\nscaler = sklearn.preprocessing.scale.Scaler()\nscaler.fit(data)\ndata = scaler.transform(data)\n# [End of Code]\n",
        "\n# Scaling data\nscaler = sklearn.preprocessing.scale.Scaler()\nscaled_data = scaler.fit_transform(data)\n",
        "\n# [Begin of Code]\n",
        "\ndata = data.apply(lambda x: x ** (1 / 3))\n",
        "\nimport numpy as np\nimport pandas as pd\nimport sklearn\ndata = load_data()\nassert type(data) == np.ndarray\nyeo_johnson_data = sklearn.preprocessing. Yeo-Johnson.fit_transform(data)\nprint(yeo_johnson_data)\n",
        "\n# [Begin of Code]\n",
        "\n",
        "\nx_train, y_train = dataset.drop(columns=['target'])\nx_test, y_test = dataset.drop(columns=['target'])\n",
        "\nx_train, y_train = data.iloc[:80, :].T, data.iloc[:80, -1].T\nx_test, y_test = data.iloc[80:, :].T, data.iloc[80:, -1].T\nprint(x_train)\nprint(y_train)\nprint(x_test)\nprint(y_test)\n",
        "\nimport numpy as np\nimport pandas as pd\n# Load the data\ndataset = pd.read_csv('example.csv', header=None, sep=',')\n# Create a random state for the data\nrandom_state = 42\n# Split the data into training and testing sets\nx_train, x_test, y_train, y_test = train_test_split(dataset, random_state=random_state)\n",
        "\n    ",
        "\nfrom sklearn.cluster import KMeans\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndf = pd.read_csv(\"generate_csv/all_data_device.csv\", parse_dates=[\"date\"])\nf1 = df['mse'].values\n# generate another list\nf2 = list(range(0, len(f1)))\nX = np.array(list(zip(f1, f2)))\nkmeans = KMeans(n_clusters=2).fit(X)\nlabels = kmeans.predict(X)\n# Centroid values\ncentroids = kmeans.cluster_centers_\n#print(centroids)\nfig = plt.figure()\nax = Axes3D(fig)\nax.scatter(X[:, 0], X[:, 1], c=labels)\nax.scatter(centroids[:, 0], centroids[:, 1], marker='*', c='#050505', s=1000)\nplt.title('K Mean Classification')\nplt.show()\n",
        "\nfrom sklearn.cluster import KMeans\nimport numpy as np\nimport pandas as pd\ndf = pd.read_csv(\"file.csv\", parse_dates=[\"date\"])\nf1 = df['mse'].values\nf2 = list(range(0, len(f1)))\nX = np.array(list(zip(f1, f2)))\nkmeans = KMeans(n_clusters=2).fit(X)\nlabels = kmeans.predict(X)\ncentroids = kmeans.cluster_centers_\nprint(labels)\n",
        "\n",
        "\n",
        "\n    ",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndf = pd.read_csv('titanic.csv')\ndf['Sex'] = LabelEncoder.fit_transform(df['Sex'])\ndf['Sex'] = df['Sex'].map(lambda x: 1 if x == 'male' else 0)\nprint(df)\n",
        "\n",
        "\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndf = pd.read_csv('titanic.csv')\ndf['Sex'] = LabelEncoder.fit_transform(df['Sex'])\ndf['Sex'] = df['Sex'].map(lambda x: 1 if x == 'male' else 0)\nprint(df)\n",
        "\n",
        "\nmin_max_scaler = MinMaxScaler()\nmin_max_scaler.fit(np_array)\n",
        "\nmin_max_scaler = MinMaxScaler()\nmin_max_scaler.fit(np_array)\n",
        "\n    # Normalize the entire np array all together\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    new_a = scaler.fit_transform(a)\n    ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nX = dataframe.iloc[-1:].astype(float)\ny = dataframe.iloc[:,-1]\n",
        "\nX = dataframe.iloc[-1:].astype(float)\ny = dataframe.iloc[:,-1]\nlogReg = LogisticRegression()\nlogReg.fit(X[:None],y)\n",
        "\ntrain_size = 0.2\ntrain_dataframe, test_dataframe = cross_validation.train_test_split(features_dataframe, train_size=train_size)\ntrain_dataframe = train_dataframe.sort([\"date\"])\ntest_dataframe = test_dataframe.sort([\"date\"])\nprint(train_dataframe)\nprint(test_dataframe)\n",
        "\ntrain_size = 0.8\ntrain_dataframe, test_dataframe = cross_validation.train_test_split(features_dataframe, train_size=train_size)\ntrain_dataframe = train_dataframe.sort([\"date\"])\ntest_dataframe = test_dataframe.sort([\"date\"])\n",
        "\n    # Create a list of unique dates\n    unique_dates = set(features_dataframe[\"date\"])\n    ",
        "\ndf['X2_scale'] = scaler.fit_transform(df['X2'])\ndf['X3_scale'] = scaler.fit_transform(df['X3'])\nprint(df)\n",
        "\n# ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# model = IsolationForest(n_estimators=500, min_samples_leaf=1, max_features=1, random_state=0)\n",
        "\n"
    ],
    "Pytorch": [
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n    # Load the pre-trained word2vec embedding\n    word2vec.load_model(\"word2vec.model\")\n    ",
        "\n",
        "\npx = pd.DataFrame(x)\n",
        "\n",
        "\nC = B[A_log]\n",
        "\nimport numpy as np\nimport pandas as pd\nimport torch\nA_logical, B = load_data()\nC = B[A_logical]\nprint(C)\n",
        "\nC = B[:, np.where(A_log == 1, 1, 0)]\n",
        "\n# ",
        "\n    ",
        "\nC = B[A_log]\n",
        "\n",
        "\nx_tensor = torch.from_numpy(x_array)\n",
        "\nx_tensor = torch.from_numpy(x_array)\n",
        "\n    # Convert the numpy array a to a torch tensor t\n    ",
        "\nimport numpy as np\nimport pandas as pd\nimport torch\n# Load the data\nlens = load_data()\n# Create the masks\nmask = np.zeros((len(lens), len(lens)), dtype=torch.long)\nfor i in range(len(lens)):\n    for j in range(len(lens)):\n        if lens[i] == lens[j]:\n            mask[i, j] = 1\n# Print the masks\nprint(mask)\n",
        "\nimport numpy as np\nimport pandas as pd\nimport torch\n# Load the data\nlens = load_data()\n# Create the masks\nmask = np.zeros((len(lens), len(lens)), dtype=torch.long)\nfor i in range(len(lens)):\n    for j in range(len(lens)):\n        if lens[i] == lens[j]:\n            mask[i, j] = 1\n        else:\n            mask[i, j] = 0\n# Print the masks\nprint(mask)\n",
        "\nimport numpy as np\nimport pandas as pd\nimport torch\n# Load the data\nlens = load_data()\n# Create the masks\nmask = np.zeros((len(lens), len(lens)), dtype=torch.long)\nfor i in range(len(lens)):\n    for j in range(len(lens)):\n        if lens[i] == lens[j]:\n            mask[i, j] = 1\n# Convert the masks to torch.LongTensors\nmask = torch.LongTensor(mask)\n",
        "\nimport numpy as np\nimport pandas as pd\nimport torch\ndef load_data():\n    # Load data from a CSV file\n    df = pd.read_csv('data.csv')\n    \n    # Convert the sentence lengths to integers\n    lens = df['length'].astype(int)\n    \n    # Create a mask of the sentence lengths\n    mask = np.zeros((len(lens), len(lens)), dtype=np.bool)\n    for i in range(len(lens)):\n        for j in range(len(lens)):\n            if lens[i] == lens[j]:\n                mask[i, j] = True\n    \n    # Return the mask\n    return lens, mask\n# Load the data\nlens, mask = load_data()\n# Print the mask\nprint(mask)\n",
        "\n",
        "\n    ",
        "\n",
        "\n",
        "\n    ",
        "\na[ : , lengths : , : ] = 0\n",
        "\n",
        "\na[ : , : lengths , : ] = 0\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n    ",
        "\n    ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n    ",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# signed_min = np.zeros((x.shape[0], y.shape[0]))\n# for i in range(x.shape[0]):\n#     for j in range(y.shape[0]):\n#         if np.abs(x[i]) < np.abs(y[j]):\n#             signed_min[i, j] = 1\n# else:\n#     signed_min[i, j] = -1\n",
        "\n# signed_max = torch.max(torch.abs(x), torch.abs(y))\n",
        "\n    ",
        "\n",
        "\n",
        "\n    ",
        "\nresult = torch.zeros((1,4,2))\nfor i in range(8):\n    result[0,i,i] = t[i]\n",
        "\nresult = torch.stack([t, torch.zeros((1, 2, 2))])\n",
        "\n",
        "\n"
    ]
}