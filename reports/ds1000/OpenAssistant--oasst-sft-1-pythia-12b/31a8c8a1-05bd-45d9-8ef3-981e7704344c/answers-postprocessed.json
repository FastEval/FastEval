{
    "Pandas": [
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nimport pandas as pd\n\ndf = pd.DataFrame({'name': ['A', 'A', 'B', 'C', 'B', 'A'],\n                   'v1': ['A1', 'A2', 'B1', 'C1', 'B2', 'A2'],\n                   'v2': ['A11', 'A12', 'B12', 'C11', 'B21', 'A21'],\n                   'v3': [1, 2, 3, 4, 5, 6]})\n\nresult = {}\nfor i, row in df.iterrows():\n    result[row['name']] = {\n        'v1': row['v1'],\n        'v2': row['v2'],\n        'v3': row['v3']\n    }\nprint(result)\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nmonth = df['Date'].dt.month\nyear = df['Date'].dt.year\n",
        "\nmonth = df['Date'].dt.month\nyear = df['Date'].dt.year\nday = df['Date'].dt.day\n",
        "\n",
        "\n",
        "\n",
        "\n# Shift the first row of the first column (11.6985) down 1 row, and then the last row of the first column (72.4399) would be shifted to the first row, first column.\n",
        "\n# Shift the first row of the first column (11.6985) down 1 row\ndf.iloc[0, 0] = df.iloc[0, 0] - 1\n# Shift the last row of the first column (72.4399) to the first row, first column\ndf.iloc[0, 0] = df.iloc[0, 0] + 1\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nimport pandas as pd\n\ndf = pd.DataFrame({'lab':['A', 'B', 'C', 'D', 'E', 'F'], 'value':[50, 35, 8, 5, 1, 1]})\ndf = df.set_index('lab')\nthresh = 6\nresult = df.loc[df['value'] < thresh].sum()\nprint(result)\n",
        "\nimport pandas as pd\n\ndf = pd.DataFrame({'lab':['A', 'B', 'C', 'D', 'E', 'F'], 'value':[50, 35, 8, 5, 1, 1]})\ndf = df.set_index('lab')\nthresh = 6\nresult = df.loc[df['value'] < thresh].sum()\nprint(result)\n",
        "\nimport pandas as pd\n\ndf = pd.DataFrame({'lab':['A', 'B', 'C', 'D', 'E', 'F'], 'value':[50, 35, 8, 5, 1, 1]})\ndf = df.set_index('lab')\nsection_left = 4\nsection_right = 38\nresult = df.query(\"value not in (section_left, section_right)\")\nprint(result)\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n    # Iterate over rows\n    for index, row in df.iterrows():\n        # Check if each value is integer\n        if not all(isinstance(x, int) for x in row[\"Field1\"]):\n            # Create list with error values\n            error_values = [x for x in row[\"Field1\"] if not x.is_ integer()]\n            df[\"Field1\"] = error_values\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\nimport pandas as pd\n\ndf=pd.DataFrame({\"Category\":['Foo','Bar','Cho'],'Index':[1,2,3]})\nfilter_list=['Foo']\nresult=df.query(\"Catergory\"==filter_list)\nprint(result)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n",
        "",
        "\nimport pandas as pd\n\ndf = pd.DataFrame({'Survived': [0,1,1,1,0],\n                   'SibSp': [1,1,0,1,0],\n                   'Parch': [0,0,0,0,1]})\n\n# Create two new groups based on the conditions\ngrouped = df.groupby(['SibSp', 'Parch'])\n\n# Take the means of both groups\nresult = grouped.mean()\n\n# Print the result\nprint(result)\n",
        "\n# [Missing Code]\n",
        "\nimport pandas as pd\n\ndf = pd.DataFrame({'Survived': [0,1,1,1,0],\n                   'SibSp': [1,1,0,1,0],\n                   'Parch': [0,0,0,0,1]})\n\n# Create two new groups based on the conditions\ngrouped = df.groupby(['SibSp', 'Parch'])\n\n# Take the means of both of these groups and end up with an output like this\n# Has Family    1.0\n# New Family    0.0\n# No Family     1.0\n# Old Family    0.5\n# Name: Survived, dtype: float64\n\nresult = grouped.mean()\nprint(result)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nzero = 0\nnon_zero = df['B'] + df['C']\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n# Create a list of tuples from the two dataframes\nresult = [ [(a.loc[i], b.loc[i]) for i in range(a.shape[0])] ]\n",
        "\n",
        "\n",
        "\nimport pandas as pd\n\ndf = pd.DataFrame({'username': ['john', 'john', 'john', 'john', 'jane', 'jane', 'jane', 'jane'],\n                   'post_id': [1, 2, 3, 4, 7, 8, 9, 10],\n                   'views': [3, 23, 44, 82, 5, 25,46, 56]})\nbins = [1, 10, 25, 50, 100]\nresult = df.groupby(pd.cut(df.views, bins)).size()\nprint(result)\n",
        "\nimport pandas as pd\n\ndf = pd.DataFrame({'username': ['john', 'john', 'john', 'john', 'jane', 'jane', 'jane', 'jane'],\n                   'post_id': [1, 2, 3, 4, 7, 8, 9, 10],\n                   'views': [3, 23, 44, 82, 5, 25,46, 56]})\nbins = [1, 10, 25, 50, 100]\nresult = []\nfor i, bin in enumerate(bins):\n    group = df.groupby(pd.cut(df.views, bin))\n    result.append(group.username.count())\nprint(result)\n",
        "\nimport pandas as pd\n\ndf = pd.DataFrame({'username': ['tom', 'tom', 'tom', 'tom', 'jack', 'jack', 'jack', 'jack'],\n                   'post_id': [10, 8, 7, 6, 5, 4, 3, 2],\n                   'views': [3, 23, 44, 82, 5, 25,46, 56]})\nbins = [1, 10, 25, 50, 100]\nresult = df.groupby(pd.cut(df.views, bins)).username.count()\nprint(result)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# Merge two dataframes\nresult = pd.merge(C, D, on='A', how='outer')\n\n",
        "\n# Merge two dataframes on column A\nresult = pd.merge(C, D, on='A')\n\n",
        "\n# Merge two dataframes on column A\nresult = pd.merge(C, D, on='A', how='outer')\n\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# Create a dataframe from the series\nresult = pd.DataFrame({'name': series.index, '0': series.values[0], '1': series.values[1], '2': series.values[2], '3': series.values[3]})\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# Create a new column called frequent\ndf['frequent'] = np.where(df['bit1'] == 1, 1, 0)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nimport pandas as pd\n\ndf_a = pd.DataFrame({'EntityNum':[1001.01,1002.02,1003.03],'foo':[100,50,200]})\ndf_b = pd.DataFrame({'EntityNum':[1001.01,1002.02,1003.03],'a_col':['alice', 'bob', '777'],'b_col':[7,8,9]})\n\nresult = pd.merge(df_a, df_b, on='EntityNumber')\n",
        "\n"
    ],
    "Numpy": [
        "\n# [Missing Code]\n",
        "\n",
        "\n# Replace nan values from my array with np.inf.\nx[np.isnan(x)] = np.inf\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nB = np.zeros((ncol,A.shape[0]))\n",
        "\nB = np.zeros((nrow, nrow))\n",
        "\nB = np.zeros((ncol,A.shape[0]))\n",
        "\nB = np.zeros((ncol,A.shape[0]))\n",
        "\nresult = np.roll(a, shift)\n",
        "\n",
        "\n",
        "\n",
        "\n# largest_value = np.max(a)\n",
        "\n",
        "\n# largest_value = np.max(a)\n# largest_index = np.unravel_index(largest_value)\n",
        "\n# largest_value = np.max(a)\n# largest_index = np.unravel_index(largest_value)\n",
        "\n    # largest_value = np.max(a)\n    # largest_index = np.where(a == largest_value)[0][0]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nmin_row, min_col = np.min(a)\n",
        "\n# maximum = np.max(a)\n",
        "\nmin_row, min_col = np.where(a == np.min(a))\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\nA = np.pad(A, (length-1), 'zero')\n",
        "\nA = np.pad(A, (length-1, 0), 'constant', 0)\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n",
        "\nresult = (a + b) / 2\n",
        "\nresult = np.max(a, b, c)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# for row in range(r):\n    for col in range(c):\n        self.cells[row, col] = X[row, col]\n",
        "\n",
        "\n# for i in range(len(X)):\n#     result.append(X[i, :])\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nimport numpy as np\nimport scipy.stats\na = np.random.randn(40)\nb = 4*np.random.randn(50)\np_value = scipy.stats.t.test(a, b, equal_var=True)\nprint(p_value)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n#",
        "\n#",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\na[pos] = element\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\na_np = np.array(a)\n",
        "\n",
        "\na_np = np.array(a)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nimport numpy as np\nA = np.arange(16).reshape(4, 4)\nn = 5\nresult = np.power(A, n)\n",
        "\nimport numpy as np\na = np.array([[1,5,9,13],\n              [2,6,10,14],\n              [3,7,11,15],\n              [4,8,12,16]])\npatches = []\nfor i in range(a.shape[0]):\n    for j in range(a.shape[1]):\n        patches.append([[a[i][j], a[i][j+1]], [a[i+1][j], a[i+1][j+1]]])\nprint(patches)\n",
        "\npatches = np.zeros((3, 2, 2))\npatches[0, 0, :] = a[0, :, :]\npatches[1, 0, :] = a[1, :, :]\npatches[0, 1, :] = a[0, :, 1:]\npatches[1, 1, :] = a[1, :, 1:]\npatches[0, :, :] = a[0, :, :]\npatches[1, :, :] = a[1, :, :]\npatches = patches.T\n",
        "\nimport numpy as np\na = np.array([[1,5,9,13],\n              [2,6,10,14],\n              [3,7,11,15],\n              [4,8,12,16]])\npatches = []\nfor i in range(a.shape[0]):\n    for j in range(a.shape[1]):\n        patches.append([[a[i][j], a[i][j+1]], [a[i+1][j], a[i+1][j+1]]])\nprint(patches)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nB = a * A + b * B\n",
        "\nB = a * A + b * B + c * B\n",
        "\n# Initialize an empty numpy array, with shape = (0,).\nresult = np.zeros((0,))\n",
        "\n# Initialize an empty numpy array, with shape = (3,0)\nresult = np.zeros((3,0))\n",
        "\n",
        "\n",
        "\nvalues = np.zeros((2,3), dtype='int32,float32')\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nz = []\nfor i in range(len(x)):\n    for j in range(len(y)):\n        z.append(elementwise_function(x[i], y[j]))\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nbin_data = [(4, 2), (5, 6), (3, 5)]\nbin_data_mean = [3.67, 4, 4.5]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n# Convert the integers to binary strings of length m\nbinary_strings = [str(i) for i in range(a.shape[0])]\n",
        "\n# Convert the integers to binary numpy arrays of length m\nbinary_numbers = [bin(i) for i in a]\n",
        "\n# Convert the integers to binary numpy arrays of length m\nbinary_numbers = [bin(i) for i in a]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nimport numpy as np\nDataArray = np.arange(-5.5, 10.5)\npercentile = 50\nmasked_data = ma.masked_where(DataArray < 0, DataArray)\nprint(np.percentile(masked_data, percentile))\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# calculate the pearson correlation coefficient\npearson_coeff = np.corrcoef(post, distance)[0, 1]\n",
        "\n# Create a 3 dimensional N x M x M array consisting of M x M matrices xi.dot(xi.T)\nM = X.shape[0]\nN = X.shape[1]\nMxM = M * M\nresult = np.zeros((MxM, N, N))\nfor i in range(M):\n    for j in range(N):\n        for k in range(M):\n            result[i, j, k] = X[i, j] * X[k, j].dot(X[i, k].T)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nrankdata(a)[::-1]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# distance = np.zeros((dim, dim))\n# for i in range(dim):\n#     for j in range(dim):\n#         distance[i, j] = np.sum((a[i] - a[j])**2)\n# print(distance)\n",
        "\nimport numpy as np\nA = ['33.33', '33.33', '33.33', '33.37']\nNA = np.asarray(A)\nAVG = np.mean(NA, axis=0)\nprint(AVG)\n",
        "\nimport numpy as np\nA = ['inf', '33.33', '33.33', '33.37']\nNA = np.asarray(A)\nAVG = np.mean(NA, axis=0)\nprint(AVG)\n",
        "\nimport numpy as np\nA = ['np.inf', '33.33', '33.33', '33.37']\nNA = np.asarray(A)\nAVG = np.mean(NA, axis=0)\nprint(AVG)\n",
        "\n",
        "\n",
        "\n# Create a pandas dataframe where df.columns = ['lat', 'lon', 'val']\ndf = pd.DataFrame({'lat': lat, 'lon': lon, 'val': val})\n\n",
        "\n    # Create a pandas dataframe with the columns 'lat', 'lon', and 'val'\n    df = pd.DataFrame({'lat': lat, 'lon': lon, 'val': val})\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\na = np.zeros((len(x), 1))\nb = np.zeros((len(x), 1))\nc = np.zeros((len(x), 1))\nfor i in range(len(x)):\n    a[i] = x[i]**2 + y[i]**2 - 2 * x[i] * y[i]\n    b[i] = 2 * x[i] * y[i]\n    c[i] = x[i]**2 + y[i]**2\n    \n",
        "\na = np.zeros((degree, 1))\nb = np.zeros((degree, 1))\nc = np.zeros((degree, 1))\n",
        "\n",
        "\n",
        "\nresult = MinMaxScaler(feature_range=(-1, 6)).fit_transform(a)\n",
        "\nX_min, X_max = arr.min(), arr.max()\nscaler = MinMaxScaler(range(X_min, X_max + 1))\nresult = scaler.fit_transform(arr)\n",
        "\nscaler = MinMaxScaler(feature_range=(0, 1))\na_scaled = scaler.fit_transform(a)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n    # Zero pad the array to match the shape of (93,13)\n    pad_width = shape[1] - shape[0]\n    pad_height = shape[2] - shape[1]\n    arr = np.pad(arr, (pad_width, pad_height), 'constant', constant_values=0)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
    ],
    "Matplotlib": [
        "\n\n",
        "\n\n",
        "\n\n",
        "\n\n",
        "\n\n",
        "\n\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\n\n# line plot x and y with a thin diamond marker\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\n\n# line plot x and y with a thick diamond marker\n",
        "\n\nsns.set_style(\"whitegrid\")\ntips = sns.load_dataset(\"tips\")\nax = sns.boxplot(x=\"day\", y=\"total_bill\", data=tips)\n\n# set the y axis limit to be 0 to 40\nax.set_ylim(0, 40)\n\n",
        "```python\n\nx = 10 * np.random.randn(10)\n\nplt.plot(x)\n\n# highlight in red the x range 2 to 4\n# SOLUTION\nplt.xlim(-4, 4)\n\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOLUTION\n# SOL",
        "\n\n",
        "\n\n# draw a line segment from (0,0) to (1,2)\n",
        "\n\n",
        "\n\n",
        "\n\nx = np.arange(10)\ny = np.sin(x)\n\n# draw a line plot of x vs y using seaborn and pandas\nsns.lineplot(x, y)\n\n",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n# in plt.plot(x, y), use a plus marker and give it a thickness of 7\nplt.scatter(x, y, s=7, color='green')\n\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\n\nplt.plot(x, y, label=\"sin\")\n\n# show legend and set the font to size 20\nsns.set_fontsize(20)\n\n",
        "\n\n",
        "\n\n",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n(l,) = plt.plot(range(10), \"o-\", lw=5, markersize=30)\n\n",
        "```\nSOLUTION START\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n(l,) = plt.plot(range(10), \"o-\", lw=5, markersize=30)\n\n# set both line and marker colors to be solid red\nsns.scatterplot(x, y, color=\"red\")\n\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\nplt.plot(x, y, label=\"sin\")\n\n# rotate the x axis labels clockwise by 45 degrees\n",
        "\n\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\nplt.plot(x, y, label=\"sin\")\n\n# put a x axis ticklabels at 0, 2, 4...\n",
        "```\nSOLUTION START\n```\n\nx = np.random.randn(10)\ny = np.random.randn(10)\nsns.distplot(x, label=\"a\", color=\"0.25\")\nsns.distplot(y, label=\"b\", color=\"0.25\")\n\n# add legends\n",
        "\n\n",
        "\n\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\n\n# set xlabel as \"X\"\n# put the x label at the right end of the x axis\nxlabel = \"X\"\n\n",
        "\n\n",
        "\n\ny = 2 * np.random.rand(10)\nx = np.arange(10)\nplt.plot(x, y)\nmyTitle = \"Some really really long long long title I really really need - and just can't - just can't - make it any - simply any - shorter - at all.\"\n\n# fit a very long title myTitle into multiple lines\n",
        "\n\n",
        "\n\n# Create a new column with the difference between x and y\ndf['diff'] = y - x\n\n",
        "\n\nx = np.random.randn(10)\ny = x\nplt.scatter(x, y)\n\n# SOLUTION\n# Create a new column in the dataframe with the sign of y\ndf['sign'] = np.sign(y)\n\n# Plot the data with the sign column\nsns.scatterplot(x, y, data=df, color='blue')\n\n# Add labels to the x and y axes\nplt.xlabel('x')\nplt.ylabel('y')\n\n# Add a title to the plot\nplt.title('Scatterplot of x and y')\n\n",
        "```python\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION\n\n# plot x, then y then z, but so that x covers y and y covers z",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n# in a scatter plot of x, y, make the points have black borders and blue face\n# SOLUTION\n\n",
        "```\nSOLUTION START\n\ny = 2 * np.random.rand(10)\nx = np.arange(10)\n\n",
        "\n\ndata = {\n    \"reports\": [4, 24, 31, 2, 3],\n    \"coverage\": [35050800, 54899767, 57890789, 62890798, 70897871],\n}\ndf = pd.DataFrame(data)\nsns.factorplot(y=\"coverage\", x=\"reports\", kind=\"bar\", data=df, label=\"Total\")\n\n",
        "```python\n\ny = 2 * np.random.rand(10)\nx = np.arange(10)\nax = sns.lineplot(x=x, y=y)\n\n# SOLUTION: Add a dashes line to the plot\n# SOLUTION: Start by defining the dashes line style\n# SOLUTION: Use the `set_style` method to set the dashes line style\n# SOLUTION: Use the `set_xlim` and `set_ylim` methods to set the x and y limits of the plot\n# SOLUTION: Use the `set_xlabel` and `set_ylabel` methods to set the x and y labels of the plot\n# SOLUTION: Use the `ax.set_title` method to set the title of the plot\n# SOLUTION: Use the `ax.set_ylabel` method to set the y label of the plot\n# SOLUTION: Use the `ax.set_xlabel` method to set the x label of the plot\n# SOLUTION: Use the `ax.set_title` method to set the title of the plot\n# SOLUTION: Use the `ax.set_legend` method to set the legend of the plot\n# SOLUTION: Use the `ax.set_axis_off` method to turn off the x and y axis labels\n# SOLUTION: Use the `ax.set_axis_label` method to set the x and y axis labels\n# SOLUTION: Use the `ax.set_ticks` method to set the tick labels on the x and y axis\n# SOLUTION: Use the `ax.set_xticks` method to set the tick labels on the x axis\n# SOLUTION: Use the `ax.set_yticks` method to set the tick labels on the y axis\n# SOLUTION: Use the `ax.set_range` method to set the range of the plot\n# SOLUTION: Use the `ax.set_autoscale` method to automatically scale the plot\n# SOLUTION: Use the `ax.set_ylim` method to set the y limits of the plot\n# SOLUTION: Use the `ax.set_xlim` method to set the x limits of the plot\n# SOLUTION: Use the `ax.set_ylim` method to set the y limits of the plot\n# SOLUTION: Use the `ax.set_xlabel` method to set the x label of the plot\n# SOLUTION: Use the `ax.set_ylabel` method to set the y label of the plot\n# SOLUTION: Use the `ax.set_title` method to set the title of the plot\n# SOLUTION: Use the `ax.set_legend` method to set the legend of the plot\n# SOLUTION: Use the `ax.set_axis_off` method to turn off the x and y axis labels\n# SOLUTION: Use the `ax.set_axis_label` method to set the x and y axis labels\n# SOLUTION: Use the `ax.set_ticks` method to set the tick labels on the x and y axis\n# SOLUTION: Use the `ax.set_xticks` method to set the tick labels on the x axis\n# SOLUTION: Use the `ax.set_yticks` method to set the tick labels on the y axis\n# SOLUTION: Use the `ax.set_range` method to set the range of the plot\n# SOLUTION: Use the `ax.set_autoscale` method to automatically scale the plot\n# SOLUTION: Use the `ax.set_ylim` method to set the y limits of the plot\n# SOLUTION: Use the `ax.set_xlim` method to set the x limits of the plot\n# SOLUTION: Use the `ax.set_ylim` method to set the y limits of the plot\n# SOLUTION: Use the `ax.set_title` method to set the title of the plot\n# SOLUTION: Use the `ax.set_legend` method to set the legend of the plot\n# SOLUTION: Use the `ax.set_axis_off` method to turn off the x and y axis labels\n# SOLUTION: Use the `ax.set_axis_label` method to set the x and y axis labels\n# SOLUTION: Use the `ax.set_ticks` method to set the tick labels on the x and y axis\n# SOLUTION: Use the `ax.set_xticks` method to set the tick labels on the x axis\n#",
        "\n\nx = np.linspace(0, 2 * np.pi, 400)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# plot x vs y1 and x vs y2 in two subplots, sharing the x axis\n",
        "\n\n",
        "\n\nx = np.arange(10)\ny = np.sin(x)\ndf = pd.DataFrame({\"x\": x, \"y\": y})\nsns.lineplot(x=\"x\", y=\"y\", data=df)\n\n# remove x axis label\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.show()\n",
        "```\n\nx = np.arange(10)\ny = np.sin(x)\ndf = pd.DataFrame({\"x\": x, \"y\": y})\nsns.lineplot(x=\"x\", y=\"y\", data=df)\n\n# remove x tick labels\nplt.xticks(range(0, 10, 2), fontsize=8)\nplt.xlabel(\"x\", fontsize=8)\nplt.ylabel(\"y\", fontsize=8)\nplt.show()\n```",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n\n# show xticks and vertical grid at x positions 3 and 4\n# SOLUTION\nxticks = np.arange(3, 5)\nplt.xticks(xticks, fontsize=8)\nplt.yticks(fontsize=8)\n\n# SOLUTION\n# show xticks and vertical grid at x positions 3 and 4\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n\n# show yticks and horizontal grid at y positions 3 and 4\n# SOLUTION\nticks = np.arange(3, 5)\nplt.xticks(ticks, labels=[\"3\", \"4\"])\nplt.yticks(ticks)\n\n# add grid lines\nplt.grid()\n\n# show x-axis label and tick marks\n# SOLUTION\nplt.xlabel(\"X axis label\")\nplt.ylabel(\"Y axis label\")\nplt.xticks(range(10), fontsize=14)\nplt.yticks(ticks, fontsize=14)\n\n# show seaborn plot\n# SOLUTION\nsns.scatterplot(x, y, color=\"blue\")\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n\n# show yticks and horizontal grid at y positions 3 and 4\n# show xticks and vertical grid at x positions 1 and 2\n",
        "\n\n",
        "\n\nx = 10 * np.random.randn(10)\ny = x\nplt.plot(x, y, label=\"x-y\")\n\n# put legend in the lower right\n# SOLUTION\nsns.scatterplot(x, y, color=\"blue\", marker=\"^\", s=300)\n\n",
        "\n\nfig, axes = plt.subplots(ncols=2, nrows=2, figsize=(8, 6))\naxes = axes.flatten()\n\nfor ax in axes:\n    ax.set_ylabel(r\"$\\ln\\left(\\frac{x_a-x_b}{x_a-x_c}\\right)$\")\n    ax.set_xlabel(r\"$\\ln\\left(\\frac{x_a-x_d}{x_a-x_e}\\right)$\")\n\nplt.show()\nplt.clf()\n\n",
        "```\nSOLUTION START\n\nx = np.arange(10)\ny = np.arange(10, 20)\nz = np.arange(10)\n\n\nplt.plot(x, y)\nplt.plot(x, z)\n\n# Give names to the lines in the above plot 'Y' and 'Z' and show them in a legend\n",
        "\n\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x\n# Label the x-axis as \"X\"\n# Set the space between the x-axis label and the x-axis to be 20\n",
        "```\nSOLUTION START\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x\n# do not show xticks for the plot\n",
        "\nplt.xticks(range(10), fontsize=8)\nplt.yticks(range(10), fontsize=8)\nplt.xlabel('X')\nplt.ylabel('Y')\n",
        "\n\n# Plot y over x and label y axis \"Y\"\nplt.plot(x, y)\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.title(\"Y Over X\")\n\n",
        "\n\ntips = sns.load_dataset(\"tips\")\n\n# Make a seaborn joint regression plot (kind='reg') of 'total_bill' and 'tip' in the tips dataframe\n# change the line and scatter plot color to green but keep the distribution plot in blue\n",
        "\n\n",
        "\n\ntips = sns.load_dataset(\"tips\")\n\n# Make a seaborn joint regression plot (kind='reg') of 'total_bill' and 'tip' in the tips dataframe\n# do not use scatterplot for the joint plot\n",
        "\n\n",
        "\n\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and label the x axis as \"X\"\n# Make both the x axis ticks and the axis label red\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and label the x axis as \"X\"\n# Make the line of the x axis red\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x with tick font size 10 and make the x tick labels vertical\n# SOLUTION\n\n",
        "\n\nplt.plot([0.22058956, 0.33088437, 2.20589566], [0, 1, 2], 'ro-')\nplt.show()\n",
        "\n\n",
        "\n\n",
        "\n\n",
        "\n\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n]\n\n# make a seaborn scatter plot of bill_length_mm and bill_depth_mm\n# use markersize 30 for all data points in the scatter plot\n",
        "\n\na = [2.56422, 3.77284, 3.52623]\nb = [0.15, 0.3, 0.45]\nc = [58, 651, 393]\n\n# make scatter plot of a over b and annotate each data point with correspond numbers in c\n# SOLUTION\n\n# create a dataframe from the list of tuples\ndf = pd.DataFrame({'a': a, 'b': b, 'c': c})\n\n# plot the dataframe\nplt.scatter(df['a'], df['b'], s=300, color='blue')\n\n# add labels to the points\nfor i, row in df.iterrows():\n    plt.text(row['a'], row['b'], f'{row['c']:.2f}')\n\n# show the plot\nplt.show()\n",
        "\n\n# Plot y over x in a line chart and label the line \"y over x\"\n# Show legend of the plot and give the legend box a title\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart and label the line \"y over x\"\n# Show legend of the plot and give the legend box a title  \"Legend\"\n# Bold the legend title\n",
        "\n\nx = np.random.rand(10)\ny = np.random.rand(10)\n\n# Make a histogram of x and show outline of each bar in the histogram\n# Make the outline of each bar has a line width of 1.2\n",
        "```python\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make two subplots. Make the first subplot three times wider than the second subplot but they should have the same height.\n# SOLUTION\n\n# SOLUTION\nsubplot1, subplot2, subplot3 = plt.subplots(nrows=3, ncols=1)\nsubplot1.plot(x, y)\nsubplot2.plot(x, y)\nsubplot3.plot(x, y)\n\n# Set the plot limits\nsubplot1.xlim(-0.5, 10.5)\nsubplot1.ylim(-0.5, 10.5)\nsubplot2.xlim(-0.5, 10.5)\nsubplot2.ylim(-0.5, 10.5)\nsubplot3.xlim(-0.5, 10.5)\nsubplot3.ylim(-0.5, 10.5)\n\n# Set the tick labels\nsubplot1.xlabel('X')\nsubplot1.ylabel('Y')\nsubplot2.xlabel('X')\nsubplot2.ylabel('Y')\nsubplot3.xlabel('X')\nsubplot3.ylabel('Y')\n\n# Set the font size\nsubplot1.fontsize(14)\nsubplot2.fontsize(14)\nsubplot3.fontsize(14)\n\n# Set the title\nsubplot1.title('First Subplot')\nsubplot2.title('Second Subplot')\nsubplot3.title('Third Subplot')\n\n# Set the plot limits and font size for the x-axis labels\nplt.xlabel('X Label')\nplt.ylabel('Y Label')\nplt.xlim(-0.5, 10.5)\nplt.ylim(-0.5, 10.5)\n\n# Set the font size for the y-axis labels\nplt.xticks(range(-0.5, 10.5), fontsize=14)\nplt.yticks(range(-0.5, 10.5), fontsize=14)\n\n# Set the plot limits and font size for the tick labels\nplt.xticks(range(-0.5, 10.5), fontsize=14)\nplt.yticks(range(-0.5, 10.5), fontsize=14)\n\n# Set the plot limits and font size for the x-axis labels\nplt.xlabel('X Label')\nplt.ylabel('Y Label')\nplt.xlim(-0.5, 10.5)\nplt.ylim(-0.5, 10.5)\n\n# Set the font size for the y-axis labels\nplt.xticks(range(-0.5, 10.5), fontsize=14)\nplt.yticks(range(-0.5, 10.5), fontsize=14)\n\n# Set the plot limits and font size for the tick labels\nplt.xticks(range(-0.5, 10.5), fontsize=14)\nplt.yticks(range(-0.5, 10.5), fontsize=14)\n\n# Set the plot limits and font size for the x-axis labels\nplt.xlabel('X Label')\nplt.ylabel('Y Label')\nplt.xlim(-0.5, 10.5)\nplt.ylim(-0.5, 10.5)\n\n# Set the font size for the y-axis labels\nplt.xticks(range(-0.5, 10.5), fontsize=14)\nplt.yticks(range(-0.5, 10.5), fontsize=14)\n\n# Set the plot limits and font size for the tick labels\nplt.xticks(range(-0.5, 10.5), fontsize=14)\nplt.yticks(range(-0.5, 10.5), fontsize=14)\n\n# Set the plot limits and font size for the x-axis labels\nplt.xlabel('X Label')\nplt.ylabel('Y Label')\nplt.xlim(-0.5, 10.5)\nplt.ylim(-0.5, 10.5)\n\n# Set the font size for the y-axis labels\nplt.xticks(range(-0.5, 10.5), fontsize=14)\nplt.yticks(range(-0.5, 10.5), fontsize=",
        "\n\n",
        "\n\n# Plot a histogram of x\nplt.hist(x, bins=range(2, 11), align='left', rwidth=0.8)\n\n# Plot a histogram of y\nplt.hist(y, bins=range(2, 11), align='left', rwidth=0.8)\n\n",
        "\n\n",
        "\n\n",
        "\n\n# Plot a\nplt.plot(x[:, 0], x[:, 1], 'ro')\nplt.xlabel('a')\nplt.ylabel('b')\nplt.title('Histogram of x')\n\n# Plot b\nplt.plot(x[:, 1], x[:, 0], 'ro')\nplt.xlabel('b')\nplt.ylabel('a')\nplt.title('Histogram of x')\n\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nz = np.arange(10)\na = np.arange(10)\n\n# plot y over x and z over a in two different subplots\n# Set \"Y and Z\" as a main title above the two subplots\n",
        "\n\npoints = [(3, 5), (5, 10), (10, 150)]\n\n# plot a line plot for points in points.\n# Make the y-axis log scale\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x\n# use font size 20 for title, font size 18 for xlabel and font size 16 for ylabel\n",
        "\n\n",
        "\n\nlines = [[(0, 1), (1, 1)], [(2, 3), (3, 3)], [(1, 2), (1, 3)]]\nc = np.array([(1, 0, 0, 1), (0, 1, 0, 1), (0, 0, 1, 1)])\n\n# Plot line segments according to the positions specified in lines\n# Use the colors specified in c to color each line segment\n",
        "```\nSOLUTION START\n\nx = np.arange(0, 1000, 50)\ny = np.arange(0, 1000, 50)\n\n# plot y over x on a log-log plot\n# mark the axes with numbers like 1, 10, 100. do not use scientific notation\n",
        "\n\n",
        "\n\n",
        "\n\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\na = np.arange(10)\nz = np.arange(10)\n\n# Plot y over x and a over z in two side-by-side subplots.\n# Label them \"y\" and \"a\" and make a single figure-level legend using the figlegend function\n",
        "```\n\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n]\n\n# Make 2 subplots.\n# In the first subplot, plot a seaborn regression plot of \"bill_depth_mm\" over \"bill_length_mm\"\n# In the second subplot, plot a seaborn regression plot of \"flipper_length_mm\" over \"bill_length_mm\"\n# Do not share y axix for the subplots\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nfig, ax = plt.subplots(1, 1)\nplt.xlim(1, 10)\nplt.xticks(range(1, 10))\nax.plot(y, x)\n\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x\n# Show legend and use the greek letter lambda as the legend label\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(y, x)\nplt.xticks(range(0, 10, 2))\n\n# Add extra tick labels to existing xticks\nfor i in range(2, 11):\n    plt.xticks(range(0, 10, i))\n\n",
        "\n\nxticks = np.arange(0, len(x), 2)\nplt.xticks(xticks, rotation='-60', ha='left')\n\n",
        "\n\nx = np.arange(2010, 2020)\ny = np.arange(10)\nplt.plot(x, y)\n\n# Rotate the yticklabels to -60 degree. Set the xticks vertical alignment to top.\n# SOLUTION\n\n",
        "\n\nx = np.arange(2010, 2020)\ny = np.arange(10)\nplt.plot(x, y)\n\n# Set the transparency of xtick labels to be 0.5\nxticklabels = [f'{x:.2f}', f'{x:.2f}' for x in x]\nplt.xticks(range(len(xticklabels)), xticklabels)\n\n",
        "\n\n",
        "\n\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# make a two columns and one row subplots. Plot y over x in each subplot.\n# Give the plot a global title \" Figure \"\n",
        "\n\nvalues = [[1, 2], [3, 4]]\ndf = pd.DataFrame(values, columns=[\"Type A\", \"Type B\"], index=[\"Index 1\", \"Index 2\"])\n\n# Plot values in df with line chart\n# label the x axis and y axis in this plot as \"X\" and \"Y\"\n",
        "\n\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make a scatter plot with x and y and remove the edge of the marker\n# Use vertical line hatch for the marker\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make a scatter plot with x and y\n# Use star hatch for the marker\n",
        "\n\n",
        "\n\n# Plot a heatmap of data in the rectangle where right is 5, left is 1, bottom is 1, and top is 4.\n",
        "\n\n",
        "\n\n",
        "\n\n",
        "```python\n\nlabels = [\"a\", \"b\"]\nheight = [3, 4]\n\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# Use polar",
        "\n\n",
        "\n\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x\n# Turn minor ticks on and show gray dashed minor grid lines\n# Do not show any major grid lines\n",
        "\n\n",
        "\n\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart but use transparent marker with non-transparent edge\n# SOLUTION\n\n# Create a transparent marker\ntransparent_color = 'rgba(0,0,0,0.5)';\nmarkers = [plt.Marker(x, y, color=transparent_color, label=' transparent marker')]\n\n# Add the markers to the plot\nplt.plot(x, y, markers=markers)\n\n# Set the plot limits and display the plot\nplt.xlim(-0.5, 10.5); plt.ylim(-0.5, 10.5); plt.axis('off'); plt.show()\n",
        "\n\n# Plot a vertical line at 55 with green color\n",
        "\n\n# Specify the values of blue bars (height)\nblue_bar = (23, 25, 17)\n# Specify the values of orange bars (height)\norange_bar = (19, 18, 14)\n\n# Plot the blue bar and the orange bar side-by-side in the same bar plot.\n# Make  sure the bars don't overlap with each other.\n",
        "\n\nx = np.arange(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\na = np.arange(10)\n\n# Make two subplots\n# Plot y over x in the first subplot and plot z over a in the second subplot\n# Label each line chart and put them into a single legend on the first subplot\n",
        "\n\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x\n# use a tick interval of 1 on the a-axis\n",
        "\n\n",
        "\n\n",
        "\n\n",
        "\n\n",
        "\n\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(x, y, label=\"Line\")\nplt.plot(y, x, label=\"Flipped\")\n\n# Create a new column to store the index of the line\n# SOLUTIONSTART\nindex = []\n\n# SOLUTIONEND\n",
        "\n\n",
        "\n\ndata = np.random.random((10, 10))\n\n# plot the 2d matrix data with a colorbar\n# SOLUTION\n\n# Create a figure and add a colorbar to it\nfig, ax = plt.subplots()\nax.imshow(data, aspect='auto', cmap='gray')\n\n# Set the limits of the colorbar\ncbar_min = 0\ncbar_max = 1\ncbar_range = np.linspace(cbar_min, cbar_max, 256)\n\n# Create a colorbar\ncbar = plt.colorbar(ax, cbar_range, label='Colormap')\n\n# Set the tick labels for the colorbar\ncbar.set_ticks(np.linspace(0, 1, 256))\n\n# Add labels to the tick labels\nfor tick in cbar.ticks:\n    tick.label.set_text(f'{tick[0]:.2f}')\n\n# Set the font size of the tick labels\ncbar.set_fontsize(14)\n\n# Show the figure\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x. Give the plot a title \" Figure 1\". bold the word \" Figure\" in the title but do not bold \"1\"\n",
        "\n\ndf = pd.DataFrame(\n    {\n        \"id\": [\"1\", \"2\", \"1\", \"2\", \"2\"],\n        \"x\": [123, 22, 356, 412, 54],\n        \"y\": [120, 12, 35, 41, 45],\n    }\n)\n\n# Use seaborn to make a pairplot of data in `df` using `x` for x_vars, `y` for y_vars, and `id` for hue\nsns.scatterplot(x=\"x\", y=\"y\", hue=\"id\", data=df)\n\n# Hide the legend in the output figure\nplt.legend()\n\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and invert the x axis\n",
        "\n\nx = np.arange(11)\ny = np.arange(11)\nplt.xlim(0, 10)\nplt.ylim(0, 10)\n\n# Plot a scatter plot x over y and set both the x limit and y limit to be between 0 and 10\n# Turn off axis clipping so data points can go beyond the axes\n",
        "\n\n# Plot the data points to have red inside and have black border\n",
        "\n\n# plot y over x on a 2 by 2 subplots with a figure size of (15, 15)\n# repeat the plot in each subplot\nfor i in range(2):\n    plt.subplot(2, 2, i + 1)\n    plt.plot(x, y)\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.title('Plot {}'.format(i + 1))\n    plt.show()\n\n",
        "\n\nx = np.random.rand(100) * 10\n\n# Make a histogram of x\n# Make the histogram range from 0 to 10\n# Make bar width 2 for each bar in the histogram and have 5 bars in total\n",
        "\nfrom matplotlib import pyplot as plt\n\nx = np.arange(10)\ny = np.arange(1, 11)\nerror = np.random.random(y.shape)\n\n# Plot y over x and show the error according to `error`\n# Plot the error as a shaded region rather than error bars\n",
        "\n\nxvec = np.linspace(-5.0, 5.0, 100)\nx, y = np.meshgrid(xvec, xvec)\nz = -np.hypot(x, y)\nplt.contourf(x, y, z)\n\n# draw x=0 and y=0 axis in my contour plot with white color\n",
        "\n\nbox_position, box_height, box_errors = np.arange(4), np.ones(4), np.arange(1, 5)\nc = [\"r\", \"r\", \"b\", \"b\"]\nfig, ax = plt.subplots()\nax.bar(box_position, box_height, color=\"yellow\")\n\n# Plot error bars with errors specified in box_errors. Use colors in c to color the error bars\n# SOLUTION\n\n",
        "```\nSOLUTION START\n\nx = np.arange(10)\ny = np.arange(10)\nz = np.arange(10)\na = np.arange(10)\n\n# Plot y over x and z over a in two side-by-side subplots\n# Make \"Y\" the title of the first subplot and \"Z\" the title of the second subplot\n# Raise the title of the second subplot to be higher than the first one\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# make 4 by 4 subplots with a figure size (5,5)\n# in each subplot, plot y over x and show axis tick labels\n# give enough spacing between subplots so the tick labels don't overlap\n",
        "\n\n",
        "```\n\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n].head(10)\n\n# Plot df as a matplotlib table. Set the bbox of the table to [0, 0, 1, 1]\n",
        "\n\n",
        "\n\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart. Show x axis tick labels but hide the x axis ticks\n# SOLUTION\n\n# Create a Pandas DataFrame to store the data\ndf = pd.DataFrame({'x': x, 'y': y})\n\n# Add a column to the DataFrame to store the index of the data points\ndf['index'] = np.arange(len(df))\n\n# Plot the data using matplotlib\nplt.plot(df['x'], df['y'], 'ro-')\n\n# Set the x axis tick labels and font size\nplt.xlabel('x axis tick labels')\nplt.xticks(range(len(df)), df.index)\nplt.ylabel('y axis tick labels')\nplt.yticks(range(len(df)), df.index)\n\n# Set the font size of the tick labels and the x axis tick labels\nplt.fontsize(14)\nplt.xticks(range(len(df)), df.index)\n\n# Set the plot limits and display the plot\nplt.xlim(-0.5, 10.5)\nplt.ylim(-0.5, 10.5)\nplt.show()\n",
        "```\n\ndf = sns.load_dataset(\"exercise\")\n\n# Make catplots of scatter plots by using \"time\" as x, \"pulse\" as y, \"kind\" as hue, and \"diet\" as col\n# Change the subplots titles to \"Group: Fat\" and \"Group: No Fat\"\n",
        "\n\ndf = sns.load_dataset(\"exercise\")\n\n# Make catplots of scatter plots by using \"time\" as x, \"pulse\" as y, \"kind\" as hue, and \"diet\" as col\n# Change the xlabels to \"Exercise Time\" and \"Exercise Time\"\n",
        "\n\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x with label \"y\"\n# make the legend fontsize 8\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x with figsize (5, 5) and dpi 300\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x with label \"y\" and show legend\n# Remove the border of frame of legend\n",
        "\n\n",
        "\n\ndf = sns.load_dataset(\"penguins\")[[\"bill_length_mm\", \"species\", \"sex\"]]\n\n# Make a stripplot for the data in df. Use \"sex\" as x, \"bill_length_mm\" as y, and \"species\" for the color\n# Remove the legend from the stripplot\nsns.stripplot(df, x=\"sex\", y=\"bill_length_mm\", color=\"species\")\n\n# Add title and axes labels to the plot\nplt.title(\"Penguin Sex and Bill Length by Species\")\nplt.xlabel(\"Sex\")\nplt.ylabel(\"Bill Length (mm)\")\n\n# Add a tick mark to the x-axis at each species value\nplt.xticks(range(df.shape[0]))\n\n# Add a tick mark to the y-axis at each species value\nplt.yticks(range(df.shape[1]))\n\n# Set the plot limits to include all data points\nplt.xlim(-0.5, 5.5)\nplt.ylim(-0.5, 5.5)\n\n# Set the plot aspect ratio to 1:1\nplt.axis('off')\n\n# Show the plot\nplt.show()\n",
        "\nsns.scatterplot(x=\"a\", y=\"c\", data=df)\nsns.show()\n\n",
        "\n\n# Plot the 3D scatter plot\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart and name axis with labels (\"x\" and \"y\")\n",
        "\n\nx = np.random.random((10, 10))\nfrom matplotlib import gridspec\n\nnrow = 2\nncol = 2\n\nfig = plt.figure(figsize=(ncol + 1, nrow + 1))\n\n# Make a 2x2 subplots with fig and plot x in each subplot as an image\n# Remove the space between each subplot and make the subplot adjacent to each other\n# Remove the axis tick labels from each subplot\n"
    ],
    "Tensorflow": [
        "\n",
        "\nx = x + 1\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nzero_padding = [1, 1, 1, 1]\nresult = [tf.pad(x, zero_padding) for x in lengths]\n",
        "\nzero_mask = tf.zeros((8,), dtype=tf.int32)\nzero_mask[0:lengths[0]] = 1\nzero_mask[lengths[0]:lengths[1]] = 0\nzero_mask[lengths[1]:lengths[2]] = 0\nzero_mask[lengths[2]:lengths[3]] = 0\nzero_mask[lengths[3]:lengths[4]] = 1\nzero_mask[lengths[4]:lengths[5]] = 0\nzero_mask[lengths[5]:lengths[6]] = 0\nzero_mask[lengths[6]:lengths[7]] = 0\n",
        "\n",
        "\n",
        "\nzero_padding = [1, 1, 1, 0, 0, 0, 0]\nresult = tf.pad(tf.ones(lengths), zero_padding)\n",
        "\n",
        "\n",
        "\na = a.reshape((50, 100, 512))\n",
        "\na = a.reshape((50, 100, 1, 512))\n",
        "\nresult = a.reshape((1, 50, 100, 1, 512))\n",
        "\nimport tensorflow as tf\nimport numpy as np\n\nnp.random.seed(10)\nA = tf.constant(np.random.randint(100,size=(5, 3)))\nresult = np.sum(A, axis=1)\n",
        "\nimport tensorflow as tf\nimport numpy as np\n\nnp.random.seed(10)\nA = tf.constant(np.random.randint(100,size=(5, 3)))\nresult = np.prod(A, axis=1)\n",
        "\n",
        "\nresult = a - b\n",
        "\nresult = a - b\n",
        "\n",
        "\nm = x[y,z]\n",
        "\nm = x[[row,col]]\n",
        "\n",
        "\nC = np.dot(A, B)\n",
        "\nC = np.dot(A, B)\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\nA = tf.random.normal([100,100])\nB = tf.random.normal([100,100])\nwith tf.Session() as session:\n    result = session.run(tf.reduce_sum(tf.matmul(A,B)))\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n    # Seed the random number generator with a value of 10\n    tf.random.set_seed(seed_x)\n    \n",
        "\n# [Missing Code]\n"
    ],
    "Scipy": [
        "\nA = polyfit(x, y, 2)\nB = polyfit(x, y, 3)\nC = polyfit(x, y, 4)\nD = polyfit(x, y, 5)\n",
        "\n# [Missing Code]\nA = polyfit(x, y, 2)\nB = polyfit(x, y, 3)\nC = polyfit(x, y, 4)\nD = polyfit(x, y, 5)\n",
        "\nA = 4\nB = 0.1\nC = 1\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nz_scores = scipy.stats.zscore(p_values)\n",
        "\n# mu = 1.744\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nrotated_image = rotate(data_orig, angle)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nM[M.shape[0]-1, M.shape[1]-1] = 1\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# median = np.median(col)\n# mode = np.mode(col)\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n    # [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\np_value = stats.ranksums(pre_course_scores, during_course_scores)\n",
        "\n",
        "\n",
        "\n# kurtosis = (a**3).sum() / (a**3).sum(axis=1)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# Create a sparse matrix using the given vectors\nsparse_matrix = sparse.csr_matrix((vectors, (0, 1)), shape=(3, max_vector_size))\n",
        "\nimport numpy as np\nimport scipy.ndimage\n\na= np.zeros((5, 5))\na[1:4, 1:4] = np.arange(3*3).reshape((3, 3))\nb = np.zeros((5, 5))\nb[1:4, 1:4] = a[1:4, 1:4] + 1\nprint(b)\n",
        "\n",
        "\n",
        "\n# Interpolate the array over the 1st axes using the spline method\nnew_array = np.zeros((1000, 100, 100))\nfor i in range(1000):\n    for j in range(100):\n        f = interp1d(x[i], array[:, i, j], axis=1)\n        new_array[:, i, j] = f(x_new[i], x_new[i+1])\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\nM = np.zeros((N+1, N+1))\nfor i in range(N+1):\n   for j in range(i+1):\n      M[i,j] = choose(i, j) * p**j * (1-p)**(i-j)\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nimport numpy as np\nimport scipy.ndimage\n\nshape = (4, 6)\nx = np.arange(9).reshape(shape)\nresult = scipy.ndimage. zoom(x, 2, order=1)\nprint(result)\n",
        "\n",
        "\nx1 = np.linspace(x0[0], x0[1], 5)\nx2 = np.linspace(x0[2], x0[3], 5)\nx3 = np.linspace(x0[4], x0[5], 5)\nx = np.vstack((x1, x2, x3))\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# integrate.quad(lambda x: 2*x*c[n], 0, 1)\n",
        "\n",
        "\nA = V + x\n",
        "\nV[V > 0] += x\n",
        "\nA = V + x\nB = A + y\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\nweights = sciopt.optimize.max(a['A1'], axis=1)\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n"
    ],
    "Sklearn": [
        "\n",
        "\n",
        "\n",
        "\n    # Convert the data from a Scikit-learn Bunch object to a Pandas DataFrame\n    df = pd.DataFrame(data)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing.OneHotEncoder import OneHotEncoder\n\n# Load the data\ndf_origin = pd.read_csv('data.csv')\n\n# Create the OneHotEncoder object\nonehotencoder = OneHotEncoder(sparse=True)\n\n# Transform the data\ntransform_output = onehotencoder.fit_transform(df_origin['col1'])\n\n# Merge the transformed data back into the original dataframe\ndf = pd.concat([df_origin, transform_output], axis=1)\n",
        "\n# Merge the two DataFrames using the concat method\ndf_merged = pd.concat([df_origin, transform_output], axis=1)\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold\nX, y = load_data()\nassert type(X) == np.ndarray\nassert type(y) == np.ndarray\ncv = StratifiedKFold(5).split(X, y)\nlogreg = LogisticRegression()\nproba = logreg.fit(X, y).predict_proba(cv)\nprint(proba)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n",
        "\npreprocessor = preprocess\n",
        "\n# prePro(text) -> lowercase text\ndef prePro(text):\n    lower_text = text.lower()\n    return lower_text\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\nkm.fit(X)\n",
        "\n",
        "\nkm.fit(X)\n",
        "\n# [Missing Code]\n",
        "\n# OneHotEncoder(sparse=False)\n",
        "\n# OneHotEncoder(sparse=False)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# Convert the features to a 2D-array\nnew_features = np.array(features)\n",
        "\n# Convert the features to a 2D-array\nnew_f = np.zeros((len(f), len(f[0])))\nfor i, row in enumerate(f):\n    for j, feature in enumerate(row):\n        new_f[i, j] = feature\n",
        "\n# Convert the features to a 2D-array\nnew_features = np.zeros((len(features), len(features[0])))\nfor i, feature in enumerate(features):\n    for j, element in enumerate(feature):\n        new_features[i, j] = element\n",
        "\n# Convert the features to a 2D-array\nnew_features = pd.DataFrame({'f1': features['f1'], 'f2': features['f2'], 'f3': features['f3'], 'f4': features['f4'], 'f5': features['f5'], 'f6': features['f6']})\n\n",
        "\n# Convert the features to a 2D-array\nnew_features = np.zeros((len(features), len(features[0])))\nfor i, row in enumerate(features):\n    for j, feature in enumerate(row):\n        new_features[i, j] = feature\n",
        "\n# [Missing Code]\n",
        "\n# Hierarchical clustering by a distance matrix describing their similarities, which is between different professors, like:\n#              prof1     prof2     prof3\n#       prof1     0        0.8     0.9\n#       prof2     0.8      0       0.2\n#       prof3     0.9      0.2     0\n#       data_matrix=[[0,0.8,0.9],[0.8,0,0.2],[0.9,0.2,0]]\n# The expected number of clusters is 2. Can it be done using sklearn.cluster.AgglomerativeClustering? I tried to do that but failed. Anyone can give me some advice? prefer answer in a list like [label1, label2, ...]\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n# Hierarchical clustering using scipy.cluster.hierarchy\n# Hierarchical clustering is a method for dividing a dataset into smaller, more manageable groups based on similarities between objects in the dataset.\n# The distance matrix is used to calculate the distance between each pair of objects in the dataset.\n# The resulting distance matrix is then used to create a hierarchy of clusters using the scipy.cluster.hierarchy.linkage() function.\n# The number of clusters can be specified using the max_clusters argument.\n# The resulting hierarchy of clusters can be viewed using the scipy.cluster.hierarchy.plot() function.\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n",
        "\nimport numpy as np\nimport pandas as pd\nimport sklearn\n\ndata = np.random.rand(10, 2)\ndata = pd.DataFrame(data)\ndata.box_cox(center=0.5, scale=1.5)\n",
        "\nimport numpy as np\nimport pandas as pd\nimport sklearn\n\nyeo_johnson_data = np.zeros((len(data), 2))\nfor i, row in data.iterrows():\n    yeo_johnson_data[i, 0] = row[\"x1\"]**2 + row[\"x2\"]**2\n    yeo_johnson_data[i, 1] = np.exp(row[\"x1\"]) * np.exp(row[\"x2\"])\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\nimport numpy as np\nimport pandas as pd\ndata = load_data()\n\nx_train, y_train = data.iloc[:80].values, data.iloc[:80].values\nx_test, y_test = data.iloc[80:].values, data.iloc[80:].values\n",
        "\n# [Missing Code]\n",
        "\n    # Load the data from the CSV file\n    data = pd.read_csv('example.csv', header=None, sep=',')\n",
        "\nfrom sklearn.cluster import KMeans\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\ndf = pd.read_csv(\"generate_csv/all_data_device.csv\", parse_dates=[\"date\"])\nf1 = df['mse'].values\n# generate another list\nf2 = list(range(0, len(f1)))\nX = np.array(list(zip(f1, f2)))\nkmeans = KMeans(n_clusters=2).fit(X)\nlabels = kmeans.predict(X)\n# Centroid values\ncentroids = kmeans.cluster_centers_\n#print(centroids)\n\nfig = plt.figure()\nax = Axes3D(fig)\nax.scatter(X[:, 0], X[:, 1], c=labels)\nax.scatter(centroids[:, 0], centroids[:, 1], marker='*', c='#050505', s=1000)\nplt.title('K Mean Classification')\nplt.show()\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndf = pd.read_csv('titanic.csv')\ndf['Sex'] = LabelEncoder.fit_transform(df['Sex'])\ndf['Sex'] = df['Sex'].map(lambda x: 1 if x == 'male' else 0)\nprint(df)\n",
        "\ndf = pd.read_csv('data.csv')\ndf['Sex'] = LabelEncoder.fit_transform(df['Sex'])\ndf['Sex'] = df['Sex'].astype(int)\n",
        "\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndf = pd.read_csv('titanic.csv')\ndf['Sex'] = LabelEncoder.fit_transform(df['Sex'])\ndf['Sex'] = df['Sex'].map(lambda x: 1 if x == 'male' else 0)\ndf['Sex'] = df['Sex'].map(lambda x: 1 if x == 'female' else 0)\nprint(df)\n",
        "\n",
        "\n# Normalize the entire np array all together\nscaler = MinMaxScaler(feature_range=(-1, 1))\nnp_array = scaler.fit_transform(np_array)\n",
        "\n# Normalize the entire np array all together\nscaler = MinMaxScaler(feature_range=(-1, 1))\nnp_array = scaler.fit_transform(np_array)\nprint(np_array)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n#",
        "\n#",
        "\n",
        "\n",
        "\n",
        "\ndf['X2_scale'] = scaler.fit_transform(df['X2'])\ndf['X3_scale'] = scaler.fit_transform(df['X3'])\nprint(df)\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\n\n# Load the data\n GridSearch_fitted = load_data()\n\n# Create the grid search object\nparam_grid = {'C': [1, 10, 100],\n              'gamma': [0.1, 0.5, 1.0],\n              'n_jobs': [1, 10, 100]}\ngrid_search = GridSearchCV(estimator=LogisticRegression(), param_grid=param_grid)\n\n# Evaluate the grid search\nresults = grid_search.fit( GridSearch_fitted )\n\n# Print the results\nprint(results.best_score_)\nprint(results.best_params_)\n",
        "\n",
        "\nimport numpy as np\nimport pandas as pd\n\n# Load the data\ndf = pd.read_csv(\"data.csv\")\n\n# Create a new column to store the predicted class\ndf[\"predicted_class\"] = np.zeros(df.shape[0])\n\n# Train the model\nmodel = sklearn.ensemble.IsolationForest()\nmodel.fit(df[\"feature\"])\n\n# Evaluate the model\npredicted_class = model.predict(df[\"feature\"])\n\n# Print the results\nprint(\"Overall accuracy: \", accuracy_score(df[\"actual_class\"], predicted_class))\nprint(\"F1 score: \", f1_score(df[\"actual_class\"], predicted_class, 0.5))\nprint(\"Confusion matrix: \")\nconfusion_matrix(df[\"actual_class\"], predicted_class)\n",
        "\n"
    ],
    "Pytorch": [
        "\nimport numpy as np\nimport pandas as pd\nimport torch\n\noptim = torch.optim.SGD(...)\nlearning_rate = 0.01\nfor i in range(10000):\n    optim.zero_grad()\n    outputs = model(inputs)\n    loss = outputs[0]\n    loss.backward()\n    optim.step()\n    if i % 100 == 0:\n        print(f\"Step {i+1}: loss {loss.item():.2f}\")\n\n",
        "\n",
        "\nimport numpy as np\nimport pandas as pd\nimport torch\n\noptim = torch.optim.SGD(...)\nlearning_rate = 0.005\n\nfor i in range(10000):\n    optim.zero_grad()\n    outputs = model(inputs)\n    loss = outputs[0]\n    loss.backward()\n    optim.step()\n",
        "\nimport numpy as np\nimport pandas as pd\nimport torch\n\ndef load_data():\n    # Load the data into a pandas dataframe\n    df = pd.read_csv('data.csv')\n\n    # Remove the header row\n    df = df.drop(0, axis=1)\n\n    # Convert the data to a torch tensor\n    data = df.values\n\n    return data\n",
        "\n",
        "\n    # Load the pre-trained word2vec embedding\n    word_vec = word2vec.wv.most_similar(input_Tensor, topn=1)[0][0]\n",
        "\nimport numpy as np\nimport torch\nimport pandas as pd\n\nx = np.random.rand(4,4)\npx = pd.DataFrame(x)\nprint(px)\n",
        "\npx.to_numpy()\n",
        "\n",
        "\n",
        "\nimport numpy as np\nimport pandas as pd\nimport torch\nA_logical, B = load_data()\nC = np.where(A_logical == 1, B, np.nan)\nprint(C)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n# Convert the pandas dataframe to a numpy array\nx_array = pd.DataFrame(x_array).to_numpy()\n",
        "\n# [Missing Code]\n",
        "\n    # Convert the numpy array a to a torch tensor\n",
        "\nimport numpy as np\nimport pandas as pd\nimport torch\n\ndef batch_convert_sentence_lengths_to_masks(input_ids, lengths):\n    \"\"\"\n    This function takes in a list of input_ids and a list of lengths, and returns a list of\n    torch.LongTensor masks corresponding to the input_ids and lengths.\n    \n    The function uses the following algorithm to convert the input_ids and lengths to masks:\n    \n    1. Create a tensor of size (batch_size, input_ids.shape[1], lengths.shape[2]).\n    2. Fill the tensor with zeros.\n    3. Use the torch.LongTensor function to select the elements of the tensor corresponding to the input_ids.\n    4. Use the torch.LongTensor function to select the elements of the tensor corresponding to the lengths.\n    5. Use the torch.LongTensor function to select the elements of the tensor corresponding to the selected input_ids and lengths.\n    6. Repeat steps 3-5 for each element in the input_ids and lengths lists.\n    7. Convert the resulting tensor to a list of masks by using the torch.LongTensor function.\n    \n    Note that this function assumes that the input_ids and lengths are sorted in ascending order by\n    their first element.\n    \"\"\"\n    \n    batch_size = input_ids.shape[0]\n    input_ids = input_ids.unsqueeze(0)\n    lengths = lengths.unsqueeze(0)\n    \n    # Create a tensor of size (batch_size, input_ids.shape[1], lengths.shape[2]).\n    mask = torch.zeros((batch_size, input_ids.shape[1], lengths.shape[2]))\n    \n    # Fill the tensor with zeros.\n    mask.zero_()\n    \n    # Use the torch.LongTensor function to select the elements of the tensor corresponding to the input_ids.\n    input_ids_mask = input_ids.select(torch.LongTensor([0]))\n    \n    # Use the torch.LongTensor function to select the elements of the tensor corresponding to the lengths.\n    lengths_mask = lengths.select(torch.LongTensor([0]))\n    \n    # Repeat steps 3-5 for each element in the input_ids and lengths lists.\n    for i in range(batch_size):\n        for j in range(input_ids.shape[1]):\n            for k in range(lengths.shape[2]):\n                if input_ids[i, j, k] > 0:\n                    mask[i, j, k] = 1\n    \n    # Convert the resulting tensor to a list of masks by using the torch.LongTensor function.\n    masks = mask.tolist()\n    \n    return masks\n",
        "\n# [Missing Code]\n",
        "\nimport numpy as np\nimport pandas as pd\nimport torch\n\ndef batch_convert_sentence_lengths_to_masks(input_ids, lengths):\n    \"\"\"\n    This function takes in a list of input_ids and a list of lengths, and returns a list of\n    torch.LongTensor masks corresponding to the input_ids and lengths.\n    \n    The function uses the following algorithm to convert the input_ids and lengths to masks:\n    \n    1. Create a tensor of size (batch_size, input_ids.shape[1], lengths.shape[2]).\n    2. Fill the tensor with zeros.\n    3. Use the torch.LongTensor function to select the indices of the input_ids that correspond to\n       the lengths.\n    4. Use the torch.set_mask function to set the selected indices to 1.\n    5. Repeat steps 3 and 4 for each element in the input_ids and lengths lists.\n    \n    The resulting list of masks will have the shape (batch_size, input_ids.shape[1], lengths.shape[2]).\n    \"\"\"\n    \n    batch_size = input_ids.shape[0]\n    input_ids = input_ids.unsqueeze(0)\n    lengths = lengths.unsqueeze(0)\n    \n    # Create a tensor of size (batch_size, input_ids.shape[1], lengths.shape[2]).\n    mask = torch.zeros((batch_size, input_ids.shape[1], lengths.shape[2]))\n    \n    # Fill the tensor with zeros.\n    for i in range(batch_size):\n        for j in range(input_ids.shape[1]):\n            for k in range(lengths.shape[2]):\n                mask[i, j, k] = 0\n    \n    # Use the torch.LongTensor function to select the indices of the input_ids that correspond to\n    # the lengths.\n    selected_ids = torch.LongTensor(range(input_ids.shape[1]))\n    for i in range(batch_size):\n        for j in range(input_ids.shape[1]):\n            if lengths[i, j] > 0:\n                selected_ids[i, j] = torch.LongTensor(range(lengths[i, j]))\n    \n    # Use the torch.set_mask function to set the selected indices to 1.\n    for i in range(batch_size):\n        for j in range(input_ids.shape[1]):\n            for k in range(lengths.shape[2]):\n                mask[i, j, k] = torch.set_mask(mask[i, j, k], selected_ids[i, j, k] == 1)\n    \n    # Repeat steps 3 and 4 for each element in the input_ids and lengths lists.\n    return mask\n\ninput_ids = np.array([[0, 1, 2],\n                     [3, 4, 5],\n                     [6, 7, 8]])\nlengths = np.array([[1, 2, 3],\n                     [4, 5, 6],\n                     [7, 8, 9]])\n\nmasks = batch_convert_sentence_lengths_to_masks(input_ids, lengths)\nprint(masks)\n",
        "\n    # [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\na[ : , lengths : , : ] = 0\n",
        "\n",
        "\n",
        "\n",
        "\nimport torch\n\nlist_of_tensors = [ torch.randn(3), torch.randn(3), torch.randn(3)]\ntensor_of_tensors = torch.tensor(list_of_tensors)\n",
        "\n",
        "\nimport torch\n\nlist_of_tensors = [ torch.randn(3), torch.randn(3), torch.randn(3)]\ntensor_of_tensors = torch.tensor(list_of_tensors)\n",
        "\nimport numpy as np\nimport pandas as pd\nimport torch\n\nlist_of_tensors = [ torch.randn(3), torch.randn(3), torch.randn(3)]\ntensor_of_tensors = torch.tensor(list_of_tensors)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n    # [Missing Code]\n",
        "\n    # [Missing Code]\n",
        "\nimport numpy as np\nimport pandas as pd\nimport torch\n\ndef load_data():\n    # Load data into two tensors\n    x = np.random.rand(10, 2)\n    y = np.random.rand(10, 2)\n\n    # Create a dictionary to store the results\n    results = {}\n\n    # Iterate over each tensor\n    for i in range(x.shape[0]):\n        for j in range(x.shape[1]):\n            # Get the absolute value of the element\n            abs_x = torch.abs(x[i, j])\n\n            # Get the sign of the element\n            sign_x = torch.sign(x[i, j])\n\n            # Get the absolute value of the element\n            abs_y = torch.abs(y[i, j])\n\n            # Get the sign of the element\n            sign_y = torch.sign(y[i, j])\n\n            # Keep the element with the minimum absolute value\n            min_abs_x = torch.min(abs_x, abs_y)\n\n            # Keep the element with the minimum absolute value\n            min_abs_y = torch.min(abs_x, abs_y)\n\n            # Get the product of the sign and the minimum absolute value\n            product = sign_x * min_abs_x + sign_y * min_abs_y\n\n            # Add the result to the dictionary\n            results[i, j] = product\n\n    # Return the dictionary of results\n    return results\n\n# Load the data\nresults = load_data()\n\n# Print the results\nprint(results)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n# [Missing Code]\n",
        "\n"
    ]
}