{
    "Matplotlib": [
        "\n\nx = 10 * np.random.randn(10)\ny = x\n\n# plot x vs y, label them using \"x-y\" in the legend\nplt.plot(x, y, 'o-', label='x-y')\n\n# add a title and axis labels\nplt.title('x vs y')\nplt.xlabel('x')\nplt.ylabel('y')\n\n# add a legend\nplt.legend()\n\n# show the plot\nplt.show()\n",
        "\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nplt.scatter(x, y)\n\n# turn on minor ticks on y axis only\nplt.yticks(np.arange(0, 1.1, 0.1), minor=True)\n\nplt.show()\n",
        "\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nplt.scatter(x, y)\nplt.minorticks_on()\n",
        "\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nplt.scatter(x, y)\n\n# turn on minor ticks on x axis only\nplt.xticks(np.arange(0, 1.1, 0.1), minor=True)\n\nplt.show()\n",
        "\n\nx = np.arange(10)\n\n# create a dataframe with different line styles\ndf = pd.DataFrame({'x': x, 'y1': np.random.randn(10), 'y2': np.random.randn(10), 'y3': np.random.randn(10)})\n\n# create a figure with 3 subplots\nfig, axes = plt.subplots(1, 3, figsize=(15, 5))\n\n# loop over the different line styles and plot them on the corresponding subplot\nfor i, style in enumerate(['-', '--', '-.']):\n    axes[i].plot(df['x'], df['y{}'.format(i+1)], style)\n    axes[i].set_title('Line style: {}'.format(style))\n\nplt.show()\n",
        "\n\nx = np.arange(10)\n\n# create a dataframe with different line styles\ndf = pd.DataFrame({'x': x, 'y1': np.random.randn(10), 'y2': np.random.randn(10), 'y3': np.random.randn(10)})\n\n# create a figure with 3 subplots\nfig, axes = plt.subplots(1, 3, figsize=(15, 5))\n\n# loop over the different line styles and plot them on the corresponding subplot\nfor i, style in enumerate(['-', '--', '-.']):\n    axes[i].plot(df['x'], df['y{}'.format(i+1)], style)\n    axes[i].set_title('Line style: {}'.format(style))\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\n\n# line plot x and y with a thin diamond marker\nplt.plot(x, y, marker='d', linestyle='--')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\n\n# line plot x and y with a thick diamond marker\nplt.plot(x, y, marker='D', markersize=10, linewidth=3)\nplt.show()\n",
        "ax.set_ylim(0, 40)\n\n# SOLUTION END\n\nplt.show()",
        "\n\nx = 10 * np.random.randn(10)\n\nfig, ax = plt.subplots()\nax.plot(x)\n\nax.axvspan(2, 4, alpha=0.2, color='red')\n\nplt.show()\n",
        "\n\n# create x and y values\nx = np.array([0, 1])\ny = np.array([0, 2])\n\n# plot the line\nplt.plot(x, y)\n\n# show the plot\nplt.show()\n",
        "\n\n# create x and y coordinates\nx = np.array([0, 1])\ny = np.array([0, 2])\n\n# plot the line segment\nplt.plot(x, y)\n\n# show the plot\nplt.show()\n",
        "\n\nseaborn.set(style=\"ticks\")\n\nnumpy.random.seed(0)\nN = 37\n_genders = [\"Female\", \"Male\", \"Non-binary\", \"No Response\"]\ndf = pandas.DataFrame(\n    {\n        \"Height (cm)\": numpy.random.uniform(low=130, high=200, size=N),\n        \"Weight (kg)\": numpy.random.uniform(low=30, high=100, size=N),\n        \"Gender\": numpy.random.choice(_genders, size=N),\n    }\n)\n\n# make seaborn relation plot and color by the gender field of the dataframe df\nseaborn.relplot(x=\"Height (cm)\", y=\"Weight (kg)\", hue=\"Gender\", data=df)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = 2 * np.random.rand(10)\n\n# draw a regular matplotlib style plot using seaborn\nsns.set()\nplt.plot(x, y)\nplt.show()\n",
        "\nsns.lineplot(x=x, y=y)\n",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\nplt.plot(x, y, marker='+', linewidth=7)\nplt.show()\n",
        "\nplt.legend(fontsize=20)\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\n\n# set legend title to xyz and set the title font to size 20\nplt.plot(x, y, label='cosine')\nplt.legend(title='xyz', prop={'size': 20})\nplt.show()\n",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n(l,) = plt.plot(range(10), \"o-\", lw=5, markersize=30)\n\n# set the face color of the markers to have an alpha (transparency) of 0.2\nl.set_alpha(0.2)\n\nplt.show()\n",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n(l,) = plt.plot(range(10), \"o-\", lw=5, markersize=30)\n\n# make the border of the markers solid black\nl.set_markeredgecolor(\"black\")\n\nplt.show()\n",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n(l,) = plt.plot(range(10), \"o-\", lw=5, markersize=30)\n\n# set both line and marker colors to be solid red\nl.set_color(\"r\")\n\nplt.show()\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\nplt.plot(x, y, label=\"sin\")\n\n# rotate the x axis labels clockwise by 45 degrees\nplt.xticks(np.arange(0, 2 * np.pi + 0.1, np.pi / 2),\n           ['0', r'$\\frac{\\pi}{2}$', r'$\\pi$', r'$\\frac{3\\pi}{2}$', r'$2\\pi$'])\nplt.xlabel(\"Angle (radians)\")\nplt.ylabel(\"Sine\")\nplt.title(\"Sine Wave\")\nplt.legend()\nplt.show()\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\nplt.plot(x, y, label=\"sin\")\n\n# rotate the x axis labels counter clockwise by 45 degrees\nplt.xticks(np.arange(0, 2 * np.pi + 0.1, np.pi / 2),\n           ['0', r'$\\frac{\\pi}{2}$', r'$\\pi$', r'$\\frac{3\\pi}{2}$', r'$2\\pi$'])\nplt.xlabel(\"Angle (radians)\")\nplt.ylabel(\"Sine\")\nplt.title(\"Sine Wave\")\nplt.legend()\nplt.show()\n",
        "\nplt.xticks([0, 2 * np.pi / 3, 4 * np.pi / 3, 2 * np.pi],\n           [r'$0$', r'$\\frac{2\\pi}{3}$', r'$\\frac{4\\pi}{3}$', r'$2\\pi$'])\n",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\nsns.distplot(x, label=\"a\", color=\"0.25\")\nsns.distplot(y, label=\"b\", color=\"0.25\")\n\n# add legends\nplt.legend()\n",
        "\n\nH = np.random.randn(10, 10)\n\n# color plot of the 2d array H\nplt.imshow(H, cmap='gray')\nplt.colorbar()\nplt.show()\n",
        "\n\nH = np.random.randn(10, 10)\n\n# show the 2d array H in black and white\nplt.imshow(H, cmap='gray')\nplt.show()\n",
        "plt.xlabel(\"X\", labelpad=10, loc=\"right\")\n\n# SOLUTION END\n\nplt.plot(x, y)\nplt.show()",
        "\n\ndf = sns.load_dataset(\"planets\")\ng = sns.boxplot(x=\"method\", y=\"orbital_period\", data=df)\n\n# rotate the x axis labels by 90 degrees\nplt.setp(g.get_xticklabels(), rotation=90)\n\nplt.show()\n",
        "\nmyTitle = \"Some really really long long long title I really really need - and just can't - just can't - make it any - simply any - shorter - at all.\"\n\n# split the title into multiple lines\ntitleLines = myTitle.split()\n\n# join the lines with newline characters\nmyTitle = \"\\n\".join(titleLines)\n\n# plot the data with the title\nplt.title(myTitle)\nplt.plot(x, y)\n",
        "\ny = -2 * np.random.rand(10) + 1\n",
        "\n\nx = np.random.randn(10)\ny = x\nplt.scatter(x, y)\n\n# put x ticks at 0 and 1.5 only\nplt.xticks([0, 1.5])\nplt.xlim(0, 1.5)\n",
        "\n\nx = np.random.randn(10)\ny = x\nplt.scatter(x, y)\nplt.ylim(-1, 1)\n",
        "\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\n\nfig, ax = plt.subplots()\n\nax.fill_between(x, y, color='b', alpha=0.5)\nax.fill_between(y, z, color='r', alpha=0.5)\nax.fill_between(x, z, color='g', alpha=0.5)\n\nplt.show()\n",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n# in a scatter plot of x, y, make the points have black borders and blue face\nplt.scatter(x, y, edgecolor='black', facecolor='blue')\n\nplt.show()\n",
        "\n\ny = 2 * np.random.rand(10)\nx = np.arange(10)\n\n# make all axes ticks integers\nplt.gca().yaxis.set_major_locator(plt.MaxNLocator(integer=True))\nplt.gca().xaxis.set_major_locator(plt.MaxNLocator(integer=True))\n\nplt.plot(x, y)\nplt.show()\n",
        "\nfrom matplotlib.ticker import ScalarFormatter\n\ndata = {\n    \"reports\": [4, 24, 31, 2, 3],\n    \"coverage\": [35050800, 54899767, 57890789, 62890798, 70897871],\n}\ndf = pd.DataFrame(data)\n\n# create a new figure and axis\nfig, ax = plt.subplots()\n\n# create a bar plot\nsns.barplot(y=\"coverage\", x=\"reports\", data=df, label=\"Total\")\n\n# remove the scientific notation in the y axis ticks labels\nax.yaxis.set_major_formatter(ScalarFormatter())\n\n# show the plot\nplt.show()\n",
        "\n\ny = 2 * np.random.rand(10)\nx = np.arange(10)\nax = sns.lineplot(x=x, y=y, linestyle='--')\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 400)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# plot x vs y1 and x vs y2 in two subplots, sharing the x axis\nfig, (ax1, ax2) = plt.subplots(1, 2, sharex=True)\n\nax1.plot(x, y1)\nax1.set_title('Sine Wave')\n\nax2.plot(x, y2)\nax2.set_title('Cosine Wave')\n\nplt.show()\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 400)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# plot x vs y1 and x vs y2 in two subplots\nfig, ax = plt.subplots(2, 1, figsize=(8, 8))\nax[0].plot(x, y1)\nax[1].plot(x, y2)\n\n# remove the frames from the subplots\nfor a in ax:\n    a.spines['top'].set_visible(False)\n    a.spines['right'].set_visible(False)\n    a.spines['bottom'].set_visible(False)\n    a.spines['left'].set_visible(False)\n    a.get_xaxis().set_visible(False)\n    a.get_yaxis().set_visible(False)\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.sin(x)\ndf = pd.DataFrame({\"x\": x, \"y\": y})\nsns.lineplot(x=\"x\", y=\"y\", data=df, xlabel=None)\n",
        "\n\nx = np.arange(10)\ny = np.sin(x)\ndf = pd.DataFrame({\"x\": x, \"y\": y})\nsns.lineplot(x=\"x\", y=\"y\", data=df, xticks=[])\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n\n# show xticks and vertical grid at x positions 3 and 4\nplt.xticks([3, 4])\nplt.grid(axis='x', which='major', alpha=0.5)\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n\n# show yticks and horizontal grid at y positions 3 and 4\nax = plt.gca()\nax.axhline(y=3, color='gray', linestyle='--')\nax.axhline(y=4, color='gray', linestyle='--')\nax.set_yticks([3, 4])\nax.grid(axis='y', alpha=0.5)\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n\n# show yticks and horizontal grid at y positions 3 and 4\nplt.yticks([3, 4], ['3rd', '4th'])\nplt.grid(axis='y')\n\n# show xticks and vertical grid at x positions 1 and 2\nplt.xticks([1, 2], ['1st', '2nd'])\nplt.grid(axis='x')\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n\n# show grids\nplt.grid()\n",
        "\nplt.plot(x, y, label=\"x-y\")\nplt.legend(loc=\"lower right\")\n",
        "\n\nfig, axes = plt.subplots(ncols=2, nrows=2, figsize=(8, 6), subplot_kw={'pad': 20})\naxes = axes.flatten()\n\nfor ax in axes:\n    ax.set_ylabel(r\"$\\ln\\left(\\frac{x_a-x_b}{x_a-x_c}\\right)$\")\n    ax.set_xlabel(r\"$\\ln\\left(\\frac{x_a-x_d}{x_a-x_e}\\right)$\")\n\nplt.show()\nplt.clf()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10, 20)\nz = np.arange(10)\n\nplt.plot(x, y, label='Y')\nplt.plot(x, z, label='Z')\nplt.legend()\nplt.show()\n",
        "\nax.set_xticks(np.arange(data.shape[1]) + 0.5, minor=False)\nax.set_yticks(np.arange(data.shape[0]) + 0.5, minor=False)\nax.set_xticklabels(column_labels, minor=False)\nax.set_yticklabels(row_labels, minor=False)\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x\nplt.plot(x, y)\n\n# Label the x-axis as \"X\"\nplt.xlabel(\"X\")\n\n# Set the space between the x-axis label and the x-axis to be 20\nplt.subplots_adjust(bottom=0.2)\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x\nplt.plot(x, y)\n\n# do not show xticks for the plot\nplt.xticks([])\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x\nplt.plot(x, y)\n\n# Move the y axis ticks to the right\nplt.gca().yaxis.tick_right()\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and label y axis \"Y\"\n# Show y axis ticks on the left and y axis label on the right\nplt.plot(x, y)\nplt.gca().set_ylabel('Y')\nplt.gca().yaxis.set_ticks_position('left')\nplt.gca().yaxis.set_label_position('right')\nplt.show()\n",
        "\n\ntips = sns.load_dataset(\"tips\")\n\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind=\"reg\", color=\"g\")\nsns.distplot(tips[\"total_bill\"], color=\"b\", axlabel=\"Total Bill\")\nsns.distplot(tips[\"tip\"], color=\"b\", axlabel=\"Tip\")\nplt.show()\n",
        "\n\ntips = sns.load_dataset(\"tips\")\n\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind=\"reg\", color=\"b\", line_kws={\"color\": \"g\"})\nplt.show()\n",
        "\n\ntips = sns.load_dataset(\"tips\")\n\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind='reg', joint_kws={'scatter_kws':{'alpha':0}})\nplt.show()\n",
        "\n\ndf = pd.DataFrame(\n    {\n        \"celltype\": [\"foo\", \"bar\", \"qux\", \"woz\"],\n        \"s1\": [5, 9, 1, 7],\n        \"s2\": [12, 90, 13, 87],\n    }\n)\n\n# For data in df, make a bar plot of s1 and s1 and use celltype as the xlabel\n# Make the x-axis tick labels horizontal\nplt.bar(df[\"celltype\"], df[\"s1\"], label=\"s1\")\nplt.bar(df[\"celltype\"], df[\"s2\"], bottom=df[\"s1\"], label=\"s2\")\nplt.xticks(rotation=45, ha=\"right\")\nplt.xlabel(\"celltype\")\nplt.ylabel(\"expression\")\nplt.legend()\nplt.show()\n",
        "\n\ndf = pd.DataFrame(\n    {\n        \"celltype\": [\"foo\", \"bar\", \"qux\", \"woz\"],\n        \"s1\": [5, 9, 1, 7],\n        \"s2\": [12, 90, 13, 87],\n    }\n)\n\n# For data in df, make a bar plot of s1 and s1 and use celltype as the xlabel\n# Make the x-axis tick labels rotate 45 degrees\ndf.plot.bar(x=\"celltype\", y=[\"s1\", \"s2\"])\nplt.xticks(rotation=45)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and label the x axis as \"X\"\n# Make both the x axis ticks and the axis label red\nplt.plot(x, y)\nplt.xlabel(\"X\")\nplt.xticks(color='red')\nplt.yticks(color='red')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and label the x axis as \"X\"\n# Make the line of the x axis red\nplt.plot(x, y, label='Y')\nplt.axhline(y=0, color='r', linestyle='-')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Y over X')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x with tick font size 10 and make the x tick labels vertical\nplt.plot(x, y)\nplt.xticks(fontsize=10, rotation=90)\nplt.yticks(fontsize=10)\nplt.show()\n",
        "\n\n# create a list of x-coordinates\nx = [0, 1, 2, 3, 4]\n\n# create a list of y-coordinates\ny = [0, 1, 2, 3, 4]\n\n# create a figure and axis object\nfig, ax = plt.subplots()\n\n# plot the data points\nax.plot(x, y)\n\n# draw vertical lines at [0.22058956, 0.33088437, 2.20589566]\nax.axvline(x=0.22058956, ymin=0, ymax=1, color='r', linestyle='--')\nax.axvline(x=0.33088437, ymin=0, ymax=1, color='r', linestyle='--')\nax.axvline(x=2.20589566, ymin=0, ymax=1, color='r', linestyle='--')\n\n# show the plot\nplt.show()\n",
        "\n\nxlabels = list(\"ABCD\")\nylabels = list(\"CDEF\")\nrand_mat = numpy.random.rand(4, 4)\n\n# Plot of heatmap with data in rand_mat and use xlabels for x-axis labels and ylabels as the y-axis labels\n# Make the x-axis tick labels appear on top of the heatmap and invert the order or the y-axis labels (C to F from top to bottom)\nplt.imshow(rand_mat, cmap='hot', interpolation='nearest')\nplt.xticks(range(len(xlabels)), xlabels, rotation=90)\nplt.yticks(range(len(ylabels)), ylabels[::-1])\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Heatmap of Random Data')\nplt.show()\n",
        "\nfrom matplotlib import rc\n\nrc(\"mathtext\", default=\"regular\")\n\ntime = np.arange(10)\ntemp = np.random.random(10) * 30\nSwdown = np.random.random(10) * 100 - 10\nRn = np.random.random(10) * 100 - 10\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(time, Swdown, \"-\", label=\"Swdown\")\nax.plot(time, Rn, \"-\", label=\"Rn\")\nax2 = ax.twinx()\nax2.plot(time, temp, \"-r\", label=\"temp\")\nax.legend(loc=0)\nax.grid()\nax.set_xlabel(\"Time (h)\")\nax.set_ylabel(r\"Radiation ($MJ\\,m^{-2}\\,d^{-1}$)\")\nax2.set_ylabel(r\"Temperature ($^\\circ$C)\")\nax2.set_ylim(0, 35)\nax.set_ylim(-20, 100)\nplt.show()\nplt.clf()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# make two side-by-side subplots and and in each subplot, plot y over x\nfig, axes = plt.subplots(1, 2, figsize=(10, 5))\n\n# plot y over x in the first subplot\naxes[0].plot(x, y)\naxes[0].set_title(\"Y\")\n\n# plot y over x in the second subplot\naxes[1].plot(y, x)\naxes[1].set_title(\"X\")\n\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n]\n\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=df, s=30)\nplt.show()\n",
        "\n\na = [2.56422, 3.77284, 3.52623]\nb = [0.15, 0.3, 0.45]\nc = [58, 651, 393]\n\n# make scatter plot of a over b and annotate each data point with correspond numbers in c\nplt.scatter(b, a, c=c, cmap='coolwarm')\nfor i, txt in enumerate(c):\n    plt.annotate(txt, (b[i], a[i]))\n\nplt.xlabel('b')\nplt.ylabel('a')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart and label the line \"y over x\"\nplt.plot(x, y, label='y over x')\n\n# Show legend of the plot and give the legend box a title\nplt.legend(title='Legend')\n\n# Show the plot\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart and label the line \"y over x\"\nplt.plot(x, y, label='y over x')\n\n# Show legend of the plot and give the legend box a title  \"Legend\"\nplt.legend(title='Legend', loc='upper left')\n\n# Bold the legend title\nplt.setp(plt.gca().get_legend().get_title(), fontsize='18')\n\n# Show the plot\nplt.show()\n",
        "\n\nx = np.random.rand(10)\ny = np.random.rand(10)\n\n# Make a histogram of x and show outline of each bar in the histogram\nplt.hist(x, edgecolor='black', linewidth=1.2)\n\n# Show the plot\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make two subplots. Make the first subplot three times wider than the second subplot but they should have the same height.\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))\n\n# Plot the data in the first subplot.\nax1.plot(x, y)\n\n# Plot the data in the second subplot.\nax2.plot(y, x)\n\n# Set the x and y labels for both subplots.\nax1.set_xlabel('x')\nax1.set_ylabel('y')\nax2.set_xlabel('y')\nax2.set_ylabel('x')\n\n# Show the plot.\nplt.show()\n",
        "\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nbins = np.linspace(-1, 1, 100)\n\n# Plot two histograms of x and y on a single chart with matplotlib\n# Set the transparency of the histograms to be 0.5\nplt.hist(x, bins=bins, alpha=0.5, label='x')\nplt.hist(y, bins=bins, alpha=0.5, label='y')\nplt.legend()\nplt.show()\n",
        "\n\nx = np.random.rand(10)\ny = np.random.rand(10)\n\n# Plot a grouped histogram of x and y on a single chart with matplotlib\nfig, ax = plt.subplots()\nax.hist([x, y], stacked=True)\nax.set_xlabel('Value')\nax.set_ylabel('Frequency')\nax.legend(['x', 'y'])\nplt.show()\n",
        "\n\na, b = 1, 1\nc, d = 3, 4\n\n# draw a line that pass through (a, b) and (c, d)\n# do not just draw a line segment\n# set the xlim and ylim to be between 0 and 5\n\nplt.plot([a, c], [b, d], 'k')\nplt.plot([a, c], [b, d], 'ko')\nplt.plot([a, c], [b, d], 'k--')\nplt.plot([a, c], [b, d], 'k-')\n\nplt.xlim(0, 5)\nplt.ylim(0, 5)\n\nplt.show()\n",
        "\n\nx = np.random.random((10, 10))\ny = np.random.random((10, 10))\n\n# make two colormaps with x and y and put them into different subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\n# plot the colormaps\nim1 = ax1.imshow(x, cmap='viridis')\nim2 = ax2.imshow(y, cmap='plasma')\n\n# create a colorbar for each subplot\ncbar1 = fig.colorbar(im1, ax=ax1)\ncbar2 = fig.colorbar(im2, ax=ax2)\n\n# set the titles for each subplot\nax1.set_title('Colormap 1')\nax2.set_title('Colormap 2')\n\n# set the x and y labels for each subplot\nax1.set_xlabel('x-axis')\nax1.set_ylabel('y-axis')\nax2.set_xlabel('x-axis')\nax2.set_ylabel('y-axis')\n\nplt.show()\n",
        "\n\nx = np.random.random((10, 2))\n\n# Plot each column in x as an individual line and label them as \"a\" and \"b\"\nfor i in range(x.shape[1]):\n    plt.plot(x[:, i], label=f\"Column {i}\")\n\nplt.xlabel(\"Index\")\nplt.ylabel(\"Value\")\nplt.legend()\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nz = np.arange(10)\na = np.arange(10)\n\n# plot y over x and z over a in two different subplots\n# Set \"Y and Z\" as a main title above the two subplots\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nax1.plot(x, y)\nax1.set_title('Y over X')\n\nax2.plot(a, z)\nax2.set_title('Z over A')\n\nfig.suptitle('Y and Z')\nplt.show()\n",
        "\n\npoints = [(3, 5), (5, 10), (10, 150)]\n\n# plot a line plot for points in points.\n# Make the y-axis log scale\nx = [p[0] for p in points]\ny = [p[1] for p in points]\nplt.plot(x, y)\nplt.yscale('log')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x\nplt.plot(x, y)\nplt.title('y over x', fontsize=20)\nplt.xlabel('x', fontsize=18)\nplt.ylabel('y', fontsize=16)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\nf = plt.figure()\nax = f.add_subplot(111)\n\n# plot y over x, show tick labels (from 1 to 10)\nax.plot(x, y)\nax.set_xticks(np.arange(1, 11))\nax.set_yticks(np.arange(1, 11))\nax.set_xticklabels(np.arange(1, 11))\nax.set_yticklabels(np.arange(1, 11))\n\n# SOLUTION END\n",
        "\n\nlines = [[(0, 1), (1, 1)], [(2, 3), (3, 3)], [(1, 2), (1, 3)]]\nc = np.array([(1, 0, 0, 1), (0, 1, 0, 1), (0, 0, 1, 1)])\n\n# Plot line segments according to the positions specified in lines\n# Use the colors specified in c to color each line segment\nfor i in range(len(lines)):\n    x = [lines[i][0][0], lines[i][1][0]]\n    y = [lines[i][0][1], lines[i][1][1]]\n    plt.plot(x, y, c=c[i])\n\nplt.show()\n",
        "\n\nx = np.arange(0, 1000, 50)\ny = np.arange(0, 1000, 50)\n\n# plot y over x on a log-log plot\n# mark the axes with numbers like 1, 10, 100. do not use scientific notation\n\nplt.loglog(x, y)\nplt.xticks([1, 10, 100], [1, 10, 100])\nplt.yticks([1, 10, 100], [1, 10, 100])\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('y over x on a log-log plot')\nplt.show()\n",
        "\ndf.plot(subplots=True)\nplt.show()\n",
        "\n\ndata = [1000, 1000, 5000, 3000, 4000, 16000, 2000]\n\n# Make a histogram of data and renormalize the data to sum up to 1\nhist, bins = np.histogram(data, bins=np.arange(0, max(data)+1, 1000))\nhist = hist / sum(hist)\n\n# Format the y tick labels into percentage and set y tick labels as 10%, 20%, etc.\nplt.bar(bins[:-1], hist, width=1000, align='edge')\nplt.yticks(np.arange(0, 1.1, 0.1))\nplt.ylim(0, 1)\nplt.ylabel('Percentage')\nplt.xlabel('Value')\nplt.xticks(bins[:-1], bins[:-1])\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line plot\n# Show marker on the line plot. Make the marker have a 0.5 transparency but keep the lines solid.\nplt.plot(x, y, marker='o', linestyle='solid', alpha=0.5)\n\n# Add title and axis labels\nplt.title('Line Plot')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\na = np.arange(10)\nz = np.arange(10)\n\n# Plot y over x and a over z in two side-by-side subplots.\n# Label them \"y\" and \"a\" and make a single figure-level legend using the figlegend function\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nax1.plot(x, y, label='y')\nax1.set_xlabel('x')\nax1.set_ylabel('y')\nax1.legend()\n\nax2.plot(z, a, label='a')\nax2.set_xlabel('z')\nax2.set_ylabel('a')\nax2.legend()\n\nfig.legend(['y', 'a'], loc='upper center', ncol=2)\n\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n]\n\n# Make 2 subplots.\n# In the first subplot, plot a seaborn regression plot of \"bill_depth_mm\" over \"bill_length_mm\"\n# In the second subplot, plot a seaborn regression plot of \"flipper_length_mm\" over \"bill_length_mm\"\n# Do not share y axix for the subplots\n\nfig, axes = plt.subplots(1, 2, figsize=(12, 6))\n\nsns.regplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=df, ax=axes[0])\nsns.regplot(x=\"bill_length_mm\", y=\"flipper_length_mm\", data=df, ax=axes[1])\n\naxes[0].set_ylabel(\"\")\naxes[1].set_ylabel(\"\")\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nfig, ax = plt.subplots(1, 1)\nplt.xlim(1, 10)\nplt.xticks(range(1, 10))\nax.plot(y, x)\n\n# change the second x axis tick label to \"second\" but keep other labels in numerical\nax.set_xticklabels(['first'] + [''] * 8 + ['second'])\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x\nplt.plot(x, y, label=r'$\\lambda$')\n\n# Show legend and use the greek letter lambda as the legend label\nplt.legend()\n\n# Show the plot\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(y, x)\nplt.xticks(range(0, 10, 2))\n\n# Add extra ticks [2.1, 3, 7.6] to existing xticks\nplt.xticks(np.append(plt.xticks()[0], [2.1, 3, 7.6]))\n\nplt.show()\n",
        "\n\nx = np.arange(2010, 2020)\ny = np.arange(10)\nplt.plot(x, y)\n\n# Rotate the xticklabels to -60 degree. Set the xticks horizontal alignment to left.\nplt.xticks(rotation=-60, ha='left')\n\nplt.show()\n",
        "\n\nx = np.arange(2010, 2020)\ny = np.arange(10)\nplt.plot(x, y)\n\nplt.yticks(rotation=-60)\nplt.xticks(verticalalignment='top')\n\nplt.show()\n",
        "\n\nx = np.arange(2010, 2020)\ny = np.arange(10)\nplt.plot(x, y)\n\n# Set the transparency of xtick labels to be 0.5\nplt.setp(plt.gca().get_xticklabels(), alpha=0.5)\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(x, y)\n\n# Remove the margin before the first xtick but use greater than zero margin for the yaxis\nplt.margins(x=0.1, y=0.1)\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\nfig, ax = plt.subplots()\nax.plot(x, y)\n\n# Remove the margin before the first ytick\nax.spines['left'].set_visible(False)\n\n# Set the margin for the x-axis\nax.set_xmargin(0.1)\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# make a two columns and one row subplots. Plot y over x in each subplot.\n# Give the plot a global title \"Figure\"\n\nfig, axes = plt.subplots(1, 2, figsize=(10, 5))\n\naxes[0].plot(x, y)\naxes[0].set_title('Subplot 1')\n\naxes[1].plot(y, x)\naxes[1].set_title('Subplot 2')\n\nfig.suptitle('Figure')\nplt.show()\n",
        "\n\nvalues = [[1, 2], [3, 4]]\ndf = pd.DataFrame(values, columns=[\"Type A\", \"Type B\"], index=[\"Index 1\", \"Index 2\"])\n\n# Plot values in df with line chart\ndf.plot(kind=\"line\", xlabel=\"X\", ylabel=\"Y\")\n\n# Show the plot\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make a scatter plot with x and y\nplt.scatter(x, y, marker='|', hatch='//', edgecolor='black')\n\n# Add a vertical line at x=5\nplt.axvline(x=5, color='black', linestyle='--')\n\n# Add a horizontal line at y=5\nplt.axhline(y=5, color='black', linestyle='--')\n\n# Add a title and axis labels\nplt.title('Scatter Plot with Vertical and Horizontal Lines')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Show the plot\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make a scatter plot with x and y and remove the edge of the marker\n# Use vertical line hatch for the marker\nplt.scatter(x, y, marker='|', edgecolor='none', hatch='//')\n\n# Add a vertical line at x=5\nplt.axvline(x=5, color='black', linestyle='--')\n\n# Add a horizontal line at y=5\nplt.axhline(y=5, color='black', linestyle='--')\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make a scatter plot with x and y\n# Use star hatch for the marker\nplt.scatter(x, y, marker='*', hatch='//')\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make a scatter plot with x and y and set marker size to be 100\n# Combine star hatch and vertical line hatch together for the marker\nplt.scatter(x, y, s=100, marker='*', hatch='//', edgecolor='black')\n\n# Add a vertical line at x=5\nplt.axvline(x=5, color='black', linestyle='--')\n\n# Add a horizontal line at y=5\nplt.axhline(y=5, color='black', linestyle='--')\n\nplt.show()\n",
        "plt.imshow(data, cmap='hot', interpolation='nearest')\nplt.axis([0, 10, 0, 10])\nplt.colorbar()\nplt.show()\n\n# SOLUTION END",
        "\n\nx = np.linspace(0.1, 2 * np.pi, 41)\ny = np.exp(np.sin(x))\n\n# make a stem plot of y over x and set the orientation to be horizontal\nplt.stem(x, y, linefmt='C0-', markerfmt='C0o', basefmt='C0-')\nplt.xticks([])\nplt.yticks([])\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Stem Plot of y over x')\nplt.show()\n",
        "\n\nd = {\"a\": 4, \"b\": 5, \"c\": 7}\nc = {\"a\": \"red\", \"c\": \"green\", \"b\": \"blue\"}\n\n# Make a bar plot using data in `d`. Use the keys as x axis labels and the values as the bar heights.\n# Color each bar in the plot by looking up the color in colors\nplt.bar(range(len(d)), list(d.values()), align='center', color=[c[k] for k in d.keys()])\nplt.xticks(range(len(d)), list(d.keys()))\nplt.show()\n",
        "\n\n# Data\nx = [1, 2, 3, 4, 5]\ny = [2, 3, 4, 5, 6]\n\n# Plot the data\nplt.plot(x, y, label='Data')\n\n# Add a vertical line at x=3\nplt.axvline(x=3, color='r', linestyle='--', label='cutoff')\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()\n",
        "\n\nlabels = [\"a\", \"b\"]\nheight = [3, 4]\n\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111, projection='polar')\nax.bar(labels, height)\nax.set_xticklabels(labels)\nax.set_title(\"Bar Chart\")\nplt.show()\n",
        "\n\nl = [\"a\", \"b\", \"c\"]\ndata = [225, 90, 50]\n\n# Make a donut plot of using `data` and use `l` for the pie labels\n# Set the wedge width to be 0.4\nplt.pie(data, labels=l, wedgeprops={\"width\": 0.4})\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and show blue dashed grid lines\nplt.plot(x, y, 'b--')\nplt.grid(True, which='both', color='blue', linestyle='--')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x\nplt.plot(x, y)\n\n# Turn minor ticks on and show gray dashed minor grid lines\nplt.minorticks_on()\nplt.grid(which='minor', linestyle='--', color='gray')\n\n# Do not show any major grid lines\nplt.grid(which='major', linestyle='--', color='gray', alpha=0.5)\n\nplt.show()\n",
        "\n\nlabels = [\"Walking\", \"Talking\", \"Sleeping\", \"Working\"]\nsizes = [23, 45, 12, 20]\ncolors = [\"red\", \"blue\", \"green\", \"yellow\"]\n\n# Make a pie chart with data in `sizes` and use `labels` as the pie labels and `colors` as the pie color.\n# Bold the pie labels\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\nplt.title(\"My Daily Activities\")\nplt.axis('equal')\nplt.legend(labels, loc='upper right', bbox_to_anchor=(1.1, 1.05))\nplt.show()\n",
        "\n\nlabels = [\"Walking\", \"Talking\", \"Sleeping\", \"Working\"]\nsizes = [23, 45, 12, 20]\ncolors = [\"red\", \"blue\", \"green\", \"yellow\"]\n\n# Make a pie chart with data in `sizes` and use `labels` as the pie labels and `colors` as the pie color.\n# Bold the pie labels\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\nplt.title(\"My Daily Activities\")\nplt.axis('equal')\nplt.legend(labels, loc='upper right', bbox_to_anchor=(1.1, 1.05))\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart but use transparent marker with non-transparent edge\nplt.plot(x, y, marker='o', markerfacecolor='none', markeredgecolor='black', alpha=0.5)\n\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n]\n\nsns.distplot(df[\"bill_length_mm\"], color=\"blue\")\n\n# Plot a vertical line at 55 with green color\nplt.axvline(x=55, color=\"green\")\n\nplt.show()\n",
        "\n\n# Specify the values of blue bars (height)\nblue_bar = (23, 25, 17)\n# Specify the values of orange bars (height)\norange_bar = (19, 18, 14)\n\n# Generate the positions of the bars on the x-axis\nx_pos = np.arange(len(blue_bar))\n\n# Plot the blue and orange bars side-by-side\nplt.bar(x_pos, blue_bar, color='blue', width=0.35, label='Blue Bar')\nplt.bar(x_pos+0.35, orange_bar, color='orange', width=0.35, label='Orange Bar')\n\n# Add labels and title to the plot\nplt.xlabel('Category')\nplt.ylabel('Value')\nplt.title('Blue and Orange Bar Plot')\n\n# Add a legend to the plot\nplt.legend()\n\n# Display the plot\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\na = np.arange(10)\n\n# Make two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\n# Plot y over x in the first subplot and plot z over a in the second subplot\nax1.plot(x, y, label='y')\nax2.plot(a, z, label='z')\n\n# Label each line chart and put them into a single legend on the first subplot\nax1.legend()\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.linspace(0, 1, 10)\n\n# Plot y over x with a scatter plot\n# Use the \"Spectral\" colormap and color each data point based on the y-value\nplt.scatter(x, y, c=y, cmap='Spectral')\n\n# Add labels and title to the plot\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('y over x')\n\n# Show the plot\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x\n# use a tick interval of 1 on the a-axis\nplt.plot(x, y)\nplt.xticks(np.arange(10))\nplt.yticks(np.arange(10))\nplt.grid()\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"penguins\")[[\"bill_length_mm\", \"species\", \"sex\"]]\n\n# Use seaborn factorpot to plot multiple barplots of \"bill_length_mm\" over \"sex\" and separate into different subplot columns by \"species\"\n# Do not share y axis across subplots\n\nsns.factorplot(x=\"sex\", y=\"bill_length_mm\", hue=\"species\", col=\"species\", data=df, kind=\"bar\", sharey=False)\n\nplt.show()\n",
        "\nfrom matplotlib.patches import Circle\n\n# create a circle patch\ncircle = Circle((0.5, 0.5), radius=0.2)\n\n# add the circle to the current axis\nax = plt.gca()\nax.add_patch(circle)\n\n# set the axis limits to include the circle\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\n\n# show the plot\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\nplt.plot(x, y)\nplt.title(r'$\\phi$')\nplt.title(r'$\\bf{\\phi}$', fontsize=16)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x with a legend of \"Line\"\n# Adjust the spacing between legend markers and labels to be 0.1\nplt.plot(x, y, label='Line')\nplt.legend(loc='upper left', bbox_to_anchor=(1, 1), ncol=1, borderaxespad=0, frameon=False, handlelength=1, handletextpad=0.1)\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x with a legend of \"Line\"\n# Adjust the length of the legend handle to be 0.3\nplt.plot(x, y, label='Line')\nplt.legend(handlelength=0.3)\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(x, y, label=\"Line\")\nplt.plot(y, x, label=\"Flipped\")\n\n# Show a two columns legend of this plot\nplt.legend(ncol=2)\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(x, y, marker=\"*\", label=\"Line\")\nplt.plot(x, y+1, marker=\"o\", label=\"Markers\")\n\n# Show a legend of this plot and show two markers on the line\nplt.legend()\nplt.show()\n",
        "\n\ndata = np.random.random((10, 10))\n\n# plot the 2d matrix data with a colorbar\nplt.imshow(data)\nplt.colorbar()\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x. Give the plot a title \"Figure 1\". bold the word \"Figure\" in the title but do not bold \"1\"\n\nplt.plot(x, y)\nplt.title(\"Figure 1\")\nplt.xlabel(\"x-axis\")\nplt.ylabel(\"y-axis\")\nplt.show()\n",
        "\nsns.pairplot(df, x_vars=[\"x\"], y_vars=[\"y\"], hue=\"id\", legend=False)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and invert the x axis\nplt.plot(x, y)\nplt.gca().invert_xaxis()\nplt.show()\n",
        "\n\nx = np.arange(11)\ny = np.arange(11)\nplt.xlim(0, 10)\nplt.ylim(0, 10)\nplt.axis('off')\nplt.scatter(x, y)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot a scatter plot with values in x and y\nplt.scatter(x, y, color='black', edgecolor='black')\n\n# Plot the data points to have red inside and have black border\nplt.scatter(x, y, color='red', edgecolor='black')\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\nfig, axes = plt.subplots(2, 2, figsize=(15, 15))\n\nfor i in range(2):\n    for j in range(2):\n        axes[i, j].plot(x, y)\n\nplt.show()\n",
        "\n\nx = np.random.rand(100) * 10\n\n# Make a histogram of x\nplt.hist(x, bins=5, range=(0, 10), width=2)\n\n# Add title and labels\nplt.title('Histogram of x')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\n\n# Show the plot\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(1, 11)\nerror = np.random.random(y.shape)\n\nplt.errorbar(x, y, yerr=error, fmt='o', ecolor='gray', capsize=3)\nplt.fill_between(x, y-error, y+error, alpha=0.2)\nplt.show()\n",
        "\n\nxvec = np.linspace(-5.0, 5.0, 100)\nx, y = np.meshgrid(xvec, xvec)\nz = -np.hypot(x, y)\n\nfig, ax = plt.subplots()\ncs = ax.contourf(x, y, z)\n\n# draw x=0 and y=0 axis in my contour plot with white color\nax.axhline(y=0, color='white')\nax.axvline(x=0, color='white')\n\n# add colorbar to the plot\ncbar = fig.colorbar(cs)\n\nplt.show()\n",
        "\nax.errorbar(box_position, box_height, yerr=box_errors, color=c, fmt=\"o\")\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nz = np.arange(10)\na = np.arange(10)\n\n# Plot y over x and z over a in two side-by-side subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nax1.plot(x, y, label='Y')\nax1.set_title('Y')\nax1.set_xlabel('X')\nax1.set_ylabel('Y')\n\nax2.plot(a, z, label='Z')\nax2.set_title('Z')\nax2.set_xlabel('A')\nax2.set_ylabel('Z')\n\nfig.suptitle('Y vs Z')\nax2.set_title('Z', y=1.05)\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(5,5))\n\nfor i in range(2):\n    for j in range(2):\n        axes[i,j].plot(x, y)\n        axes[i,j].set_xticks(np.arange(10))\n        axes[i,j].set_yticks(np.arange(10))\n        axes[i,j].set_xlabel('x-axis')\n        axes[i,j].set_ylabel('y-axis')\n        plt.tight_layout()\n",
        "\n\nd = np.random.random((10, 10))\n\nplt.matshow(d, cmap='gray')\nplt.axis('off')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.gcf().set_size_inches(8, 8)\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n].head(10)\n\n# Plot df as a matplotlib table. Set the bbox of the table to [0, 0, 1, 1]\nfig, ax = plt.subplots()\nax.axis('off')\nax.table(cellText=df.values, bbox=[0, 0, 1, 1])\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart. Show x axis tick labels on both top and bottom of the figure.\nplt.plot(x, y)\nplt.xticks(np.arange(11))\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.tick_params(axis='x', labelbottom=True, labeltop=True)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart. Show x axis ticks on both top and bottom of the figure.\nplt.plot(x, y)\nplt.xticks(np.arange(11))\nplt.grid(axis='both')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart. Show x axis tick labels but hide the x axis ticks\nplt.plot(x, y)\nplt.xticks(x)\nplt.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=True)\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"exercise\")\n\n# Make catplots of scatter plots by using \"time\" as x, \"pulse\" as y, \"kind\" as hue, and \"diet\" as col\nsns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\", s=10)\n\n# Change the subplots titles to \"Group: Fat\" and \"Group: No Fat\"\nplt.subplot(2, 1, 1)\nplt.title(\"Group: Fat\")\nplt.subplot(2, 1, 2)\nplt.title(\"Group: No Fat\")\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"exercise\")\n\n# Make catplots of scatter plots by using \"time\" as x, \"pulse\" as y, \"kind\" as hue, and \"diet\" as col\nsns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\")\n\n# Change the xlabels to \"Exercise Time\" and \"Exercise Time\"\nplt.xlabel(\"Exercise Time\")\nplt.ylabel(\"Exercise Pulse\")\n",
        "\nsns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\", sharey=False)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x with label \"y\"\nplt.plot(x, y, label='y')\n\n# make the legend fontsize 8\nplt.legend(fontsize=8)\n\n# show the plot\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x with figsize (5, 5) and dpi 300\nplt.plot(x, y, figsize=(5, 5), dpi=300)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x with label \"y\" and show legend\nplt.plot(x, y, label='y')\nplt.legend(frameon=False)\n\n# Remove the border of frame of legend\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['bottom'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\n\nplt.show()\n",
        "\n\nt = linspace(0, 2 * math.pi, 400)\na = sin(t)\nb = cos(t)\nc = a + b\n\n# Create a figure with 1 row and 3 columns\nfig, axes = plt.subplots(1, 3, figsize=(12, 4))\n\n# Plot a, b, and c in the first row\naxes[0].plot(t, a, label='a')\naxes[0].plot(t, b, label='b')\naxes[0].plot(t, c, label='c')\naxes[0].set_xlabel('t')\naxes[0].set_ylabel('y')\naxes[0].legend()\n\n# Plot a, b, and c in the second row\naxes[1].plot(t, a, label='a')\naxes[1].plot(t, b, label='b')\naxes[1].plot(t, c, label='c')\naxes[1].set_xlabel('t')\naxes[1].set_ylabel('y')\naxes[1].legend()\n\n# Plot a, b, and c in the third row\naxes[2].plot(t, a, label='a')\naxes[2].plot(t, b, label='b')\naxes[2].plot(t, c, label='c')\naxes[2].set_xlabel('t')\naxes[2].set_ylabel('y')\naxes[2].legend()\n\n# Show the figure\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"penguins\")[[\"bill_length_mm\", \"species\", \"sex\"]]\n\nsns.stripplot(x=\"sex\", y=\"bill_length_mm\", hue=\"species\", data=df, jitter=True, dodge=True, alpha=0.5, zorder=1)\n\nplt.legend(loc=None)\n\nplt.show()\n",
        "\nsns.set_style(\"whitegrid\")\n\ng = sns.FacetGrid(df, row=\"b\", aspect=1.5, height=2.5)\ng.map(sns.pointplot, \"a\", \"c\", order=range(1, 31, 2), ci=None, palette=\"deep\")\n\nfor ax in g.axes.flat:\n    ax.set_xticks(range(1, 31, 2))\n    ax.set_xticklabels(range(1, 31, 2))\n\nplt.show()\n",
        "\nfrom mpl_toolkits.mplot3d import Axes3D\n\nx = np.random.random(10)\ny = np.random.random(10)\nz = np.random.random(10)\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nax.scatter(x, y, z)\n\nax.view_init(100, 50)\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart and name axis with labels (\"x\" and \"y\")\n# Hide tick labels but keep axis labels\nplt.plot(x, y)\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.xticks([])\nplt.yticks([])\nplt.show()\n",
        "\n\nx = np.random.random((10, 10))\nfrom matplotlib import gridspec\n\nnrow = 2\nncol = 2\n\nfig = plt.figure(figsize=(ncol + 1, nrow + 1))\n\n# Make a 2x2 subplots with fig and plot x in each subplot as an image\n# Remove the space between each subplot and make the subplot adjacent to each other\n# Remove the axis ticks from each subplot\ngs = gridspec.GridSpec(nrow, ncol, wspace=0.0, hspace=0.0, top=1.-0.5/(nrow+1), bottom=0.5/(nrow+1), left=0.5/(ncol+1), right=1-0.5/(ncol+1))\n\nfor i in range(nrow):\n    for j in range(ncol):\n        ax = plt.subplot(gs[i, j])\n        ax.imshow(x, cmap='gray')\n        ax.set_xticks([])\n        ax.set_yticks([])\n\nplt.show()\n"
    ]
}