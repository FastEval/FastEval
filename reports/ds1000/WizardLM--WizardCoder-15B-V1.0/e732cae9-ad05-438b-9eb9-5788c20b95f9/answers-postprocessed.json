{
    "Matplotlib": [
        "\n\nx = 10 * np.random.randn(10)\ny = x\n\n# plot x vs y, label them using \"x-y\" in the legend\nplt.plot(x, y, label='x-y')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend()\nplt.show()\n",
        "\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nplt.scatter(x, y)\n\n# how to turn on minor ticks on y axis only\nplt.minorticks_on()\nplt.grid(which='minor', axis='y')\n",
        "\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nplt.scatter(x, y)\n\n# how to turn on minor ticks\nplt.minorticks_on()\n",
        "\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nplt.scatter(x, y)\n\n# how to turn on minor ticks on x axis only\nplt.gca().xaxis.set_minor_locator(plt.MultipleLocator(0.1))\n",
        "\n\nx = np.arange(10)\n\n# draw a line (with random y) for each different line style\nfor style in ['-', '--', '-.', ':']:\n    plt.plot(x, np.random.rand(10), style)\n\nplt.show()\n",
        "\n\nx = np.arange(10)\n\n# draw a line (with random y) for each different line style\nfor style in ['-', '--', '-.', ':']:\n    plt.plot(x, np.random.rand(10), style)\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\n\n# line plot x and y with a thin diamond marker\nsns.lineplot(x=x, y=y, marker='d', linewidth=0.5)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\n\n# line plot x and y with a thick diamond marker\nsns.lineplot(x=x, y=y, marker='D', linewidth=3)\nplt.show()\n",
        "\n\nsns.set_style(\"whitegrid\")\ntips = sns.load_dataset(\"tips\")\nax = sns.boxplot(x=\"day\", y=\"total_bill\", data=tips)\n\n# set the y axis limit to be 0 to 40\nax.set_ylim(0, 40)\n",
        "\n\nx = 10 * np.random.randn(10)\n\nplt.plot(x)\n\n# highlight in red the x range 2 to 4\nplt.axvspan(2, 4, alpha=0.2, color='red')\n",
        "\n\n# draw a full line from (0,0) to (1,2)\nplt.plot([0, 1], [0, 2])\nplt.show()\n",
        "\n\n# draw a line segment from (0,0) to (1,2)\nplt.plot([0, 1], [0, 2], color='red', linewidth=2)\nplt.show()\n",
        "\n\nseaborn.set(style=\"ticks\")\n\nnumpy.random.seed(0)\nN = 37\n_genders = [\"Female\", \"Male\", \"Non-binary\", \"No Response\"]\ndf = pandas.DataFrame(\n    {\n        \"Height (cm)\": numpy.random.uniform(low=130, high=200, size=N),\n        \"Weight (kg)\": numpy.random.uniform(low=30, high=100, size=N),\n        \"Gender\": numpy.random.choice(_genders, size=N),\n    }\n)\n\n# make seaborn relation plot and color by the gender field of the dataframe df\nsns.relplot(x=\"Height (cm)\", y=\"Weight (kg)\", hue=\"Gender\", data=df)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = 2 * np.random.rand(10)\n\n# draw a regular matplotlib style plot using seaborn\nsns.set_style(\"whitegrid\")\nsns.lineplot(x=x, y=y)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.sin(x)\n\n# draw a line plot of x vs y using seaborn and pandas\nsns.lineplot(x=x, y=y)\nplt.show()\n",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n# in plt.plot(x, y), use a plus marker and give it a thickness of 7\nplt.plot(x, y, marker='+', linewidth=7)\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\n\nplt.plot(x, y, label=\"sin\")\n\n# show legend and set the font to size 20\nplt.legend(fontsize=20)\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\n\n# set legend title to xyz and set the title font to size 20\nplt.plot(x, y)\nplt.legend(title='xyz', prop={'size': 20})\nplt.title('Cosine Wave', fontsize=20)\nplt.show()\n",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n(l,) = plt.plot(range(10), \"o-\", lw=5, markersize=30)\n\n# set the face color of the markers to have an alpha (transparency) of 0.2\nl.set_facecolor((0, 0, 0, 0.2))\n",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n(l,) = plt.plot(range(10), \"o-\", lw=5, markersize=30)\n\n# make the border of the markers solid black\nl.set_markeredgecolor('black')\n",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n(l,) = plt.plot(range(10), \"o-\", lw=5, markersize=30)\n\n# set both line and marker colors to be solid red\nl.set_color(\"r\")\nl.set_markerfacecolor(\"r\")\nl.set_markeredgecolor(\"r\")\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\nplt.plot(x, y, label=\"sin\")\n\n# rotate the x axis labels clockwise by 45 degrees\nplt.xticks(np.arange(0, 2 * np.pi + 0.1, np.pi / 2),\n           ['0', r'$\\frac{\\pi}{2}$', r'$\\pi$', r'$\\frac{3\\pi}{2}$', r'$2\\pi$'])\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Sine Wave')\nplt.legend()\nplt.show()\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\nplt.plot(x, y, label=\"sin\")\n\n# rotate the x axis labels counter clockwise by 45 degrees\nplt.xticks(np.arange(0, 2 * np.pi + 0.1, np.pi / 2),\n           ['0', r'$\\frac{\\pi}{2}$', r'$\\pi$', r'$\\frac{3\\pi}{2}$', r'$2\\pi$'])\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Sine Wave')\nplt.legend()\nplt.show()\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\nplt.plot(x, y, label=\"sin\")\n\n# put a x axis ticklabels at 0, 2, 4...\nplt.xticks(np.arange(0, 2 * np.pi + 0.1, 2 * np.pi / 5))\n",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\nsns.distplot(x, label=\"a\", color=\"0.25\")\nsns.distplot(y, label=\"b\", color=\"0.25\")\n\n# add legends\nplt.legend()\n",
        "\n\nH = np.random.randn(10, 10)\n\n# color plot of the 2d array H\nplt.imshow(H, cmap='gray')\nplt.colorbar()\nplt.show()\n",
        "\n\nH = np.random.randn(10, 10)\n\n# show the 2d array H in black and white\nplt.imshow(H, cmap='gray')\nplt.show()\n",
        "\nplt.xlabel(\"X\", loc=\"right\")\n",
        "\n\ndf = sns.load_dataset(\"planets\")\ng = sns.boxplot(x=\"method\", y=\"orbital_period\", data=df)\n\n# rotate the x axis labels by 90 degrees\ng.set_xticklabels(g.get_xticklabels(), rotation=90)\n",
        "\n\ny = 2 * np.random.rand(10)\nx = np.arange(10)\nplt.plot(x, y)\nmyTitle = \"Some really really long long long title I really really need - and just can't - just can't - make it any - simply any - shorter - at all.\"\n\n# fit a very long title myTitle into multiple lines\nplt.title(myTitle, wrap=True)\n",
        "\n\ny = 2 * np.random.rand(10)\nx = np.arange(10)\n\n# make the y axis go upside down\ny = y[::-1]\n",
        "\n\nx = np.random.randn(10)\ny = x\nplt.scatter(x, y)\n\n# put x ticks at 0 and 1.5 only\nplt.xticks([0, 1.5])\n",
        "\n\nx = np.random.randn(10)\ny = x\nplt.scatter(x, y)\n\n# put y ticks at -1 and 1 only\nplt.ylim(-1, 1)\n",
        "\n\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\n\n# plot x, then y then z, but so that x covers y and y covers z\nplt.plot(x, label='x')\nplt.plot(y, label='y')\nplt.plot(z, label='z')\nplt.legend()\nplt.show()\n",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n# in a scatter plot of x, y, make the points have black borders and blue face\nplt.scatter(x, y, edgecolor='black', facecolor='blue')\nplt.show()\n",
        "\n\ny = 2 * np.random.rand(10)\nx = np.arange(10)\n\n# make all axes ticks integers\nplt.gca().xaxis.set_major_locator(plt.MaxNLocator(integer=True))\nplt.gca().yaxis.set_major_locator(plt.MaxNLocator(integer=True))\n",
        "\n\ndata = {\n    \"reports\": [4, 24, 31, 2, 3],\n    \"coverage\": [35050800, 54899767, 57890789, 62890798, 70897871],\n}\ndf = pd.DataFrame(data)\nsns.factorplot(y=\"coverage\", x=\"reports\", kind=\"bar\", data=df, label=\"Total\")\n\n# do not use scientific notation in the y axis ticks labels\nplt.ticklabel_format(style='plain', axis='y')\n",
        "\nax = sns.lineplot(x=x, y=y, dashes=True)\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 400)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# plot x vs y1 and x vs y2 in two subplots, sharing the x axis\nfig, (ax1, ax2) = plt.subplots(1, 2, sharex=True)\nax1.plot(x, y1)\nax1.set_title('y1')\nax2.plot(x, y2)\nax2.set_title('y2')\nplt.show()\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 400)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# plot x vs y1 and x vs y2 in two subplots\n# remove the frames from the subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\nax1.plot(x, y1)\nax1.set_xlabel('x')\nax1.set_ylabel('y1')\nax1.set_title('y1 vs x')\nax2.plot(x, y2)\nax2.set_xlabel('x')\nax2.set_ylabel('y2')\nax2.set_title('y2 vs x')\nfig.suptitle('y1 vs y2')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.sin(x)\ndf = pd.DataFrame({\"x\": x, \"y\": y})\nsns.lineplot(x=\"x\", y=\"y\", data=df)\n\n# remove x axis label\nplt.xlabel(\"\")\n",
        "\n\nx = np.arange(10)\ny = np.sin(x)\ndf = pd.DataFrame({\"x\": x, \"y\": y})\nsns.lineplot(x=\"x\", y=\"y\", data=df)\n\n# remove x tick labels\nplt.xticks([])\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n\n# show xticks and vertical grid at x positions 3 and 4\nplt.xticks([3, 4])\nplt.grid(axis='x', which='major', alpha=0.5)\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n\n# show yticks and horizontal grid at y positions 3 and 4\nplt.yticks([3, 4])\nplt.grid(axis='y', which='major', linestyle='--')\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n\n# show yticks and horizontal grid at y positions 3 and 4\nplt.yticks([3, 4], ['3', '4'])\nplt.grid(axis='y')\n\n# show xticks and vertical grid at x positions 1 and 2\nplt.xticks([1, 2], ['1', '2'])\nplt.grid(axis='x')\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n\n# show grids\nplt.grid()\n",
        "\n\nx = 10 * np.random.randn(10)\ny = x\nplt.plot(x, y, label=\"x-y\")\n\n# put legend in the lower right\nplt.legend(loc='lower right')\n",
        "\nfig.tight_layout()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10, 20)\nz = np.arange(10)\n\n\nplt.plot(x, y, label='Y')\nplt.plot(x, z, label='Z')\nplt.legend()\n\n",
        "\n\ncolumn_labels = list(\"ABCD\")\nrow_labels = list(\"WXYZ\")\ndata = np.random.rand(4, 4)\nfig, ax = plt.subplots()\nheatmap = ax.pcolor(data, cmap=plt.cm.Blues)\n\n# Move the x-axis of this heatmap to the top of the plot\nax.xaxis.tick_top()\nax.set_xticks(np.arange(data.shape[1]) + 0.5, minor=False)\nax.set_yticks(np.arange(data.shape[0]) + 0.5, minor=False)\nax.set_xticklabels(column_labels, minor=False)\nax.set_yticklabels(row_labels, minor=False)\nax.invert_yaxis()\nplt.xticks(rotation=90)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x\nplt.plot(x, y)\n\n# Label the x-axis as \"X\"\nplt.xlabel(\"X\")\n\n# Set the space between the x-axis label and the x-axis to be 20\nplt.subplots_adjust(bottom=0.3)\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x\n# do not show xticks for the plot\nplt.plot(x, y)\nplt.xticks([])\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x\n# move the y axis ticks to the right\nplt.plot(x, y)\nplt.gca().yaxis.tick_right()\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and label y axis \"Y\"\n# Show y axis ticks on the left and y axis label on the right\n\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.set_ylabel(\"Y\")\nax.yaxis.tick_left()\nax.yaxis.set_label_position(\"left\")\n\nplt.show()\n",
        "\n\ntips = sns.load_dataset(\"tips\")\n\n# Make a seaborn joint regression plot (kind='reg') of 'total_bill' and 'tip' in the tips dataframe\n# change the line and scatter plot color to green but keep the distribution plot in blue\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind=\"reg\", color=\"b\")\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind=\"scatter\", color=\"g\")\nsns.distplot(tips[\"total_bill\"], color=\"b\")\nsns.distplot(tips[\"tip\"], color=\"g\")\nplt.show()\n",
        "\n\ntips = sns.load_dataset(\"tips\")\n\n# Make a seaborn joint regression plot (kind='reg') of 'total_bill' and 'tip' in the tips dataframe\n# change the line color in the regression to green but keep the histograms in blue\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind=\"reg\", color=\"b\")\nsns.set_palette(\"Set2\")\nsns.set_style(\"whitegrid\")\nplt.plot(np.unique(tips[\"total_bill\"]), np.poly1d(np.polyfit(tips[\"total_bill\"], tips[\"tip\"], 1))(np.unique(tips[\"total_bill\"])), color=\"g\")\nplt.xlabel(\"Total Bill\")\nplt.ylabel(\"Tip\")\nplt.show()\n",
        "\n\ntips = sns.load_dataset(\"tips\")\n\n# Make a seaborn joint regression plot (kind='reg') of 'total_bill' and 'tip' in the tips dataframe\n# do not use scatterplot for the joint plot\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind='reg', joint_kws={'scatter_kws':{'alpha':0}})\nplt.show()\n",
        "\n\ndf = pd.DataFrame(\n    {\n        \"celltype\": [\"foo\", \"bar\", \"qux\", \"woz\"],\n        \"s1\": [5, 9, 1, 7],\n        \"s2\": [12, 90, 13, 87],\n    }\n)\n\n# For data in df, make a bar plot of s1 and s1 and use celltype as the xlabel\n# Make the x-axis tick labels horizontal\nfig, ax = plt.subplots()\nax.bar(df[\"celltype\"], df[\"s1\"], label=\"s1\")\nax.bar(df[\"celltype\"], df[\"s2\"], bottom=df[\"s1\"], label=\"s2\")\nax.set_xlabel(\"celltype\")\nax.set_xticklabels(df[\"celltype\"], rotation=45, ha=\"right\")\nax.legend()\nplt.show()\n",
        "\n\ndf = pd.DataFrame(\n    {\n        \"celltype\": [\"foo\", \"bar\", \"qux\", \"woz\"],\n        \"s1\": [5, 9, 1, 7],\n        \"s2\": [12, 90, 13, 87],\n    }\n)\n\n# For data in df, make a bar plot of s1 and s1 and use celltype as the xlabel\n# Make the x-axis tick labels rotate 45 degrees\nfig, ax = plt.subplots()\ndf.plot(kind=\"bar\", x=\"celltype\", y=[\"s1\", \"s2\"], ax=ax)\nax.set_xticklabels(ax.get_xticklabels(), rotation=45)\n\n# Save the figure\nfig.savefig(\"barplot.png\")\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and label the x axis as \"X\"\n# Make both the x axis ticks and the axis label red\nplt.plot(x, y)\nplt.xlabel(\"X\")\nplt.xticks(color='red')\nplt.yticks(color='red')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and label the x axis as \"X\"\n# Make the line of the x axis red\nplt.plot(x, y, label='Y')\nplt.axhline(y=0, color='r', linestyle='-')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Y over X')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x with tick font size 10 and make the x tick labels vertical\nplt.plot(x, y)\nplt.xticks(fontsize=10, rotation=90)\nplt.yticks(fontsize=10)\nplt.show()\n",
        "\n\n# draw vertical lines at [0.22058956, 0.33088437, 2.20589566]\nplt.axvline(x=0.22058956, ymin=0, ymax=1, color='r', linestyle='--')\nplt.axvline(x=0.33088437, ymin=0, ymax=1, color='r', linestyle='--')\nplt.axvline(x=2.20589566, ymin=0, ymax=1, color='r', linestyle='--')\n",
        "\n\nfig, ax = plt.subplots()\nim = ax.imshow(rand_mat, cmap='YlOrRd')\n\nax.set_xticks(numpy.arange(len(xlabels)))\nax.set_yticks(numpy.arange(len(ylabels)))\nax.set_xticklabels(xlabels, rotation=90, ha='center')\nax.set_yticklabels(ylabels[::-1])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(ylabels)):\n    for j in range(len(xlabels)):\n        text = ax.text(j, i, round(rand_mat[i, j], 2),\n                       ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Heatmap with random data\")\nfig.tight_layout()\nplt.show()\n\n",
        "\nfrom matplotlib import rc\n\nrc(\"mathtext\", default=\"regular\")\n\ntime = np.arange(10)\ntemp = np.random.random(10) * 30\nSwdown = np.random.random(10) * 100 - 10\nRn = np.random.random(10) * 100 - 10\n\nfig, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\nax1.plot(time, Swdown, \"-\", label=\"Swdown\")\nax1.plot(time, Rn, \"-\", label=\"Rn\")\nax1.set_ylabel(r\"Radiation ($MJ\\,m^{-2}\\,d^{-1}$)\")\nax1.legend(loc=0)\nax1.grid()\nax2.plot(time, temp, \"-r\", label=\"temp\")\nax2.set_ylabel(r\"Temperature ($^\\circ$C)\")\nax2.set_ylim(0, 35)\nax1.set_ylim(-20, 100)\nax2.legend(loc=0)\nax2.grid()\nax2.set_xlabel(\"Time (h)\")\nplt.show()\nplt.clf()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# make two side-by-side subplots and and in each subplot, plot y over x\n# Title each subplot as \"Y\"\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\nax1.plot(x, y)\nax1.set_title(\"Y\")\nax2.plot(y, x)\nax2.set_title(\"X\")\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n]\n\n# make a seaborn scatter plot of bill_length_mm and bill_depth_mm\n# use markersize 30 for all data points in the scatter plot\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=df, s=30)\nplt.show()\n",
        "\n\na = [2.56422, 3.77284, 3.52623]\nb = [0.15, 0.3, 0.45]\nc = [58, 651, 393]\n\n# make scatter plot of a over b and annotate each data point with correspond numbers in c\nplt.scatter(b, a)\nfor i in range(len(a)):\n    plt.annotate(c[i], (b[i], a[i]))\nplt.xlabel('b')\nplt.ylabel('a')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart and label the line \"y over x\"\nplt.plot(x, y, label='y over x')\n\n# Show legend of the plot and give the legend box a title\nplt.legend(title='Legend')\n\n# Show the plot\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart and label the line \"y over x\"\nplt.plot(x, y, label='y over x')\n\n# Show legend of the plot and give the legend box a title  \"Legend\"\nplt.legend(title='Legend', loc='upper left')\n\n# Bold the legend title\nplt.setp(plt.gca().get_legend().get_title(), fontsize='18')\n\nplt.show()\n",
        "\nplt.hist(x, edgecolor='black', linewidth=1.2)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make two subplots. Make the first subplot three times wider than the second subplot but they should have the same height.\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))\n\n# Plot the data in the first subplot\nax1.plot(x, y)\n\n# Plot the data in the second subplot\nax2.plot(x, y)\n\n# Set the x and y limits for both subplots\nax1.set_xlim(0, 20)\nax1.set_ylim(0, 10)\nax2.set_xlim(0, 20)\nax2.set_ylim(0, 10)\n\n# Add a title to the first subplot\nax1.set_title('First Subplot')\n\n# Add a title to the second subplot\nax2.set_title('Second Subplot')\n\n# Show the plot\nplt.show()\n",
        "\nplt.hist(x, bins=bins, alpha=0.5, label='x')\nplt.hist(y, bins=bins, alpha=0.5, label='y')\nplt.legend()\nplt.show()\n",
        "\n\n# Create a figure and axis object\nfig, ax = plt.subplots()\n\n# Create a histogram of x with 10 bins and group it with y\nax.hist(x, bins=10, alpha=0.5, label='x')\nax.hist(y, bins=10, alpha=0.5, label='y', bottom=np.max(x))\n\n# Add a legend and title to the chart\nax.legend()\nax.set_title('Histogram of x and y')\n\n",
        "\nplt.plot([a, c], [b, d], color='red')\nplt.xlim(0, 5)\nplt.ylim(0, 5)\n",
        "\n\nx = np.random.random((10, 10))\ny = np.random.random((10, 10))\n\n# make two colormaps with x and y and put them into different subplots\n# use a single colorbar for these two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\n# create a colormap for x\ncmap_x = plt.cm.get_cmap('RdBu', 10)\nnorm_x = plt.Normalize(vmin=x.min(), vmax=x.max())\nsm_x = plt.cm.ScalarMappable(cmap=cmap_x, norm=norm_x)\nsm_x.set_array([])\n\n# create a colormap for y\ncmap_y = plt.cm.get_cmap('RdBu', 10)\nnorm_y = plt.Normalize(vmin=y.min(), vmax=y.max())\nsm_y = plt.cm.ScalarMappable(cmap=cmap_y, norm=norm_y)\nsm_y.set_array([])\n\n# plot x on the left subplot\nim_x = ax1.imshow(x, cmap=cmap_x, norm=norm_x)\nax1.set_title('x')\nfig.colorbar(sm_x, ax=ax1)\n\n# plot y on the right subplot\nim_y = ax2.imshow(y, cmap=cmap_y, norm=norm_y)\nax2.set_title('y')\nfig.colorbar(sm_y, ax=ax2)\n\n# create a single colorbar for both subplots\ncbar_ax = fig.add_axes([0.95, 0.15, 0.02, 0.7])\ncbar = fig.colorbar(im_x, cax=cbar_ax)\ncbar.ax.set_ylabel('Colorbar')\n\nplt.show()\n",
        "\n\nx = np.random.random((10, 2))\n\n# Plot each column in x as an individual line and label them as \"a\" and \"b\"\nplt.plot(x[:,0], label=\"a\")\nplt.plot(x[:,1], label=\"b\")\nplt.legend()\nplt.show()\n",
        "\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nax1.plot(x, y)\nax1.set_title('Y over X')\n\nax2.plot(a, z)\nax2.set_title('Z over A')\n\nfig.suptitle('Y and Z')\n\n",
        "\n\npoints = [(3, 5), (5, 10), (10, 150)]\n\n# plot a line plot for points in points.\n# Make the y-axis log scale\nplt.plot([p[0] for p in points], [p[1] for p in points])\nplt.yscale('log')\nplt.show()\n",
        "\nplt.plot(x, y)\nplt.title('My Plot', fontsize=20)\nplt.xlabel('X-axis', fontsize=18)\nplt.ylabel('Y-axis', fontsize=16)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\nf = plt.figure()\nax = f.add_subplot(111)\n\n# plot y over x, show tick labels (from 1 to 10)\n# use the `ax` object to set the tick labels\nax.plot(x, y)\nax.set_xticks(np.arange(1, 11))\nax.set_yticks(np.arange(1, 11))\nax.set_xticklabels(np.arange(1, 11))\nax.set_yticklabels(np.arange(1, 11))\n",
        "\n\nfig, ax = plt.subplots()\n\nfor i in range(len(lines)):\n    x = [lines[i][0][0], lines[i][1][0]]\n    y = [lines[i][0][1], lines[i][1][1]]\n    ax.plot(x, y, c=c[i])\n\n",
        "\n\nx = np.arange(0, 1000, 50)\ny = np.arange(0, 1000, 50)\n\n# plot y over x on a log-log plot\n# mark the axes with numbers like 1, 10, 100. do not use scientific notation\nplt.loglog(x, y)\nplt.xticks([1, 10, 100], [1, 10, 100])\nplt.yticks([1, 10, 100], [1, 10, 100])\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('y over x on a log-log plot')\nplt.show()\n",
        "\n\n# create a new figure and set its size\nfig, ax = plt.subplots(2, 2, figsize=(12, 8))\n\n# plot the data in each subplot\ndf.A.plot(ax=ax[0, 0], marker='o')\ndf.B.plot(ax=ax[0, 1], marker='o')\ndf.C.plot(ax=ax[1, 0], marker='o')\ndf.D.plot(ax=ax[1, 1], marker='o')\n\n# set the title of each subplot\nax[0, 0].set_title('Line Plot of A')\nax[0, 1].set_title('Line Plot of B')\nax[1, 0].set_title('Line Plot of C')\nax[1, 1].set_title('Line Plot of D')\n\n# set the x-axis label of each subplot\nax[0, 0].set_xlabel('Date')\nax[0, 1].set_xlabel('Date')\nax[1, 0].set_xlabel('Date')\nax[1, 1].set_xlabel('Date')\n\n# set the y-axis label of each subplot\nax[0, 0].set_ylabel('Value')\nax[0, 1].set_ylabel('Value')\nax[1, 0].set_ylabel('Value')\nax[1, 1].set_ylabel('Value')\n\n# show the plot\nplt.show()\n\n",
        "\nplt.hist(data, bins=range(min(data), max(data) + 2), density=True)\nplt.xticks(range(min(data), max(data) + 1, 1000))\nplt.yticks(np.arange(0, 0.11, 0.01))\nplt.gca().set_yticklabels(['{:,.0%}'.format(x) for x in np.arange(0, 0.11, 0.01)])\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.title('Histogram of Data')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line plot\n# Show marker on the line plot. Make the marker have a 0.5 transparency but keep the lines solid.\nplt.plot(x, y, marker='o', linestyle='solid', alpha=0.5)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\na = np.arange(10)\nz = np.arange(10)\n\n# Plot y over x and a over z in two side-by-side subplots.\n# Label them \"y\" and \"a\" and make a single figure-level legend using the figlegend function\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\nax1.plot(x, y, label='y')\nax2.plot(z, a, label='a')\nfig.legend(loc='upper center', bbox_to_anchor=(0.5, 1.05), ncol=2)\nax1.set_xlabel('x')\nax1.set_ylabel('y')\nax2.set_xlabel('z')\nax2.set_ylabel('a')\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n]\n\n# Make 2 subplots.\n# In the first subplot, plot a seaborn regression plot of \"bill_depth_mm\" over \"bill_length_mm\"\n# In the second subplot, plot a seaborn regression plot of \"flipper_length_mm\" over \"bill_length_mm\"\n# Do not share y axix for the subplots\n\nfig, axes = plt.subplots(1, 2, figsize=(12, 6))\n\nsns.regplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=df, ax=axes[0])\nsns.regplot(x=\"bill_length_mm\", y=\"flipper_length_mm\", data=df, ax=axes[1])\n\naxes[0].set_ylabel(\"\")\naxes[1].set_ylabel(\"\")\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nfig, ax = plt.subplots(1, 1)\nplt.xlim(1, 10)\nplt.xticks(range(1, 10))\nax.plot(y, x)\n\n# change the second x axis tick label to \"second\" but keep other labels in numerical\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nax.set_xticklabels(['first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth', 'tenth'])\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x\nplt.plot(x, y)\nplt.legend(['$\\lambda$'])\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(y, x)\nplt.xticks(range(0, 10, 2))\n\n# Add extra ticks [2.1, 3, 7.6] to existing xticks\nplt.xticks(np.append(plt.xticks()[0], [2.1, 3, 7.6]))\n",
        "\n\nx = np.arange(2010, 2020)\ny = np.arange(10)\nplt.plot(x, y)\n\n# Rotate the xticklabels to -60 degree. Set the xticks horizontal alignment to left.\nplt.xticks(rotation=-60, ha='left')\n",
        "\n\nx = np.arange(2010, 2020)\ny = np.arange(10)\nplt.plot(x, y)\n\n# Rotate the yticklabels to -60 degree. Set the xticks vertical alignment to top.\nplt.yticks(rotation=-60, verticalalignment='top')\nplt.xticks(rotation=0, verticalalignment='top')\n",
        "\n\nx = np.arange(2010, 2020)\ny = np.arange(10)\nplt.plot(x, y)\n\n# Set the transparency of xtick labels to be 0.5\nfor label in plt.gca().get_xticklabels():\n    label.set_alpha(0.5)\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(x, y)\n\n# Remove the margin before the first xtick but use greater than zero margin for the yaxis\nplt.margins(x=0.05, y=0.1)\n",
        "```python\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(x, y)\n\n# Remove the margin before the first ytick but use greater than zero margin for the xaxis\nplt.gca().tick_params(axis='x', which='major', pad=15)\nplt.gca().tick_params(axis='y', which='major', pad=10)\nplt.gca().tick_params(axis='y', which='minor', pad=5)\nplt.gca().tick_params(axis='x', which='major', pad=15)\nplt.gca().tick_params(axis='x', which='minor', pad=5)\nplt.gca().tick_params(axis='y', which='both', left=True, right=False, labelleft=True, labelright=False)\nplt.gca().tick_params(axis='x', which='both', bottom=True, top=False, labelbottom=True, labeltop=False)\nplt.gca().tick_params(axis='both', which='major', length=10, width=2)\nplt.gca().tick_params(axis='both', which='minor', length=5, width=1)\nplt.gca().tick_params(axis='y', which='major', direction='in', pad=10)\nplt.gca().tick_params(axis='x', which='major', direction='in', pad=15)\nplt.gca().tick_params(axis='y', which='minor', direction='in', pad=5)\nplt.gca().tick_params(axis='x', which='minor', direction='in', pad=5)\nplt.gca().tick_params(axis='both', which='major', labelsize=14)\nplt.gca().tick_params(axis='both', which='minor', labelsize=12)\nplt.gca().tick_params(axis='both', which='both', direction='in')\nplt.gca().tick_params(axis='both', which='both', bottom=True, top=True, left=True, right=True)\nplt.gca().tick_params(axis='both', which='both', labelbottom=True, labeltop=True, labelleft=True, labelright=True)\nplt.gca().tick_params(axis='both', which='both', labelsize=14)\nplt.gca().tick_params(axis='both', which='both', length=10, width=2)\nplt.gca().tick_params(axis='both', which='both', direction='in')\nplt.gca().tick_params(axis='both', which='both', bottom=True, top=True, left=True, right=True)\nplt.gca().tick_params(axis='both', which='both', labelbottom=True, labeltop=True, labelleft=True, labelright=True)\nplt.gca().tick_params(axis='both', which='both', labelsize=14)\nplt.gca().tick_params(axis='both', which='both', length=10, width=2)\nplt.gca().tick_params(axis='both', which='both', direction='in')\nplt.gca().tick_params(axis='both', which='both', bottom=True, top=True, left=True, right=True)\nplt.gca().tick_params(axis='both', which='both', labelbottom=True, labeltop=True, labelleft=True, labelright=True)\nplt.gca().tick_params(axis='both', which='both', labelsize=14)\nplt.gca().tick_params(axis='both', which='both', length=10, width=2)\nplt.gca().tick_params(axis='both', which='both', direction='in')\nplt.gca().tick_params(axis='both', which='both', bottom=True, top=True, left=True, right=True)\nplt.gca().tick_params(axis='both', which='both', labelbottom=True, labeltop=True, labelleft=True,",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# make a two columns and one row subplots. Plot y over x in each subplot.\n# Give the plot a global title \"Figure\"\nfig, axes = plt.subplots(1, 2, figsize=(10, 5))\naxes[0].plot(x, y)\naxes[1].plot(y, x)\nfig.suptitle('Figure')\nplt.show()\n",
        "\nplt.plot(df.index, df[\"Type A\"], label=\"Type A\")\nplt.plot(df.index, df[\"Type B\"], label=\"Type B\")\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.legend()\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make a scatter plot with x and y\n# Use vertical line hatch for the marker and make the hatch dense\nplt.scatter(x, y, marker='|', hatch='//', edgecolor='black')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make a scatter plot with x and y and remove the edge of the marker\n# Use vertical line hatch for the marker\nplt.scatter(x, y, marker='|', edgecolor='none', hatch='//')\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make a scatter plot with x and y\n# Use star hatch for the marker\nplt.scatter(x, y, marker='*', hatch='//')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make a scatter plot with x and y and set marker size to be 100\n# Combine star hatch and vertical line hatch together for the marker\nplt.scatter(x, y, s=100, marker='*1|_')\n\nplt.show()\n",
        "\n\ndata = np.random.random((10, 10))\n\n# Set xlim and ylim to be between 0 and 10\nplt.xlim(0, 10)\nplt.ylim(0, 10)\n\n# Plot a heatmap of data in the rectangle where right is 5, left is 1, bottom is 1, and top is 4.\nplt.imshow(data[1:4, 1:5], cmap='hot')\n\nplt.show()\n",
        "\n\nx = np.linspace(0.1, 2 * np.pi, 41)\ny = np.exp(np.sin(x))\n\n# make a stem plot of y over x and set the orientation to be horizontal\nplt.stem(x, y, linefmt='C0-', markerfmt='C0o', basefmt='C0-')\nplt.xticks([])\nplt.yticks([])\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Stem Plot of y over x')\nplt.show()\n",
        "\nplt.bar(range(len(d)), list(d.values()), align='center')\nplt.xticks(range(len(d)), list(d.keys()))\nfor i, v in enumerate(list(d.values())):\n    plt.text(i-0.2, v+0.1, str(v), color='black', fontweight='bold')\nfor i, k in enumerate(list(d.keys())):\n    plt.text(i-0.2, 0, k, color=c[k], fontweight='bold')\nplt.show()\n",
        "\n\n# Make a solid vertical line at x=3 and label it \"cutoff\". Show legend of this plot.\nplt.axvline(x=3, color='black', linestyle='--', label='cutoff')\nplt.legend()\nplt.show()\n",
        "\n\nlabels = [\"a\", \"b\"]\nheight = [3, 4]\n\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\nfig = plt.figure()\nax = fig.add_subplot(111, projection='polar')\nax.bar(labels, height)\nax.set_xticklabels(labels)\nplt.show()\n",
        "\n\nl = [\"a\", \"b\", \"c\"]\ndata = [225, 90, 50]\n\n# Make a donut plot of using `data` and use `l` for the pie labels\n# Set the wedge width to be 0.4\nfig1, ax1 = plt.subplots()\nax1.pie(data, labels=l, autopct='%1.1f%%', startangle=90, wedgeprops=dict(width=0.4))\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and show blue dashed grid lines\nplt.plot(x, y, 'b--')\nplt.grid(True, which='both', axis='both', color='blue', linestyle='--')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x\n# Turn minor ticks on and show gray dashed minor grid lines\n# Do not show any major grid lines\n\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.minorticks_on()\nax.grid(which='minor', linestyle='--', color='gray')\nax.grid(which='major', linestyle='--', color='gray', alpha=0.5)\n\n",
        "\n\nlabels = [\"Walking\", \"Talking\", \"Sleeping\", \"Working\"]\nsizes = [23, 45, 12, 20]\ncolors = [\"red\", \"blue\", \"green\", \"yellow\"]\n\n# Make a pie chart with data in `sizes` and use `labels` as the pie labels and `colors` as the pie color.\n# Bold the pie labels\nexplode = (0, 0.1, 0, 0)  # only \"explode\" the 2nd slice (i.e. 'Talking')\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.setp(ax1.get_legend().get_texts(), fontsize='14')  # legend font size\nplt.setp(ax1.get_legend().get_title(), fontsize='16')  # legend title font size\nplt.title(\"My Daily Activities\", fontsize=20)  # title font size\nplt.show()\n",
        "\n\nlabels = [\"Walking\", \"Talking\", \"Sleeping\", \"Working\"]\nsizes = [23, 45, 12, 20]\ncolors = [\"red\", \"blue\", \"green\", \"yellow\"]\n\n# Make a pie chart with data in `sizes` and use `labels` as the pie labels and `colors` as the pie color.\n# Bold the pie labels\nexplode = (0, 0.1, 0, 0)  # only \"explode\" the 2nd slice (i.e. 'Talking')\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.setp(ax1.get_legend().get_texts(), fontsize='14')  # legend font size\nplt.setp(ax1.get_legend().get_title(), fontsize='16')  # legend title font size\nplt.title(\"My Daily Activities\", fontsize=20)  # title font size\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart but use transparent marker with non-transparent edge\nplt.plot(x, y, marker='o', markerfacecolor='none', markeredgecolor='blue', markeredgewidth=2, alpha=0.5)\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n]\nsns.distplot(df[\"bill_length_mm\"], color=\"blue\")\n\n# Plot a vertical line at 55 with green color\nplt.axvline(x=55, color=\"green\")\n",
        "\n# Create a new figure and axis object\nfig, ax = plt.subplots()\n\n# Set the x-axis values\nx_values = np.arange(len(blue_bar))\n\n# Set the width of the bars\nwidth = 0.35\n\n# Plot the blue bars\nblue_bars = ax.bar(x_values - width/2, blue_bar, width, label='Blue Bars')\n\n# Plot the orange bars\norange_bars = ax.bar(x_values + width/2, orange_bar, width, label='Orange Bars')\n\n# Set the x-axis labels\nax.set_xticks(x_values)\nax.set_xticklabels(['A', 'B', 'C'])\n\n# Set the y-axis label\nax.set_ylabel('Height')\n\n# Add a legend\nax.legend()\n\n# Show the plot\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\na = np.arange(10)\n\n# Make two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\n# Plot y over x in the first subplot and plot z over a in the second subplot\nax1.plot(x, y, label='y')\nax2.plot(a, z, label='z')\n\n# Label each line chart and put them into a single legend on the first subplot\nax1.legend()\n\n",
        "\n\nplt.scatter(x, y, c=y, cmap='Spectral')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('y over x')\n\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x\n# use a tick interval of 1 on the a-axis\nplt.plot(x, y)\nplt.xticks(np.arange(10))\nplt.yticks(np.arange(10))\nplt.grid()\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"penguins\")[[\"bill_length_mm\", \"species\", \"sex\"]]\n\n# Use seaborn factorpot to plot multiple barplots of \"bill_length_mm\" over \"sex\" and separate into different subplot columns by \"species\"\n# Do not share y axis across subplots\n\nsns.factorplot(x=\"sex\", y=\"bill_length_mm\", hue=\"species\", col=\"species\", data=df, kind=\"bar\", sharey=False)\nplt.show()\n",
        "\n\n# draw a circle centered at (0.5, 0.5) with radius 0.2\nplt.figure(figsize=(5,5))\nplt.gca().add_patch(plt.Circle((0.5, 0.5), 0.2, fill=False))\nplt.axis('scaled')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and use the greek letter phi for title. Bold the title and make sure phi is bold.\nplt.plot(x, y)\nplt.title(r'$\\phi$', fontsize=24, fontweight='bold')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x with a legend of \"Line\"\n# Adjust the spacing between legend markers and labels to be 0.1\nplt.plot(x, y, label='Line')\nplt.legend(loc='upper left', bbox_to_anchor=(1, 1), ncol=1, borderaxespad=0.1)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x with a legend of \"Line\"\n# Adjust the length of the legend handle to be 0.3\nplt.plot(x, y, label='Line')\nplt.legend(handlelength=0.3)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(x, y, label=\"Line\")\nplt.plot(y, x, label=\"Flipped\")\n\n# Show a two columns legend of this plot\nplt.legend(ncol=2)\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(x, y, marker=\"*\", label=\"Line\")\n\n# Show a legend of this plot and show two markers on the line\nplt.legend(loc=\"upper left\")\nplt.plot(x, y, marker=\"o\", linestyle=\"--\", label=\"Markers\")\n",
        "\n\ndata = np.random.random((10, 10))\n\n# plot the 2d matrix data with a colorbar\nplt.imshow(data)\nplt.colorbar()\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x. Give the plot a title \"Figure 1\". bold the word \"Figure\" in the title but do not bold \"1\"\nplt.plot(x, y)\nplt.title(\"Figure 1\", fontweight=\"bold\")\nplt.xlabel(\"x-axis\")\nplt.ylabel(\"y-axis\")\nplt.show()\n",
        "\n\ndf = pd.DataFrame(\n    {\n        \"id\": [\"1\", \"2\", \"1\", \"2\", \"2\"],\n        \"x\": [123, 22, 356, 412, 54],\n        \"y\": [120, 12, 35, 41, 45],\n    }\n)\n\n# Use seaborn to make a pairplot of data in `df` using `x` for x_vars, `y` for y_vars, and `id` for hue\n# Hide the legend in the output figure\nsns.pairplot(df, x_vars=[\"x\"], y_vars=[\"y\"], hue=\"id\", legend=False)\n\n# Show the plot\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and invert the x axis\nplt.plot(x, y)\nplt.gca().invert_xaxis()\nplt.show()\n",
        "\n\nx = np.arange(11)\ny = np.arange(11)\nplt.xlim(0, 10)\nplt.ylim(0, 10)\n\n# Plot a scatter plot x over y and set both the x limit and y limit to be between 0 and 10\n# Turn off axis clipping so data points can go beyond the axes\nplt.scatter(x, y, clip_on=False)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot a scatter plot with values in x and y\n# Plot the data points to have red inside and have black border\nplt.scatter(x, y, c='black', edgecolors='red')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x on a 2 by 2 subplots with a figure size of (15, 15)\nfig, axes = plt.subplots(2, 2, figsize=(15, 15))\n\n# repeat the plot in each subplot\nfor i in range(2):\n    for j in range(2):\n        axes[i, j].plot(x, y)\n\nplt.show()\n",
        "\n\nx = np.random.rand(100) * 10\n\n# Make a histogram of x\nplt.hist(x, range=(0, 10), bins=5, width=2)\nplt.show()\n",
        "\nplt.plot(x, y)\nplt.fill_between(x, y-error, y+error, alpha=0.2)\nplt.show()\n",
        "\n\nxvec = np.linspace(-5.0, 5.0, 100)\nx, y = np.meshgrid(xvec, xvec)\nz = -np.hypot(x, y)\nplt.contourf(x, y, z)\n\n# draw x=0 and y=0 axis in my contour plot with white color\nplt.plot([0, 0], [-5, 5], color='white')\nplt.plot([-5, 5], [0, 0], color='white')\n",
        "\nax.errorbar(box_position, box_height, yerr=box_errors, fmt=\"o\", color=c)\n",
        "\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nax1.plot(x, y, label='Y')\nax1.set_title('Y')\n\nax2.plot(a, z, label='Z')\nax2.set_title('Z')\n\nfig.suptitle('Y vs Z')\nax2.set_xlabel('a')\nax2.set_ylabel('z')\n\nplt.show()\n\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# make 4 by 4 subplots with a figure size (5,5)\n# in each subplot, plot y over x and show axis tick labels\n# give enough spacing between subplots so the tick labels don't overlap\nfig, axes = plt.subplots(nrows=4, ncols=4, figsize=(5,5))\nfor i in range(4):\n    for j in range(4):\n        axes[i,j].plot(x, y)\n        axes[i,j].set_xticks(np.arange(10))\n        axes[i,j].set_yticks(np.arange(10))\n        axes[i,j].set_xlabel('x-axis')\n        axes[i,j].set_ylabel('y-axis')\n        plt.subplots_adjust(wspace=0.5, hspace=0.5)\n",
        "\n\nd = np.random.random((10, 10))\n\n# Use matshow to plot d and make the figure size (8, 8)\nplt.matshow(d, cmap='gray', fignum=1, figsize=(8, 8))\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n].head(10)\n\n# Plot df as a matplotlib table. Set the bbox of the table to [0, 0, 1, 1]\nfig, ax = plt.subplots()\nax.axis('off')\nax.table(cellText=df.values, bbox=[0, 0, 1, 1])\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart. Show x axis tick labels on both top and bottom of the figure.\nplt.plot(x, y)\nplt.xticks(np.arange(11))\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.tick_params(axis='x', labelbottom=True, labeltop=True)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart. Show x axis ticks on both top and bottom of the figure.\nplt.plot(x, y)\nplt.xticks(np.arange(11))\nplt.grid(axis='both')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart. Show x axis tick labels but hide the x axis ticks\nplt.plot(x, y)\nplt.xticks(x)\nplt.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=True)\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"exercise\")\n\n# Make catplots of scatter plots by using \"time\" as x, \"pulse\" as y, \"kind\" as hue, and \"diet\" as col\n# Change the subplots titles to \"Group: Fat\" and \"Group: No Fat\"\n\nsns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\", height=5, aspect=1)\n\n# Change the subplot titles\nplt.subplot(1, 2, 1)\nplt.title(\"Group: Fat\")\nplt.subplot(1, 2, 2)\nplt.title(\"Group: No Fat\")\n\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"exercise\")\n\n# Make catplots of scatter plots by using \"time\" as x, \"pulse\" as y, \"kind\" as hue, and \"diet\" as col\n# Change the xlabels to \"Exercise Time\" and \"Exercise Time\"\nsns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\", s=10)\nplt.xlabel(\"Exercise Time\")\nplt.ylabel(\"Exercise Pulse\")\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"exercise\")\n\n# Make catplots of scatter plots by using \"time\" as x, \"pulse\" as y, \"kind\" as hue, and \"diet\" as col\n# Do not show any ylabel on either subplot\nsns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\", ylabel=None)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x with label \"y\"\n# make the legend fontsize 8\nplt.plot(x, y, label='y')\nplt.legend(fontsize=8)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x with figsize (5, 5) and dpi 300\nplt.figure(figsize=(5, 5), dpi=300)\nplt.plot(x, y)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x with label \"y\" and show legend\n# Remove the border of frame of legend\nplt.plot(x, y, label='y')\nplt.legend(frameon=False)\nplt.show()\n",
        "\nfrom numpy import *\n\nt = linspace(0, 2 * math.pi, 400)\na = sin(t)\nb = cos(t)\nc = a + b\n\n# Plot a, b, c in the same figure\nfig, ax = plt.subplots()\nax.plot(t, a, label='a')\nax.plot(t, b, label='b')\nax.plot(t, c, label='c')\nax.set_xlabel('t')\nax.set_ylabel('y')\nax.set_title('a, b, c')\nax.legend()\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"penguins\")[[\"bill_length_mm\", \"species\", \"sex\"]]\n\n# Make a stripplot for the data in df. Use \"sex\" as x, \"bill_length_mm\" as y, and \"species\" for the color\n# Remove the legend from the stripplot\nsns.stripplot(x=\"sex\", y=\"bill_length_mm\", hue=\"species\", data=df, jitter=True, dodge=True, alpha=0.5)\nplt.legend(loc='upper right', bbox_to_anchor=(1.3, 1))\nplt.show()\n",
        "\n\ndf = pandas.DataFrame(\n    {\n        \"a\": np.arange(1, 31),\n        \"b\": [\"A\",] * 10 + [\"B\",] * 10 + [\"C\",] * 10,\n        \"c\": np.random.rand(30),\n    }\n)\n\n# Use seaborn FaceGrid for rows in \"b\" and plot seaborn pointplots of \"c\" over \"a\"\n# In each subplot, show xticks of intervals of 1 but show xtick labels with intervals of 2\ng = sns.FacetGrid(df, row=\"b\", aspect=1.5)\ng.map(sns.pointplot, \"a\", \"c\", order=range(1, 31), ci=None)\nfor ax in g.axes.flat:\n    ax.set_xticks(range(1, 31, 2))\n    ax.set_xticklabels(range(1, 31, 2))\nplt.show()\n",
        "\nfrom mpl_toolkits.mplot3d import Axes3D\n\nx = np.random.random(10)\ny = np.random.random(10)\nz = np.random.random(10)\n\n# Make a 3D scatter plot of x,y,z\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x, y, z)\nax.view_init(100, 50)\n\n# change the view of the plot to have 100 azimuth and 50 elevation\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart and name axis with labels (\"x\" and \"y\")\n# Hide tick labels but keep axis labels\nplt.plot(x, y)\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.xticks([])\nplt.yticks([])\nplt.show()\n",
        "\n\nx = np.random.random((10, 10))\nfrom matplotlib import gridspec\n\nnrow = 2\nncol = 2\n\nfig = plt.figure(figsize=(ncol + 1, nrow + 1))\n\n# Make a 2x2 subplots with fig and plot x in each subplot as an image\n# Remove the space between each subplot and make the subplot adjacent to each other\n# Remove the axis ticks from each subplot\ngs = gridspec.GridSpec(nrow, ncol, wspace=0.0, hspace=0.0)\n\nfor i in range(nrow):\n    for j in range(ncol):\n        ax = plt.subplot(gs[i, j])\n        ax.imshow(x, cmap='gray')\n        ax.set_xticks([])\n        ax.set_yticks([])\n\nplt.show()\n"
    ]
}