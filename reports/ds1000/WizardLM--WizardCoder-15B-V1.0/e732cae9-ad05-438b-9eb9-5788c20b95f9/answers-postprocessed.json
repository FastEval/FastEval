{
    "Pandas": [
        "\nresult = df.iloc[List]\n",
        "\n# Shuffle the DataFrame's rows according to the List\ndf = df.iloc[List]\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n    # [Missing Code]\n    # Replace values in Qu1, Qu2, Qu3 according to value_counts() when value count great or equal 2\n    # For example for Qu1 column \n    # pd.value_counts(df.Qu1) >= 2\n    # cheese     True\n    # potato     True\n    # banana     True\n    # apple     False\n    # egg       False\n    # I'd like to keep values cheese,potato,banana, because each value has at least two appearances.\n    # From values apple and egg I'd like to create value others \n    # For column Qu2 no changes :\n    # pd.value_counts(df.Qu2) >= 2\n    # banana     True\n    # apple      True\n    # sausage    True\n    # The final result as in attached test_data\n    # test_data = DataFrame({'Qu1': ['other', 'potato', 'cheese', 'banana', 'cheese', 'banana', 'cheese', 'potato', 'other'],\n    #               'Qu2': ['sausage', 'banana', 'apple', 'apple', 'apple', 'sausage', 'banana', 'banana', 'banana'],\n    #               'Qu3': ['other', 'potato', 'other', 'cheese', 'cheese', 'potato', 'cheese', 'potato', 'other']})\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n# Replace values in Qu1 column with 'other' when value count great or equal 3 and keep values cheese\ndf.loc[pd.value_counts(df.Qu1) >= 3, 'Qu1'] = 'other'\ndf.loc[df.Qu1 == 'apple', 'Qu1'] = 'apple'\n\n# Replace values in Qu2 and Qu3 column with 'other' when value count great or equal 2\ndf.loc[pd.value_counts(df.Qu2) >= 2, 'Qu2'] = 'other'\ndf.loc[pd.value_counts(df.Qu3) >= 2, 'Qu3'] = 'other'\n",
        "\nresult = df.drop_duplicates(subset='url', keep='first')\n",
        "\nresult = df.drop_duplicates(subset='url', keep='first')\n",
        "\nresult = df.drop_duplicates(subset='url', keep='last', inplace=False)\nresult = result[result['keep_if_dup'] == 'Yes']\n",
        "\nresult = {}\nfor name, group in df.groupby('name'):\n    result[name] = {}\n    for v1, group1 in group.groupby('v1'):\n        result[name][v1] = {}\n        for v2, v3 in zip(group1['v2'], group1['v3']):\n            result[name][v1][v2] = v3\n",
        "\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\n",
        "\n    result = df['datetime'].dt.tz_localize(None)\n",
        "\ndf['datetime'] = df['datetime'].dt.strftime('%d-%b-%Y %H:%M:%S')\n",
        "\ndf['datetime'] = df['datetime'].dt.strftime('%Y-%m-%d %H:%M:%S')\n",
        "\n# Extract the key value pairs from the message column and create a new dataframe\nresult = pd.DataFrame(columns=['name', 'status', 'number', 'job', 'money', 'wife', 'group', 'kids'])\nfor i in range(len(df)):\n    message = df.loc[i, 'message']\n    pairs = message[1:-1].split(', ')\n    for pair in pairs:\n        key, value = pair.split(': ')\n        if key == 'job':\n            result.loc[i, 'job'] = value\n        elif key == 'money':\n            result.loc[i, 'money'] = value\n        elif key == 'wife':\n            result.loc[i, 'wife'] = value\n        elif key == 'group':\n            result.loc[i, 'group'] = value\n        elif key == 'kids':\n            result.loc[i, 'kids'] = value\n",
        "\n# Multiply scores corresponding to products 1069104 and 1069105 by 10\ndf.loc[df['product'].isin(products), 'score'] *= 10\n",
        "\nresult = df.loc[~df['product'].isin(products), 'score'] *= 10\n",
        "\n# Multiply scores corresponding to products which between [1069104, 1069105] or [1066489, 1066491] by 10\nfor product_range in products:\n    df.loc[df['product'].isin(product_range), 'score'] *= 10\n",
        "\n# Min-Max Normalize scores corresponding to products 1069104 and 1069105\ndf.loc[df['product'].isin(products), 'score'] = (df.loc[df['product'].isin(products), 'score'] - df.loc[df['product'].isin(products), 'score'].min()) / (df.loc[df['product'].isin(products), 'score'].max() - df.loc[df['product'].isin(products), 'score'].min())\n",
        "\n# Convert the binary columns into a single categorical column\ndf['category'] = df.apply(lambda x: ''.join(x.astype(int).astype(str)), axis=1)\n",
        "\n# Convert binary columns to categorical column\ndf['category'] = df.apply(lambda x: ''.join(x.astype(int).astype(str)), axis=1)\n",
        "\n# Convert binary columns to categorical column of lists\ndf['category'] = df.apply(lambda x: [col for col, val in x.items() if val == 1], axis=1)\n",
        "\ndf['Month'] = df['Date'].dt.strftime('%B')\ndf['Year'] = df['Date'].dt.strftime('%Y')\n",
        "\ndf['Date'] = df['Date'].dt.to_period(\"M\")\n",
        "\n# Extracting month name and year and day in a simple way in the following format:\n#                  Date\n# 0  01-Jan-2018 Tuesday\n# [Missing Code]\n# Extracting month name and year and day in a simple way in the following format:\n#                  Date\n# 0  01-Jan-2018 Tuesday\n# 1  08-Feb-2019 Wednesday\n",
        "\n# Shift the first row of the first column down 1 row\ndf.iloc[0,0] = df.iloc[1,0]\n# Shift the last row of the first column to the first row, first column\ndf.iloc[0,0] = df.iloc[-1,0]\n",
        "\n# Shift the last row of the first column up 1 row\ndf.iloc[-1,0] = df.iloc[-2,0]\n# Shift the first row of the first column to the last row, first column\ndf.iloc[0,0] = df.iloc[-1,0]\n",
        "\n# Shift the first row of the first column down 1 row\ndf.iloc[0,0] = df.iloc[1,0]\n# Shift the last row of the first column up 1 row\ndf.iloc[-1,0] = df.iloc[-2,0]\n# Shift the last row of the second column up 1 row\ndf.iloc[-1,1] = df.iloc[-2,1]\n# Shift the first row of the second column down 1 row\ndf.iloc[0,1] = df.iloc[1,1]\n",
        "\ndf.iloc[0] = df.iloc[1]\ndf.iloc[-1] = df.iloc[0]\n",
        "\ndf.rename(columns={'HeaderA': 'HeaderAX', 'HeaderB': 'HeaderBX', 'HeaderC': 'HeaderCX'}, inplace=True)\n",
        "\ndf.columns = ['X' + col for col in df.columns]\n",
        "\n# Rename all columns that don't end with \"X\" and add \"X\" to the beginning of the column name\ndf.rename(columns={col: \"X\" + col if col[-1] != \"X\" else col for col in df.columns}, inplace=True)\n",
        "\nresult = df.groupby('group').agg({\"group_color\": \"first\", \"val1\": \"mean\", \"val2\": \"mean\"})\n",
        "\nresult = df.groupby('group').agg({\"group_color\": \"first\", \"val1\": \"sum\", \"val2\": \"sum\"})\n",
        "\nresult = df.groupby('group').agg({\"group_color\": \"first\", \"val1\": \"sum\", \"val2\": \"mean\", \"val42\": \"mean\"})\n",
        "\nresult = df.loc[row_list,column_list].mean(axis=0)\n",
        "\nresult = df.loc[row_list,column_list].sum(axis=0)\n",
        "\nresult = df.loc[row_list,column_list].sum(axis=0)\n",
        "\n# [Missing Code]\n",
        "\nresult = df.isnull().sum()\n",
        "\nresult = ''\nfor col in df.columns:\n    if df[col].nunique() > 1:\n        result += f'---- {col} ---\\n'\n        result += str(df[col].value_counts()) + '\\n'\n",
        "\nresult = df.head().combine_first(df.iloc[[0]])\n",
        "\nresult = df.head().combine_first(df.iloc[[0]])\n",
        "\nresult = df.apply(lambda x : (x[x.notnull()].values.tolist()+[np.nan]*len(x[x.isnull()]))[:len(x)],1)\n",
        "\nresult = df.apply(lambda x : (x[x.isnull()].values.tolist()+x[x.notnull()].values.tolist()),1)\n",
        "\nresult = df.apply(lambda x : (x[x.isnull()].values.tolist()+x[x.notnull()].values.tolist()),0)\n",
        "\n# [Missing Code]\n# Create a new dataframe with the aggregated values\nresult = df.loc[df['value'] < thresh].sum()\n",
        "\n# Select the rows smaller than the threshold\ndf_small = df.loc[df['value'] < thresh]\n\n# Compute the average of the selected rows\navg = df_small['value'].mean()\n\n# Create a new row with the average value\nnew_row = pd.DataFrame({'value':[avg]}, index=['X'])\n\n# Concatenate the selected rows with the new row\nresult = pd.concat([df_small, new_row])\n",
        "\n# Create a new row with the average of the values in the section\nnew_row = pd.DataFrame({'lab':['X'], 'value':[(df.loc[df['value'] >= section_left]['value'].mean() + df.loc[df['value'] <= section_right]['value'].mean())/2]})\n# Replace the rows in the section with the new row\ndf.loc[df['value'] >= section_left] = new_row\ndf.loc[df['value'] <= section_right] = new_row\n",
        "\nresult = df.copy()\nfor col in df.columns:\n    result[f\"inv_{col}\"] = 1/df[col]\n",
        "\nresult = df.copy()\nresult.columns = [f\"exp_{col} \" for col in result.columns]\nresult = result.apply(lambda x: [math.exp(val) for val in x])\n",
        "\nresult = df.copy()\nfor col in df.columns:\n    if df[col].sum() != 0:\n        result[f\"inv_{col}\"] = 1/df[col]\n",
        "\nresult = df.copy()\nfor col in df.columns:\n    result[f\"sigmoid_{col}\"] = 1/(1+np.exp(-df[col]))\n",
        "\n# [Missing Code]\n# Get the index location of the last occurrence of the column-wise maximum, up to the location of the minimum\nresult = df.idxmax().apply(lambda x: df.index[df[x] == df[x].min()][-1])\n",
        "\n# [Missing Code]\n# Get the index location of the first occurrence of the column-wise maximum, down to the location of the minimum\nresult = df.idxmin(axis=0).where(df.idxmin(axis=0) == df.idxmax(axis=0), df.idxmax(axis=0))\n",
        "\nmin_dt = df['dt'].min()\nmax_dt = df['dt'].max()\n\nresult = pd.DataFrame({'dt': pd.date_range(min_dt, max_dt), 'user': ['a']*len(pd.date_range(min_dt, max_dt)) + ['b']*len(pd.date_range(min_dt, max_dt)), 'val': [0]*len(pd.date_range(min_dt, max_dt))})\nresult = result.merge(df, on=['dt', 'user'], how='left')\nresult['val'] = result['val'].fillna(0)\n",
        "\nresult = df.groupby(['user','dt']).agg({'val': 'min', 'val': 'max'})\nresult = result.reset_index()\nresult = result.pivot(index='dt', columns='user', values='val')\nresult = result.fillna(0)\n",
        "\nmin_dt = df['dt'].min()\nmax_dt = df['dt'].max()\n\nresult = pd.DataFrame({'dt': pd.date_range(min_dt, max_dt), 'user': ['a','a','b','b','a','a','b','b','a','a','b','b'], 'val': [1,33,2,1,233,233,233,233,233,233,2,1]})\n",
        "\nresult = pd.DataFrame({'dt': pd.date_range(df['dt'].min(), df['dt'].max()), 'user': df['user'].unique(), 'val': df.groupby('user')['val'].max()})\n",
        "\nmin_dt = df['dt'].min()\nmax_dt = df['dt'].max()\n\nresult = pd.DataFrame({'dt': pd.date_range(min_dt, max_dt), 'user': ['a']*len(pd.date_range(min_dt, max_dt)), 'val': [df[df['user'] == 'a']['val'].max()]*len(pd.date_range(min_dt, max_dt))})\n",
        "\n# Create a new column 'id' with unique IDs for each name\ndf['id'] = df['name'].astype('category').cat.codes + 1\n",
        "\n# Create a new dataframe with unique IDs for each a\nunique_ids = pd.DataFrame({'a': df['a'].unique(), 'id': range(1, len(df['a'].unique())+1)})\n\n# Merge the new dataframe with the original dataframe on a\nresult = pd.merge(df, unique_ids, on='a')\n",
        "\n    # Create a new column 'id' with unique IDs for each name\n    df['id'] = df['name'].astype('category').cat.codes\n",
        "\n# Create a new dataframe with unique IDs for each name and a\ndf_new = pd.DataFrame({'ID': df['name'].astype('category').cat.codes,\n                       'b': df['b'],\n                       'c': df['c']})\n",
        "\n# pivot the table\nresult = pd.pivot_table(df, values=['01/12/15', '02/12/15'], index=['user'], columns=['someBool'], aggfunc='first')\n",
        "\n# pivot_table is a pandas function that can be used to rearrange and summarize data.\n# Here, we want to pivot the table so that the 'others' and 'value' columns are combined into one column.\n# We can use the pivot_table function to achieve this.\n# The pivot_table function takes the following arguments:\n# data: the dataframe to pivot\n# values: the column(s) to use as values in the pivot table\n# index: the column(s) to use as the index of the pivot table\n# columns: the column(s) to use as the columns of the pivot table\n# aggfunc: the aggregation function to use for the values in the pivot table\n# fill_value: the value to replace missing values with\nresult = pd.pivot_table(df, values=['01/12/15', 'someBool'], index='user', columns='02/12/15', aggfunc='first', fill_value=0)\n",
        "\n# pivot the table\nresult = pd.pivot_table(df, values='01/12/15', index=['user'], columns=['01/12/15', '02/12/15'], aggfunc='first')\n\n# add the missing values\nresult = result.reset_index()\nresult = result.fillna(method='ffill')\nresult = result.fillna(method='bfill')\nresult = result.fillna(0)\n\n# add the boolean column\nresult['someBool'] = df['someBool']\n",
        "\nresult = df[df.c > 0.5][columns]\n",
        "\nresult = df[df.c > 0.45][columns]\n",
        "\n    locs = [df.columns.get_loc(_) for _ in columns]\n    result = df[df.c > 0.5][locs]\n",
        "\nimport pandas as pd\ndef f(df, columns=['b', 'e']):\n    locs = [df.columns.get_loc(_) for _ in columns]\n    result = df[df.c > 0.5][locs]\n    result['sum'] = result.apply(lambda x: x.sum(), axis=1)\n    return result\n",
        "\n    locs = [df.columns.get_loc(_) for _ in columns]\n    result = df[df.c > 0.5][locs]\n",
        "\nfilter_dates = []\nfor index, row in df.iterrows():\n    if X == 0:\n        filter_dates.append(index)\n    else:\n        for i in range(1, X):\n            filter_dates.append((index.date() + timedelta(days=i)))\nresult = df[~df.index.isin(filter_dates)]\n",
        "\nfilter_dates = []\nfor index, row in df.iterrows():\n    if X == 1:\n        continue\n    for i in range(1, X):\n        filter_dates.append((index.date() + timedelta(weeks=i)))\ndf = df[~df.index.isin(filter_dates)]\n",
        "\n# Create a list of dates to filter out\nfilter_dates = []\nfor index, row in df.iterrows():\n    observation_time = 'D'\n    observation_period = X\n    if observation_time == 'D':\n        for i in range(1, observation_period):\n            filter_dates.append((index.date() + timedelta(days=i)))\n\n# Filter out the dates from the dataframe\ndf = df[~df.index.isin(filter_dates)]\n",
        "\nresult = df.groupby(df.index // 3).mean()\n",
        "\n# Create a new dataframe with the binned values\nresult = pd.DataFrame({'col1':[df.col1.iloc[i:i+3].sum() for i in range(0, len(df), 3)]})\n",
        "\n# Create a new dataframe with the binned values\nresult = pd.DataFrame({'col1':[df.col1.iloc[i:i+4].sum() for i in range(0, len(df), 4)]})\n",
        "\nresult = df.rolling(3).mean()\n",
        "\nresult = df.groupby(df.index // 3).agg(['sum', 'mean'])\n",
        "\nresult = df.groupby(df.index // 3).agg({'col1': ['sum', 'mean']}).unstack().fillna(0)\n",
        "\ndf = df.fillna(method='ffill')\n",
        "\ndf = df.fillna(method='ffill')\n",
        "\ndf = df.fillna(method='ffill')\ndf = df.fillna(method='bfill')\n",
        "\n# [Missing Code]\n# Separate numbers from time and put them in two new columns\ndf['number'] = df.duration.str.extract(r'(\\d+)', expand=False)\ndf['time'] = df.duration.str.extract(r'(\\w+)', expand=False)\n\n# Create another column based on the values of time column\ndf['time_days'] = df.time.replace(r'(year|month|week|day)', r'(365|30|7|1)', regex=True)\n",
        "\ndf['numer'] = df.duration.str.extract(r'(\\d+)', expand=False)\ndf['time'] = df.duration.str.extract(r'(\\D+)', expand=False)\ndf['time_day'] = df['time'].replace(r'(year|month|week|day)', r'(365|30|7|1)', regex=True)\n",
        "\n    df['numer'] = df.duration.str.extract(r'(\\d+)', expand=False)\n    df['time'] = df.duration.str.extract(r'(\\w+)', expand=False)\n    df['time_days'] = df.time.replace(r'(year|month|week|day)', r'(365|30|7|1)', regex=True)\n",
        "\n# [Missing Code]\n# Separate numbers from time and put them in two new columns\ndf['number'] = df.duration.str.extract(r'(\\d+)', expand=False)\ndf['time'] = df.duration.str.extract(r'(\\D+)', expand=False)\n\n# Create another column based on the values of time column\ndf['time_day'] = df.time.replace(r'(year|month|week|day)', r'(365|30|7|1)', regex=True)\ndf['time_day'] = df['time_day'].astype(int) * df['number'].astype(int)\n",
        "\nresult = np.where([df1[column] != df2[column] for column in columns_check_list])\n",
        "\nresult = np.where([df1[column] == df2[column] for column in columns_check_list])\n",
        "\ndf.index.levels[1] = pd.to_datetime(df.index.levels[1])\n",
        "\ndf.index.levels[1] = pd.to_datetime(df.index.levels[1])\n",
        "\n    dates = []\n    for date in df.index:\n        dates.append(Timestamp(date))\n    dates = np.array(dates)\n    # [Missing Code]\n",
        "\n    df.index = pd.to_datetime(df.index)\n    df = df.swaplevel(0, 1)\n",
        "\n# [Missing Code]\n# Reshape the data to long format\ndf_long = pd.melt(df, id_vars=['Country', 'Variable'], value_vars=['2000', '2001', '2002', '2003', '2004', '2005'], var_name='year', value_name='value')\n",
        "\n# [Missing Code]\n# Reshape the data to long format with year as descending order\ndf_long = pd.melt(df, id_vars=['Country', 'Variable'], value_vars=['2000', '2001', '2002', '2003', '2004', '2005'], var_name='year', value_name='value')\n# Reverse the order of year\ndf_long['year'] = df_long['year'].apply(lambda x: int(x[-2:]) + 2000)\n",
        "\nresult = df[df.apply(lambda x: abs(x['Value_B']) < 1 and abs(x['Value_C']) < 1 and abs(x['Value_D']) < 1, axis=1)]\n",
        "\nresult = df[(abs(df['Value_B']) > 1) | (abs(df['Value_C']) > 1) | (abs(df['Value_D']) > 1)]\n",
        "\ndf = df.loc[abs(df.filter(like='Value_').values) > 1]\ndf = df.rename(columns=lambda x: x.replace('Value_', ''))\n",
        "\ndf['A'] = df['A'].str.replace('&AMP;', '&')\n",
        "\ndf['A'] = df['A'].str.replace('&LT', '<')\n",
        "\n    df['A'] = df['A'].str.replace('&AMP;', '&')\n",
        "\ndf['A'] = df['A'].str.replace('&AMP;', '&')\ndf['A'] = df['A'].str.replace('&LT;', '<')\ndf['A'] = df['A'].str.replace('&GT;', '>')\n",
        "\ndf['A'] = df['A'].str.replace('&AMP;', '&')\n",
        "\n# Apply the validate_single_space_name function to the name column of the DataFrame\ndf['name'] = df['name'].apply(validate_single_space_name)\n",
        "\n# Apply the validate_single_space_name function to each name in the DataFrame\ndf['name'] = df['name'].apply(validate_single_space_name)\n",
        "\n# Apply the validate_single_space_name function to each name in the name column\ndf['name'] = df['name'].apply(validate_single_space_name)\n",
        "\nresult = pd.DataFrame({'Timestamp': df2['Timestamp'], 'stuff': df2['stuff'], 'data': df1['data']})\n",
        "\nresult = pd.DataFrame()\nfor index, row in df1.iterrows():\n    timestamp = row['Timestamp']\n    data = row['data']\n    df2_row = df2[df2['Timestamp'] == timestamp]\n    if not df2_row.empty:\n        stuff = df2_row['stuff'].values[0]\n        result = result.append({'Timestamp': timestamp, 'data': data, 'stuff': stuff}, ignore_index=True)\n",
        "\ndf['state'] = df[['col1', 'col2', 'col3']].apply(lambda x: x.max() if x.min() <= 50 else x['col1'], axis=1)\n",
        "\ndf['state'] = df.apply(lambda x: x['col1'] if x['col2'] > 50 and x['col3'] > 50 else x['col1'] + x['col2'] + x['col3'], axis=1)\n",
        "\nerrors = []\nfor index, row in df.iterrows():\n    if not isinstance(row[\"Field1\"], int):\n        errors.append(row[\"Field1\"])\n",
        "\ninteger_list = []\nfor index, row in df.iterrows():\n    if row[\"Field1\"].isnumeric():\n        integer_list.append(int(row[\"Field1\"]))\n",
        "\n    errors = []\n    for index, row in df.iterrows():\n        if not isinstance(row[\"Field1\"], int):\n            errors.append(row[\"Field1\"])\n",
        "\n# Compute the percentage of each value in each category\nfor cat in df['cat'].unique():\n    row_total = df[df['cat'] == cat].sum(axis=1)\n    for val in df.columns[1:]:\n        df.loc[df['cat'] == cat, val] = df.loc[df['cat'] == cat, val] / row_total\n",
        "\n# Compute the total for each category\ntotal = df.groupby('cat').sum()\n\n# Compute the percentage for each category\nresult = df.div(total, axis=0)\n",
        "\nresult = df.loc[test]\n",
        "\nresult = df.loc[test]\n",
        "\n# Delete rows from df using the list of row names test\ndf = df.drop(test)\n",
        "\n    result = df.loc[test]\n",
        "\n# Calculate pairwise distances between cars\ndf['distance'] = df.groupby('car')['x'].transform(lambda x: np.sqrt((x.max() - x) ** 2 + (df['y'].max() - df['y']) ** 2))\n\n# Get nearest neighbour for each car\ndf['nearest_neighbour'] = df.groupby('car')['distance'].transform(lambda x: x.idxmin())\n\n# Calculate euclidean distance between each car and their nearest neighbour\ndf['euclidean_distance'] = df.groupby(['time', 'car'])['distance'].transform(lambda x: x.min())\n",
        "\n# Calculate pairwise euclidean distances between cars\ndf['euclidean_distance'] = df.groupby('car')['x', 'y'].apply(lambda x: np.sqrt((x['x'] - x['x'].shift())**2 + (x['y'] - x['y'].shift())**2))\n\n# Get the farmost neighbour for each car\ndf['farmost_neighbour'] = df.groupby('car')['euclidean_distance'].transform(max) == df['euclidean_distance']\n\n# Calculate the average distance for each time point\nresult = df.groupby('time')['euclidean_distance'].mean().reset_index()\n",
        "\ncols = [df.keywords_0, df.keywords_1, df.keywords_2, df.keywords_3]\ndf[\"keywords_all\"] = df[\"keywords_all\"].apply(lambda cols: \",\".join(cols), axis=1)\n",
        "\ncols = [df.keywords_0, df.keywords_1, df.keywords_2, df.keywords_3]\ndf[\"keywords_all\"] = df[\"keywords_all\"].apply(lambda cols: \"-\".join(cols), axis=1)\n",
        "\ncols = [df.keywords_0, df.keywords_1, df.keywords_2, df.keywords_3]\ndf[\"keywords_all\"] = df[\"keywords_all\"].apply(lambda cols: \"-\".join(cols), axis=1)\n",
        "\ncols = [df.keywords_0, df.keywords_1, df.keywords_2, df.keywords_3]\ndf[\"keywords_all\"] = df[\"keywords_all\"].apply(lambda cols: \"-\".join(cols), axis=1)\n",
        "\n# Select 20% of rows using df.sample(n) and set random_state=0\n# Change the value of the Quantity column of these rows to zero\n# Keep the indexes of the altered rows\ndf_sample = df.sample(frac=0.2, random_state=0)\ndf_sample['Quantity'] = 0\ndf_sample.index = df_sample.index.map(str) + '_altered'\n\n# Concatenate the original DataFrame with the sampled DataFrame\nresult = pd.concat([df, df_sample])\n",
        "\n# Select 20% of rows using df.sample(n) and set random_state=0\n# Change the value of the ProductId column of these rows to zero\n# Keep the indexes of the altered rows\n# [Missing Code]\n",
        "\n# Select 20% of rows for each user using df.sample(n) and set random_state=0\n# Change the value of the Quantity column of these rows to zero\n# Keep the indexes of the altered rows\nresult = df.groupby('UserId').apply(lambda x: x.sample(frac=0.2, random_state=0)).reset_index(drop=True)\nresult.loc[result['Quantity'] != 0, 'Quantity'] = 0\n",
        "\nduplicate_bool = df.duplicated(subset=['col1','col2'], keep='first')\nduplicate = df.loc[duplicate_bool == True]\nduplicate['index_original'] = duplicate.index.values\n",
        "\nduplicate_bool = df.duplicated(subset=['col1','col2'], keep='last')\nduplicate = df.loc[duplicate_bool == True]\nduplicate['index_original'] = duplicate.index.values\n",
        "\n    duplicate_bool = df.duplicated(subset=['col1','col2'], keep='first')\n    duplicate = df.loc[duplicate_bool == True]\n    duplicate['index_original'] = duplicate.index\n",
        "\nduplicate_bool = df.duplicated(subset=['col1','col2', '3col'], keep='first')\nduplicate = df.loc[duplicate_bool == True]\nduplicate['index_original'] = duplicate.index\n",
        "\nduplicate_bool = df.duplicated(subset=['col1','col2'], keep='last')\nduplicate = df.loc[duplicate_bool == True]\nduplicate['index_original'] = duplicate.index.values\n",
        "\nresult = df.groupby(['Sp','Mt'])['count'].agg(['max']).reset_index()\nresult = df[df['count']==result['max']]\n",
        "\nresult = df.groupby(['Sp','Mt'])['count'].agg('max').reset_index()\n",
        "\nresult = df.groupby(['Sp','Mt'])['count'].agg(['min']).reset_index()\nresult = result[result['count']['min']==result['count']]\n",
        "\nresult = df.groupby(['Sp','Value'])['count'].agg(['max']).reset_index()\nresult = df[df['count']==result['max']]\n",
        "\nresult=df.query(\"Category==filter_list\")\n",
        "\nresult=df.query(\"Category!=filter_list\")\n",
        "\n# [Missing Code]\n# Create a list of tuples where each tuple contains the first column level, the second column level, and the third column level\nvalue_vars = [('A', 'B', 'E'), ('A', 'B', 'F'), ('A', 'C', 'G'), ('A', 'C', 'H'), ('A', 'D', 'I'), ('A', 'D', 'J')]\n",
        "\n# Create a list of tuples where each tuple contains the column levels to melt\nvalue_vars = [(col1, col2, col3) for col1 in df.columns.levels[0] for col2 in df.columns.levels[1] for col3 in df.columns.levels[2]]\n\n# Melt the DataFrame using the list of tuples as value_vars\nresult = pd.melt(df, id_vars=None, value_vars=value_vars, var_name=['variable_0', 'variable_1', 'variable_2'], value_name='value')\n",
        "\ndf['cumsum'] = df.groupby('id')['val'].apply(lambda x: x.cumsum())\n",
        "\ndf['cumsum'] = df.groupby('id')['val'].transform(pd.Series.cumsum)\n",
        "\ndf['cumsum'] = df.groupby('id')['val'].apply(lambda x: x.cumsum())\n",
        "\ndf['cummax'] = df.groupby('id')['val'].transform(pd.Series.cummax)\n",
        "\ndf['cumsum'] = df.groupby('id')['val'].apply(lambda x: x.cumsum().where(x.cumsum()>=0, 0))\n",
        "\nresult = df.groupby('l')['v'].sum(skipna=False)\n",
        "\nresult = df.groupby('r')['v'].sum(skipna=False)\n",
        "\nresult = df.groupby('l')['v'].sum(skipna=False)\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n# Create a DataFrame with the type of relationship each pair of columns has\n# The DataFrame should have the same shape as the input DataFrame\n# The DataFrame should have the same index and columns as the input DataFrame\n# The DataFrame should have the following columns:\n# - Column1: one-to-many, one-to-many, one-to-one, one-to-many, one-to-many\n# - Column2: many-to-one, NaN, many-to-many, many-to-one, many-to-many\n# - Column3: many-to-one, many-to-many, NaN, many-to-one, many-to-many\n# - Column4: one-to-one, one-to-many, one-to-many, NaN, one-to-many\n# - Column5: many-to-one, many-to-many, many-to-many, many-to-one, NaN\n\n# The DataFrame should have the following values:\n# - Column1: NaN, one-to-many, one-to-many, one-to-one, one-to-many\n# - Column2: many-to-one, NaN, many-to-many, many-to-one, many-to-many\n# - Column3: many-to-one, many-to-many, NaN, many-to-one, many-to-many\n# - Column4: one-to-one, one-to-many, one-to-many, NaN, one-to-many\n# - Column5: many-to-one, many-to-many, many-to-many, many-to-one, NaN\n\n",
        "\n# [Missing Code]\n# Create an empty DataFrame with the same columns as the input DataFrame\nresult = pd.DataFrame(columns=df.columns)\n\n# Loop through each column in the input DataFrame\nfor col in df.columns:\n    # Create a new column in the result DataFrame with the same name as the input column\n    result[col] = ''\n    # Loop through each row in the input DataFrame\n    for i in range(len(df)):\n        # Check if the current row has a value in the input column\n        if df.iloc[i][col] != '':\n            # Loop through each row in the input DataFrame again\n            for j in range(len(df)):\n                # Check if the current row has a value in the input column\n                if df.iloc[j][col] != '':\n                    # Check if the current row has the same value as the input column\n                    if df.iloc[i][col] == df.iloc[j][col]:\n                        # If the current row has the same value as the input column, set the corresponding cell in the result DataFrame to 'one-2-one'\n                        result.iloc[i][col] = 'one-2-one'\n                    else:\n                        # If the current row does not have the same value as the input column, set the corresponding cell in the result DataFrame to 'one-2-many'\n                        result.iloc[i][col] = 'one-2-many'\n\n# Loop through each column in the input DataFrame\nfor col in df.columns:\n    # Create a new column in the result DataFrame with the same name as the input column\n    result[col] = ''\n    # Loop through each row in the input DataFrame\n    for i in range(len(df)):\n        # Check if the current row has a value in the input column\n        if df.iloc[i][col] != '':\n            # Loop through each row in the input DataFrame again\n            for j in range(len(df)):\n                # Check if the current row has a value in the input column\n                if df.iloc[j][col] != '':\n                    # Check if the current row has the same value as the input column\n                    if df.iloc[i][col] == df.iloc[j][col]:\n                        # If the current row has the same value as the input column, set the corresponding cell in the result DataFrame to 'many-2-one'\n                        result.iloc[j][col] = 'many-2-one'\n                    else:\n                        # If the current row does not have the same value as the input column, set the corresponding cell in the result DataFrame to 'many-2-many'\n                        result.iloc[j][col] = 'many-2-many'\n",
        "\n# [Missing Code]\n",
        "\nimport pandas as pd\nimport locale\n\n# Set the locale to the user's default setting\nlocale.setlocale(locale.LC_ALL, '')\n\n# Create a sample DataFrame\ndf = pd.DataFrame({'Revenue': ['2,144.78', '2,036.62', '1,916.60', '1,809.40', '1,711.97', '6,667.22', '5,373.59', '4,071.00', '3,050.20', '-0.06', '-1.88', '', '-0.13', '', '-0.14', '0.07', '0', '0'],\n                   'Other, Net': ['-0.06', '-1.88', '', '-0.13', '', '-0.14', '0.07', '0', '0', '-0.8', '-1.12', '1.32', '-0.05', '-0.34', '-1.37', '-1.9', '-1.48', '0.1', '41.98', '35', '-11.66', '27.09', '-3.44', '14.13', '-18.69', '-4.87', '-5.7']})\n\n# Convert the Revenue column to float using pd.to_numeric\ndf['Revenue'] = pd.to_numeric(df['Revenue'].str.replace(',', ''), errors='coerce')\n\n# Print the result\nprint(df)\n",
        "\nresult = df.groupby((df['SibSp'] > 0) | (df['Parch'] > 0)).mean()['Survived']\n",
        "\nresult = df.groupby((df['Survived'] > 0) | (df['Parch'] > 0)).mean()['SibSp']\n",
        "\n# Group the data by the given conditions\ngrouped_data = df.groupby((df['SibSp'] == 1) & (df['Parch'] == 1), as_index=False).mean()\ngrouped_data = grouped_data.append(df.groupby((df['SibSp'] == 0) & (df['Parch'] == 0), as_index=False).mean())\ngrouped_data = grouped_data.append(df.groupby((df['SibSp'] == 0) & (df['Parch'] == 1), as_index=False).mean())\ngrouped_data = grouped_data.append(df.groupby((df['SibSp'] == 1) & (df['Parch'] == 0), as_index=False).mean())\n\n# Rename the columns\ngrouped_data.columns = ['Group', 'Survived']\n\n# Set the index to Group\ngrouped_data = grouped_data.set_index('Group')\n\n# Print the result\nprint(grouped_data)\n",
        "\nresult = df.groupby('cokey').apply(lambda x: x.sort_values(['A']))\n",
        "\nresult = df.groupby('cokey').apply(lambda x: x.sort_values(['A']))\n",
        "\ndf.columns = pd.MultiIndex.from_tuples(df.columns)\n",
        "\ndf.columns = pd.MultiIndex.from_tuples(df.columns, names=['Caps', 'Middle', 'Lower'])\n",
        "\ndf.columns = pd.MultiIndex.from_tuples(df.columns)\n",
        "\nresult = pd.DataFrame({'birdType': someTuple[0], 'birdCount': someTuple[1]})\n",
        "\nstdMeann = lambda x: np.std(np.mean(x))\nresult = pd.Series(df.groupby('a')['b'].apply(stdMeann))\n",
        "\nstdMeann = lambda x: np.std(np.mean(x))\nresult = pd.Series(df.groupby('b').a.apply(stdMeann))\n",
        "\n# [Missing Code]\n",
        "\nresult = df.loc[(df['A'] == 1) & (df['B'] == 1) | (df['C'] == 0) & (df['D'] == 1), ['A', 'B', 'D']]\n",
        "\n# Create a new DataFrame with only the rows and columns with sum of 0\nresult = df[(df['A'] + df['B'] + df['C'] + df['D'] == 0)]\n",
        "\nresult = df[df.max(axis=1) != 2]\n",
        "\nresult = df.where(df != 2, 0)\n",
        "\nresult = s.sort_values(ascending=True)\n",
        "\ndf = s.sort_values(ascending=True)\n",
        "\nresult = df[df['A'].apply(lambda x: isinstance(x, (int, float)))]\n",
        "\nresult = df[df['A'].apply(lambda x: isinstance(x, str))]\n",
        "\nresult = df.groupby(['Sp','Mt'])['count'].agg(['max']).reset_index()\nresult = df[df['count']==result['max']]\n",
        "\nresult = df.groupby(['Sp','Mt'])['count'].idxmax()\n",
        "\nresult = df.groupby(['Sp','Mt'])['count'].agg(['min']).reset_index()\nresult = result[result['count']['min']==result['count']]\n",
        "\nresult = df.groupby(['Sp','Value'])['count'].agg(['max']).reset_index()\nresult = df[df['count']==result['max']]\n",
        "\ndf['Date'] = df['Member'].map(dict).fillna(df['Member'])\n",
        "\ndf['Date'] = df.apply(lambda x: dict.get(x['Member'], '17/8/1926'), axis=1)\n",
        "\n    result = df.fillna(df['Member'])\n    # [Missing Code]\n",
        "\ndf['Date'] = df['Member'].map(dict).fillna(df['Member'])\n",
        "\ndf['Count_m'] = df.groupby([df['Date'].dt.year.rename('year'), df['Date'].dt.month.rename('month')]).agg({'count'})['count']\ndf['Count_y'] = df.groupby(df['Date'].dt.year.rename('year')).agg({'count'})['count']\n",
        "\n# [Missing Code]\n# Group by month and year and count the number of occurrences of each value\ndf1 = df.groupby([df['Date'].dt.year.rename('year'), df['Date'].dt.month.rename('month')]).agg({'count'})\n# Group by month and year and count the number of occurrences of each value per month and year\ndf2 = df.groupby([df['Date'].dt.year.rename('year'), df['Date'].dt.month.rename('month'), 'Val']).agg({'count'})\n# Group by month and year and count the number of occurrences of each value per month and year per value\ndf3 = df.groupby([df['Date'].dt.year.rename('year'), df['Date'].dt.month.rename('month'), 'Val']).agg({'count'})\n",
        "\n# Group by month and year and count the number of occurrences of each value\ndf1 = df.groupby([df['Date'].dt.year.rename('year'), df['Date'].dt.month.rename('month')]).agg({'count'})\n\n# Group by weekday and count the number of occurrences of each value\ndf2 = df.groupby([df['Date'].dt.weekday.rename('weekday')]).agg({'count'})\n\n# Group by year and count the number of occurrences of each value\ndf3 = df.groupby([df['Date'].dt.year.rename('year')]).agg({'count'})\n\n# Group by month and count the number of occurrences of each value\ndf4 = df.groupby([df['Date'].dt.month.rename('month')]).agg({'count'})\n\n# Group by weekday and month and count the number of occurrences of each value\ndf5 = df.groupby([df['Date'].dt.weekday.rename('weekday'), df['Date'].dt.month.rename('month')]).agg({'count'})\n\n# Group by weekday, month and year and count the number of occurrences of each value\ndf6 = df.groupby([df['Date'].dt.weekday.rename('weekday'), df['Date'].dt.month.rename('month'), df['Date'].dt.year.rename('year')]).agg({'count'})\n\n# Group by weekday, month and year and count the number of occurrences of each value and value\ndf7 = df.groupby([df['Date'].dt.weekday.rename('weekday'), df['Date'].dt.month.rename('month'), df['Date'].dt.year.rename('year'), 'Val']).agg({'count'})\n\n# Group by weekday, month and year and count the number of occurrences of each value and value\ndf8 = df.groupby([df['Date'].dt.weekday.rename('weekday'), df['Date'].dt.month.rename('month'), df['Date'].dt.year.rename('year'), 'Val']).agg({'count'})\n\n# Group by weekday, month and year and count the number of occurrences of each value and value\ndf9 = df.groupby([df['Date'].dt.weekday.rename('weekday'), df['Date'].dt.month.rename('month'), df['Date'].dt.year.rename('year'), 'Val']).agg({'count'})\n\n# Group by weekday, month and year and count the number of occurrences of each value and value\ndf10 = df.groupby([df['Date'].dt.weekday.rename('weekday'), df['Date'].dt.month.rename('month'), df['Date'].dt.year.rename('year'), 'Val']).agg({'count'})\n\n# Group by weekday, month and year and count the number of occurrences of each value and value\ndf11 = df.groupby([df['Date'].dt.weekday.rename('weekday'), df['Date'].dt.month.rename('month'), df['Date'].dt.year.rename('year'), 'Val']).agg({'count'})\n\n# Group by weekday, month and year and count the number of occurrences of each value and value\ndf12 = df.groupby([df['Date'].dt.weekday.rename('weekday'), df['Date'].dt.month.rename('month'), df['Date'].dt.year.rename('year'), 'Val']).agg({'count'})\n\n# Group by weekday, month and year and count the number of occurrences of each value and value\ndf13 = df.groupby([df['Date'].dt.weekday.rename('weekday'), df['Date'].dt.month.rename('month'), df['Date'].dt.year.rename('year'), 'Val']).agg({'count'})\n\n# Group by weekday, month and year and count the number of occurrences of each value and value\ndf14 = df.groupby([df['Date'].dt.weekday.rename('weekday'), df['Date'].dt.month.rename('month'), df['Date'].dt.year.rename('year'), 'Val']).agg({'count'})\n\n# Group by weekday, month and year and count the",
        "\n# Create a new dataframe with the count of zero and non-zero values for each column for each date\nresult1 = df.groupby('Date').apply(lambda x: pd.Series(x.eq(0).sum(), name='zero'))\nresult2 = df.groupby('Date').apply(lambda x: pd.Series(x.ne(0).sum(), name='non-zero'))\n",
        "\nresult1 = df.groupby('Date')['B', 'C'].sum().loc[df['B'] % 2 == 0]\nresult2 = df.groupby('Date')['B', 'C'].sum().loc[df['B'] % 2 != 0]\n",
        "\nresult = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D':np.sum, 'E':np.mean})\n",
        "\nresult = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc=[np.sum, np.mean])\n",
        "\nresult = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc={'D':np.sum, 'E':np.mean})\n",
        "\nresult = pd.pivot_table(df, values=['D','E'], rows=['B'], aggfunc=[np.max, np.min])\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\ndef count_special_char(string):\n    special_char = 0\n    for i in range(len(string)):\n        if(string[i].isalpha()):\n            continue\n        else:\n            special_char = special_char + 1\n    return special_char\ndf[\"new\"]=df.apply(lambda x: count_special_char(x['str']), axis = 1)\n",
        "\ndef count_special_char(string):\n    special_char = 0\n    for i in range(len(string)):\n        if(string[i].isalpha()):\n            continue\n        else:\n            special_char = special_char + 1\n    return special_char\ndf[\"new\"]=df.apply(lambda x: count_special_char(x['str']), axis = 1)\n",
        "\ndf['fips'], df['row'] = df['row'].str.split(expand=True)\n",
        "\ndf['fips'], df['row'] = df['row'].str.split(' ', 1).str\n",
        "\ndf['fips'], df['medi'], df['row'] = df['row'].str.split(' ', 2).str\n",
        "\n# Calculate the cumulative average for each row\nresult = df.apply(lambda x: x.where(x != 0).expanding().mean(), axis=1)\n",
        "\n# Calculate the cumulative average for each row from end to head\ndf = df.apply(lambda x: x.where(x != 0).fillna(method='ffill').cumsum() / x.where(x != 0).fillna(method='ffill').cumcount(), axis=1)\n",
        "\n    result = df.apply(lambda x: x.where(x != 0).mean(), axis=1)\n",
        "\n# Calculate the cumulative average for each row from end to head\ndf = df.apply(lambda x: x.where(x != 0).expanding().mean(), axis=1)\n",
        "\ndf['Label'] = 0\ndf['Label'] = (df['Close'] - df['Close'].shift(1) > 1)\n",
        "\ndf['label'] = df['Close'].diff().apply(lambda x: 1 if x > 0 else (0 if x == 0 else -1))\ndf.iloc[0, df.columns.get_loc('label')] = 1\n",
        "\ndf['label'] = df['Close'].diff().apply(lambda x: 1 if x > 0 else (0 if x == 0 else -1))\ndf['DateTime'] = df['DateTime'].dt.strftime('%d-%b-%Y')\n",
        "\ndf['Duration'] = df.departure_time.iloc[1] - df.arrival_time.iloc[0]\n",
        "\ndf['Duration'] = np.nan\nfor i in range(len(df)-1):\n    df['Duration'].iloc[i] = (df['departure_time'].iloc[i+1] - df['arrival_time'].iloc[i]).total_seconds()\n",
        "\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'], format='%Y-%m-%d %H:%M:%S')\ndf['departure_time'] = pd.to_datetime(df['departure_time'], format='%Y-%m-%d %H:%M:%S')\n\nfor i in range(len(df)-1):\n    df.loc[i+1, 'Duration'] = (df.loc[i+1, 'departure_time'] - df.loc[i, 'arrival_time']).total_seconds()\n",
        "\nresult = df.groupby(['key1']).apply(lambda x: x[x['key2'] == 'one'].shape[0])\n",
        "\nresult = df.groupby(['key1']).apply(lambda x: x[x['key2'] == 'two'].shape[0])\n",
        "\nresult = df.groupby(['key1']).apply(lambda x: x[x['key2'].str.endswith('e')].shape[0])\n",
        "\nmax_result = df.index.max()\nmin_result = df.index.min()\n",
        "\n# [Missing Code]\n# Get the mode and median dates\nmode_result = df.mode(axis=0).index[0]\nmedian_result = df.median(axis=0).index[0]\n",
        "\nresult = df[(99 <= df['closing_price']) & (df['closing_price'] <= 101)]\n",
        "\nresult = df[~(99 <= df['closing_price'] <= 101)]\n",
        "\ndf1 = df.groupby(\"item\", as_index=False)[\"diff\"].min()\n",
        "\ndf['SOURCE_NAME'] = df['SOURCE_NAME'].str.split('_').str[-1]\n",
        "\ndf['SOURCE_NAME'] = df['SOURCE_NAME'].str.split('_').str[-1]\n",
        "\n    df['SOURCE_NAME'] = df['SOURCE_NAME'].str.split('_').str[0]\n",
        "\n# Fill the first 50% of NaN values with '0' and the last 50% with '1'\ndf['Column_x'].fillna(0, inplace=True)\ndf.loc[df['Column_x'].isnull(), 'Column_x'] = 1\n",
        "\n# Fill the first 30% of NaN values with '0', the middle 30% with '0.5' and the last with '1'\ndf['Column_x'].fillna(0, inplace=True, limit=int(len(df)*0.3))\ndf['Column_x'].fillna(0.5, inplace=True, limit=int(len(df)*0.6))\ndf['Column_x'].fillna(1, inplace=True)\n",
        "\n# Fill NaN values with 0 first and then with 1\ndf['Column_x'].fillna(0, inplace=True)\ndf['Column_x'].fillna(1, inplace=True)\n",
        "\na_b = pd.concat([a, b], axis=1)\na_b = a_b.apply(lambda x: tuple(x), axis=1)\nresult = pd.DataFrame(a_b.values.tolist(), columns=['one', 'two'])\n",
        "\na_b_c = pd.concat([a, b, c], axis=1)\na_b = pd.DataFrame([tuple(x) for x in a_b_c.values], columns=a_b_c.columns)\n",
        "\na_b = pd.DataFrame([[(1, 5), (2, 6)],[(3, 7), (4, 8)],[(np.nan,9),(np.nan,10)]], columns=['one', 'two'])\n",
        "\ngroups = df.groupby(['username', pd.cut(df.views, bins)])\nresult = groups.size().unstack().fillna(0)\n",
        "\ngroups = df.groupby(pd.cut(df.views, bins))\nresult = groups.username.count()\n",
        "\ngroups = df.groupby(['username', pd.cut(df.views, bins)])\nresult = groups.size().unstack().fillna(0)\n",
        "\nresult = pd.DataFrame({'text': ['abc, def, ghi, jkl']})\n",
        "\nresult = pd.DataFrame({'text': ['-'.join(df['text'].tolist())]})\n",
        "\nresult = pd.DataFrame({'text': ['jkl, ghi, def, abc']})\n",
        "\nresult = pd.Series(df['text'].str.cat(sep=\", \"))\n",
        "\nresult = df['text'].str.cat(sep='-')\n",
        "\nresult = pd.concat([df1, df2], axis=0)\nresult = result.fillna({'city': 'sh', 'district': 'hp'})\n",
        "\nresult = pd.concat([df1, df2], axis=0)\nresult['date'] = pd.to_datetime(result['date']).dt.strftime('%d-%b-%Y')\nresult = result.sort_values(['id', 'date'])\n",
        "\nresult = pd.concat([df1, df2], axis=0)\nresult = result.sort_values(['id', 'date'])\nresult = result.groupby('id').fillna(method='ffill')\n",
        "\nresult = pd.merge(C, D, how='outer', on='A', suffixes=('_x', '_y'))\nresult['B'] = result['B_y'].fillna(result['B_x'])\nresult = result.drop(columns=['B_x', 'B_y'])\n",
        "\nresult = pd.merge(C, D, how='outer', on='A')\nresult['B'] = result['B_x'].fillna(result['B_y'])\nresult = result.drop(columns=['B_x', 'B_y'])\n",
        "\nresult = pd.merge(C, D, how='outer', on='A', suffixes=('_x', '_y'))\nresult['dulplicated'] = result.apply(lambda x: True if x['A_x'] == x['A_y'] else False, axis=1)\n",
        "\nresult = df.groupby('user').agg(lambda x: [list(x['time']), list(x['amount'])]).apply(lambda x: sorted(zip(*x), key=lambda y: y[0]))\n",
        "\nresult = df.groupby('user').agg(lambda x: list(zip(x['time'], x['amount']))).reset_index()\n",
        "\nresult = df.groupby('user').agg(lambda x: x.tolist())\n",
        "\n# Create an empty dataframe with the same index as the series\ndf = pd.DataFrame(index=series.index)\n\n# Iterate over the series and concatenate each numpy array to the dataframe\nfor i, arr in series.iteritems():\n    df = pd.concat([df, pd.DataFrame(arr.reshape(1, -1), columns=df.columns)], axis=0)\n",
        "\n# Create an empty dataframe with the same index as the series\ndf = pd.DataFrame(index=series.index)\n\n# Iterate over the series and create a new column for each numpy array\nfor i, arr in series.iteritems():\n    df[i] = arr\n",
        "\nresult = []\nfor col in df.columns:\n    if s in col and not col == s:\n        result.append(col)\n",
        "\nresult = df.filter(like=s, axis=1)\n",
        "\n# Create a new dataframe with only the columns that contain the string 'spike'\nresult = df.filter(like=s)\n\n# Rename the columns with the string 'spike' to start with 'spike1', 'spike2', 'spike3', etc.\nresult = result.rename(columns=lambda x: x.replace(s, 'spike'+str(result.filter(like=s).shape[1]+1)))\n",
        "\nresult = pd.DataFrame(columns=['code_0', 'code_1', 'code_2'])\nfor i in range(len(df)):\n    codes = df.loc[i, 'codes']\n    if len(codes) == 1:\n        result.loc[i, 'code_0'] = codes[0]\n    elif len(codes) == 2:\n        result.loc[i, 'code_0'] = codes[0]\n        result.loc[i, 'code_1'] = codes[1]\n    elif len(codes) == 3:\n        result.loc[i, 'code_0'] = codes[0]\n        result.loc[i, 'code_1'] = codes[1]\n        result.loc[i, 'code_2'] = codes[2]\n    else:\n        result.loc[i, 'code_0'] = codes[0]\n        result.loc[i, 'code_1'] = codes[1]\n        result.loc[i, 'code_2'] = codes[2]\n",
        "\nresult = pd.DataFrame(columns=['code_1', 'code_2', 'code_3'])\nfor i in range(len(df)):\n    codes = df.loc[i, 'codes']\n    if len(codes) == 1:\n        result.loc[i, 'code_1'] = codes[0]\n    elif len(codes) == 2:\n        result.loc[i, 'code_1'] = codes[0]\n        result.loc[i, 'code_2'] = codes[1]\n    elif len(codes) == 3:\n        result.loc[i, 'code_1'] = codes[0]\n        result.loc[i, 'code_2'] = codes[1]\n        result.loc[i, 'code_3'] = codes[2]\n    else:\n        result.loc[i, 'code_1'] = codes[0]\n        result.loc[i, 'code_2'] = codes[1]\n        result.loc[i, 'code_3'] = codes[2]\n",
        "\nresult = pd.DataFrame(columns=['code_1', 'code_2', 'code_3'])\nfor i in range(len(df)):\n    codes = df.loc[i, 'codes']\n    if len(codes) == 1:\n        result.loc[i, 'code_1'] = codes[0]\n    elif len(codes) == 2:\n        result.loc[i, 'code_1'] = codes[0]\n        result.loc[i, 'code_2'] = codes[1]\n    elif len(codes) == 3:\n        result.loc[i, 'code_1'] = codes[0]\n        result.loc[i, 'code_2'] = codes[1]\n        result.loc[i, 'code_3'] = codes[2]\n    else:\n        result.loc[i, 'code_1'] = codes[0]\n        result.loc[i, 'code_2'] = codes[1]\n        result.loc[i, 'code_3'] = codes[2]\n",
        "\nids = df.loc[0:1, 'col1'].values.tolist()\nresult = []\nfor i in ids:\n    result.extend(i)\n",
        "\nresult = ''\nfor i in df['col1']:\n    i = list(map(str, i))\n    i = ','.join(i)\n    result += i\n",
        "\n# Convert list values in column to string\ndf['col1'] = df['col1'].apply(lambda x: ','.join(map(str, x)))\n",
        "\npan = df.set_index('Time')\npan = pan.resample('2T').mean()\nresult = pan.reset_index()\n",
        "\npan = df.set_index('Time')\npan = pan.resample('3T').mean()\npan = pan.reset_index()\npan = pan.groupby(pd.Grouper(key='Time', freq='3T')).sum()\npan = pan.interpolate(method='linear')\n",
        "\ndf['TIME'] = pd.to_datetime(df['TIME'])\n",
        "\ndf['TIME'] = pd.to_datetime(df['TIME'])\n",
        "\ndf['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=False)\n",
        "\nresult = df[filt]\n",
        "\nresult = df[filt]\n",
        "\nimport pandas as pd\nimport numpy as np\nimport math\n\nnp.random.seed(10)\ndf = pd.DataFrame(np.random.randint(0, 20, (10, 10)).astype(float), columns=[\"c%d\"%d for d in range(10)])\ndf.where(np.random.randint(0,2, df.shape).astype(bool), np.nan, inplace=True)\n\ndef equalp(x, y):\n    return (x == y) or (math.isnan(x) and math.isnan(y))\n\nresult = df.apply(lambda x: all(equalp(x[i], x[j]) for j in range(len(x)) if i != j), axis=1)\nresult = df.columns[result]\nprint(result)\n",
        "\nimport pandas as pd\nimport numpy as np\nimport math\n\nnp.random.seed(10)\ndf = pd.DataFrame(np.random.randint(0, 20, (10, 10)).astype(float), columns=[\"c%d\"%d for d in range(10)])\ndf.where(np.random.randint(0,2, df.shape).astype(bool), np.nan, inplace=True)\n\ndef equalp(x, y):\n    return (x == y) or (math.isnan(x) and math.isnan(y))\n\nresult = df.iloc[0].eq(df.iloc[8]).index[df.iloc[0].eq(df.iloc[8])].tolist()\n\nprint(result)\n",
        "\nimport pandas as pd\nimport numpy as np\nimport math\n\nnp.random.seed(10)\ndf = pd.DataFrame(np.random.randint(0, 20, (10, 10)).astype(float), columns=[\"c%d\"%d for d in range(10)])\ndf.where(np.random.randint(0,2, df.shape).astype(bool), np.nan, inplace=True)\n\ndef equalp(x, y):\n    return (x == y) or (math.isnan(x) and math.isnan(y))\n\nresult = []\nfor i in range(2):\n    row = df.iloc[i]\n    for j in range(i+1, df.shape[0]):\n        if all(equalp(row[k], df.iloc[j][k]) for k in df.columns):\n            result.append(list(df.columns[row != df.iloc[j]]))\n\nprint(result)\n",
        "\nimport pandas as pd\nimport numpy as np\nimport math\n\nnp.random.seed(10)\ndf = pd.DataFrame(np.random.randint(0, 20, (10, 10)).astype(float), columns=[\"c%d\"%d for d in range(10)])\ndf.where(np.random.randint(0,2, df.shape).astype(bool), np.nan, inplace=True)\n\ndef equalp(x, y):\n    return (x == y) or (math.isnan(x) and math.isnan(y))\n\nresult = []\nfor i in range(10):\n    for j in range(i+1, 10):\n        if not equalp(df.iloc[0,i], df.iloc[0,j]):\n            result.append((df.columns[i], df.columns[j]))\n\nprint(result)\n",
        "\nts = pd.Series(df['Value'], index=df['Date'])\n",
        "\nresult = df.iloc[0]\n",
        "\nresult = df.iloc[0]\n",
        "\ndf['dogs'] = df['dogs'].apply(lambda x: round(x, 2))\n",
        "\ndf['dogs'] = df['dogs'].round(2)\ndf['cats'] = df['cats'].round(2)\n",
        "\ndf['Sum'] = df[list_of_my_columns].sum(axis=1)\n",
        "\ndf['Avg'] = df[list_of_my_columns].mean(axis=1)\n",
        "\ndf['Avg'] = df[list_of_my_columns].mean(axis=1)\n",
        "\nresult = df.sort_values(by=['time'])\n",
        "\nresult = df.sort_values(by='VIM', ascending=True)\n",
        "\n# [Missing Code]\n# Delete rows with index '2020-02-17' and '2020-02-18'\ndf = df.drop(['2020-02-17', '2020-02-18'])\n",
        "\n# [Missing Code]\n# Delete rows with dates '2020-02-17' and '2020-02-18'\ndf = df[~((df.index.date == '2020-02-17') | (df.index.date == '2020-02-18'))]\n",
        "\nresult = corr.filter(regex='^(?!.*(0|1)).*$', axis=1)\n",
        "\nresult = corr.where(lambda x: x > 0.3).dropna()\n",
        "\ndf.columns[-1] = 'Test'\n",
        "\ndf.columns[0] = 'Test'\n",
        "\n# Create a new dataframe with frequent and freq_count columns\nfrequent_df = pd.DataFrame(columns=['frequent', 'freq_count'])\n\n# Loop through each row of the dataframe\nfor index, row in df.iterrows():\n    # Create a list of all the unique values in the row\n    unique_values = list(set(row))\n    # Create a dictionary to store the count of each unique value\n    value_count = {}\n    for value in unique_values:\n        value_count[value] = row.tolist().count(value)\n    # Find the frequent value and its count\n    frequent_value = max(value_count, key=value_count.get)\n    frequent_count = value_count[frequent_value]\n    # Add the frequent value and its count to the frequent_df\n    frequent_df.loc[index] = [frequent_value, frequent_count]\n\n# Add the frequent_df to the original dataframe\nresult = pd.concat([df, frequent_df], axis=1)\n",
        "\n# Create a new dataframe with frequent and freq_count columns\nfrequent_df = pd.DataFrame(columns=['frequent', 'freq_count'])\n\n# Loop through each row of the dataframe\nfor index, row in df.iterrows():\n    # Create a list of unique values in the row\n    unique_values = list(set(row))\n    # Find the most frequent value in the row\n    frequent_value = max(unique_values, key=unique_values.count)\n    # Count the frequency of the most frequent value in the row\n    freq_count = unique_values.count(frequent_value)\n    # Append the frequent and freq_count values to the frequent_df\n    frequent_df.loc[index] = [frequent_value, freq_count]\n\n# Add the frequent and freq_count columns to the original dataframe\ndf['frequent'] = frequent_df['frequent']\ndf['freq_count'] = frequent_df['freq_count']\n",
        "\n# Create a new dataframe with frequent and freq_count columns\nfrequent_df = pd.DataFrame(columns=['frequent', 'freq_count'])\n\n# Loop through each row of the dataframe\nfor index, row in df.iterrows():\n    # Create a list of frequent values in the row\n    frequent_values = []\n    for col in df.columns:\n        if row[col] == 1:\n            frequent_values.append(col)\n    # Add the frequent values and their count to the frequent_df\n    frequent_df.loc[index] = [frequent_values, len(frequent_values)]\n\n# Add the frequent_df to the original dataframe\ndf = pd.concat([df, frequent_df], axis=1)\n",
        "\nresult = df.groupby([\"id1\",\"id2\"])[\"foo\",\"bar\"].mean()\n",
        "\nresult = df.groupby([\"id1\",\"id2\"])[\"foo\",\"bar\"].mean().fillna(0)\n",
        "\nresult = pd.merge(df_a, df_b, on='EntityNum', how='inner')\nresult = result.drop(columns=['b_col'])\n",
        "\nresult = pd.merge(df_a, df_b, on='EntityNum', how='inner')\nresult = result.drop(columns=['a_col'])\n"
    ],
    "Numpy": [
        "\nresult = a.shape\n",
        "\nx = x[~np.isnan(x)]\n",
        "\nx[np.isnan(x)] = np.inf\n",
        "\nresult = x[~np.isnan(x)].tolist()\n",
        "\nb = np.zeros((len(a), max(a)+1))\nfor i in range(len(a)):\n    b[i][a[i]] = 1\n",
        "\nb = np.zeros((len(a), a.max()+1))\nb[np.arange(len(a)), a] = 1\n",
        "\nb = np.zeros((len(a), max(a)+1))\nb[np.arange(len(a)), a] = 1\n",
        "\nb = np.zeros((len(a), max(a)+1))\nb[np.arange(len(a)), a.astype(int)] = 1\n",
        "\nb = np.zeros((a.shape[0], a.max()+1))\nb[np.arange(a.shape[0]), a] = 1\n",
        "\nresult = np.percentile(a, p)\n",
        "\nB = A.reshape(-1,ncol)\n",
        "\nB = A.reshape(nrow,-1)\n",
        "\nB = A.reshape(-1,ncol)\n",
        "\nB = A.reshape(-1,ncol)\n",
        "\nresult = np.roll(a, shift)\n",
        "\nresult = np.roll(a, shift, axis=1)\n",
        "\nresult = np.empty_like(a)\nfor i in range(a.shape[0]):\n    result[i] = np.roll(a[i], shift[i])\n",
        "\n# Generate a random seed\nnp.random.seed(42)\n",
        "\nresult = np.argmax(a)\n",
        "\nresult = np.argmin(a)\n",
        "\nresult = np.unravel_index(np.argmax(a), a.shape, order='F')\n",
        "\nresult = np.unravel_index(np.argmax(a), a.shape)\n",
        "\n    result = np.unravel_index(np.argmax(a), a.shape)\n",
        "\nresult = np.unravel_index(np.argsort(a.flatten())[-2], a.shape)\n",
        "\nz = np.any(np.isnan(a), axis=0)\na = np.delete(a, np.where(z), axis=1)\n",
        "\na = a[~np.isnan(a).any(axis=1)]\n",
        "\nresult = np.array(a)\n",
        "\na = a[:, permutation]\n",
        "\nresult = np.transpose(a, axes=permutation)\n",
        "\nresult = np.unravel_index(np.argmin(a), a.shape)\n",
        "\nresult = np.unravel_index(np.argmax(a), a.shape)\n",
        "\nresult = np.argmin(a, axis=1)\n",
        "\nresult = np.sin(np.deg2rad(degree))\n",
        "\nresult = np.cos(np.radians(degree))\n",
        "\nif np.sin(np.deg2rad(number)) > 0:\n    result = 0\nelse:\n    result = 1\n",
        "\nresult = np.arcsin(value) * 180 / np.pi\n",
        "\nresult = np.pad(A, (0, length - len(A)), 'constant', constant_values=(0))\n",
        "\nresult = np.pad(A, (0, length - len(A)), 'constant', constant_values=(0))\n",
        "\na = a ** power\n",
        "\n    result = a ** power\n",
        "\nresult = np.gcd(numerator, denominator)\nnumerator //= result\ndenominator //= result\n",
        "\n    result = np.gcd(numerator, denominator)\n    numerator //= result\n    denominator //= result\n",
        "\nresult = np.gcd(numerator, denominator)\nif result == 0:\n    result = (np.nan, np.nan)\nelse:\n    result = (numerator // result, denominator // result)\n",
        "\nresult = (a + b + c) / 3\n",
        "\nresult = np.maximum(np.maximum(a, b), c)\n",
        "\nimport numpy as np\na = np.array([[ 0,  1,  2,  3,  4],\n   [ 5,  6,  7,  8,  9],\n   [10, 11, 12, 13, 14],\n   [15, 16, 17, 18, 19],\n   [20, 21, 22, 23, 24]])\ndiagonal = np.diag_indices(5, k=1)\nresult = a[diagonal]\nprint(result)\n",
        "\ndiagonal = np.diag_indices(5, k=1)\nresult = a[diagonal]\n",
        "\ndiagonal = np.diag_indices(5, k=1)\nresult = a[diagonal]\n",
        "\ndiagonal = np.diag_indices(5, k=-1)\nresult = a[diagonal]\n",
        "\nresult = []\nfor i in range(X.shape[0]):\n    for j in range(X.shape[1]):\n        result.append(X[i][j])\n",
        "\nresult = []\nfor i in range(X.shape[0]):\n    for j in range(X.shape[1]):\n        result.append(X[i][j])\n",
        "\n    result = []\n    for i in range(X.shape[0]):\n        for j in range(X.shape[1]):\n            result.append(X[i][j])\n",
        "\nresult = []\nfor i in range(X.shape[0]):\n    for j in range(X.shape[1]):\n        result.append(X[i,j])\n",
        "\nresult = np.fromstring(mystr, dtype=int, sep='')\n",
        "\nresult = np.multiply(a[:, col], multiply_number).cumsum()\n",
        "\nrow_array = a[row, :]\nrow_array = row_array * multiply_number\nresult = np.cumsum(row_array)\n",
        "\nrow_array = a[row]\nrow_array = row_array / divide_number\nresult = np.prod(row_array)\n",
        "\n# [Missing Code]\n",
        "\nresult = a.shape[0]\n",
        "\nt_stat, p_value = scipy.stats.ttest_ind(a, b, equal_var=False)\n",
        "\n# [Missing Code]\n",
        "\nt_stat, p_value = scipy.stats.ttest_ind_from_stats(amean, avar, anobs, bmean, bvar, bnobs, equal_var=False)\n",
        "\noutput = []\nfor i in range(len(A)):\n    if not any(np.all(A[i] == B[j]) for j in range(len(B))):\n        output.append(A[i])\n",
        "\n# [Missing Code]\n# get elements from A that are not in B\nnot_in_B = np.setdiff1d(A, B)\n# get elements from B that are not in A\nnot_in_A = np.setdiff1d(B, A)\n# combine the two arrays\noutput = np.concatenate((not_in_B, not_in_A))\n",
        "\nsort_indices = np.argsort(a, axis=0)\nc = b[sort_indices]\n",
        "\nsort_indices = np.argsort(a, axis=0)\nc = b[sort_indices]\n",
        "\nsort_indices = np.argsort(a, axis=0)[::-1]\nc = b[sort_indices]\n",
        "\n# Sort b by the sum of a\nresult = b[np.argsort(np.sum(a, axis=(1, 2)))]\n",
        "\na = np.delete(a, 2, axis=1)\n",
        "\na = np.delete(a, 2, axis=0)\n",
        "\na = np.delete(a, [0, 2], axis=1)\n",
        "\nresult = np.delete(a, del_col, axis=1)\n",
        "\na_l = a.tolist()\na_l.insert(pos, element)\na = np.asarray(a_l)\n",
        "\na = np.insert(a, pos, element, axis=0)\n",
        "\n    a_l = a.tolist()\n    a_l.insert(pos, element)\n    a = np.asarray(a_l)\n",
        "\na = np.insert(a, pos, element, axis=0)\n",
        "\nresult = np.array([np.copy(array) for array in array_of_arrays])\n",
        "\nresult = np.all(np.all(a == a[0], axis=1))\n",
        "\nresult = np.all(np.apply_along_axis(lambda x: np.array_equal(x, a[0]), 0, a))\n",
        "\n    result = np.all([np.array_equal(a[0], a[i]) for i in range(1,len(a))])\n",
        "\nimport numpy as np\nfrom scipy.integrate import simps\n\ndef f(x, y):\n    return np.cos(x)**4 + np.sin(y)**2\n\nx = np.linspace(0, np.pi, 100)\ny = np.linspace(0, np.pi, 100)\nX, Y = np.meshgrid(x, y)\n\n# Create a 2D array with the weights for Simpson's rule\nweights = np.zeros((100, 100))\nweights[0, :] = 1/3\nweights[-1, :] = 1/3\nweights[:, 0] = 1/3\nweights[:, -1] = 1/3\nweights[1:-1:2, 1:-1:2] = 4/3\nweights[2:-1:2, 2:-1:2] = 2/3\n\n# Multiply the weights by the function values and sum them up\nresult = simps(simps(f(X, Y)*weights, x), y)\n\nprint(result)\n",
        "\nimport numpy as np\nfrom scipy.integrate import simps\n\nexample_x = np.linspace(0, 2*np.pi, 100)\nexample_y = np.linspace(0, np.pi, 100)\ndef f(x = example_x, y = example_y):\n    return np.cos(x)**4 + np.sin(y)**2\n\n# Create a 2D array with the correct weights\nx, y = np.meshgrid(example_x, example_y)\nw = np.zeros_like(x)\nw[1:-1, 1:-1] = 4\nw[0, :] = 2\nw[-1, :] = 2\nw[:, 0] = 2\nw[:, -1] = 2\n\n# Multiply the array by the function and integrate over it using Simpson's rule\nresult = simps(simps(f() * w, example_y), example_x)\n\nprint(result)\n",
        "\ndef ecdf(x):\n  # normalize X to sum to 1\n  x = x / np.sum(x)\n  return np.cumsum(x)\n",
        "\ndef ecdf(x):\n  # normalize X to sum to 1\n  x = x / np.sum(x)\n  return np.cumsum(x)\n\nresult = ecdf(np.sort(grades))\nresult = result[np.searchsorted(grades, eval, side='right')]\n",
        "\ndef ecdf(x):\n  # normalize X to sum to 1\n  x = x / np.sum(x)\n  return np.cumsum(x)\n\n# find the longest interval [low, high) that satisfies ECDF(x) < threshold for any x in [low, high)\nlow = 0\nhigh = len(grades)\nwhile high - low > 1:\n  mid = (low + high) // 2\n  if ecdf(grades[:mid+1])[mid] < threshold:\n    low = mid\n  else:\n    high = mid\n\n",
        "\nnums = np.random.choice([0, 1], size=size, p=[1-one_ratio, one_ratio])\n",
        "\na_np = a.numpy()\n",
        "\na_pt = torch.from_numpy(a)\n",
        "\na_np = a.numpy()\n",
        "\na_tf = tf.convert_to_tensor(a)\n",
        "\nresult = np.argsort(a)[::-1]\n",
        "\nresult = np.argsort(a)\n",
        "\nresult = np.argsort(a)[-N:][::-1]\n",
        "\nresult = np.linalg.matrix_power(A, n)\n",
        "\nresult = []\nfor i in range(0, a.shape[0], 2):\n    for j in range(0, a.shape[1], 2):\n        patch = a[i:i+2, j:j+2]\n        if not np.array_equal(patch[0], patch[1]):\n            result.append(patch)\n",
        "\nresult = []\nfor i in range(a.shape[0] - 1):\n    for j in range(a.shape[1] - 1):\n        result.append(a[i:i+2, j:j+2])\n",
        "\n# [Missing Code]\n",
        "\n# Initialize an empty list to store the patches\nresult = []\n\n# Loop through each row of the array\nfor i in range(0, a.shape[0], patch_size):\n    # Loop through each column of the array\n    for j in range(0, a.shape[1], patch_size):\n        # Extract the patch and append it to the result list\n        patch = a[i:i+patch_size, j:j+patch_size]\n        result.append(patch)\n",
        "\nresult = np.zeros((h, w))\nfor i in range(h):\n    for j in range(w):\n        result[i][j] = a[i//2][j//3][i%2*3+j%3]\n",
        "\n# Initialize an empty list to store the patches\nresult = []\n\n# Loop through each row of the array\nfor i in range(0, a.shape[0], patch_size):\n    # Loop through each column of the array\n    for j in range(0, a.shape[1], patch_size):\n        # Extract the patch and append it to the result list\n        patch = a[i:i+patch_size, j:j+patch_size]\n        result.append(patch)\n",
        "\nresult = a[:,low-1:high]\n",
        "\nresult = a[low:high+1,:]\n",
        "\nresult = a[:, low-1:high]\n",
        "\na = np.fromstring(string, dtype=float, sep=' ')\n",
        "\nresult = np.exp(np.random.uniform(np.log(min), np.log(max), n))\n",
        "\nresult = np.exp(np.random.uniform(np.log(min), np.log(max), n))\n",
        "\n    result = np.exp(np.random.uniform(np.log(min), np.log(max), n))\n",
        "\nB = pd.Series(np.zeros(len(A)))\nB[0] = a*A[0]\nfor t in range(1,len(A)):\n    B[t] = a * A[t] + b * B[t-1]\n",
        "\nB = pd.Series(np.zeros(len(A)))\nB[0] = a*A[0]\nB[1] = a*A[1]+b*B[0]\nfor t in range(2,len(A)):\n    B[t] = a * A[t] + b * B[t-1] + c * B[t-2]\n",
        "\nresult = np.empty((0,))\n",
        "\nresult = np.empty((3,0))\n",
        "\nlinear_index = np.ravel_multi_index(index, dims, order='F')\n",
        "\nresult = np.ravel_multi_index(index, dims, order='C')\n",
        "\nvalues = np.zeros((2,3), dtype='int32,float32')\n",
        "\nresult = np.bincount(accmap, weights=a)\n",
        "\nresult = np.zeros(len(index))\nfor i in range(len(index)):\n    result[i] = np.max(a[index==i])\n",
        "\nresult = np.zeros(3, dtype=int)\nfor i in range(len(accmap)):\n    if accmap[i] >= 0:\n        result[accmap[i]] += a[i]\n    else:\n        result[accmap[i]+1] += a[i]\n",
        "\nresult = np.zeros(len(index))\nfor i in range(len(index)):\n    if index[i] >= 0:\n        result[i] = a[index[i]]\n    else:\n        result[i] = np.min(a[:index[i]])\n",
        "\nimport numpy as np\nx = [[2, 2, 2],\n     [2, 2, 2],\n     [2, 2, 2]]\ny = [[3, 3, 3],\n     [3, 3, 3],\n     [3, 3, 1]]\nz = np.zeros_like(x)\nfor i in range(len(x)):\n    for j in range(len(x[0])):\n        z[i][j] = elementwise_function(x[i][j], y[i][j])\nprint(z)\n",
        "\nresult = np.random.choice(lista_elegir, samples, p=probabilit)\n",
        "\nresult = np.pad(a, ((0, 0), (0, 0), (low_index, -high_index)), mode='constant', constant_values=0)\n",
        "\nresult = np.delete(x, np.where(x < 0))\n",
        "\nresult = np.delete(x, np.where(np.abs(x) == 0))\n",
        "\n# Calculate the number of bins\nnum_bins = len(data) // bin_size\n\n# Create an empty list to store the binned data\nbin_data = []\n\n# Loop through the data and add each bin to the list\nfor i in range(num_bins):\n    bin_data.append(data[i*bin_size:(i+1)*bin_size])\n\n# Calculate the mean of each bin and store in a list\nbin_data_mean = [np.mean(bin) for bin in bin_data]\n",
        "\n# Calculate the number of bins\nnum_bins = len(data) // bin_size\nif len(data) % bin_size != 0:\n    num_bins += 1\n\n# Create an empty list to store the binned data\nbin_data = []\n\n# Loop through the data and bin it into equal partitions\nfor i in range(num_bins):\n    start = i * bin_size\n    end = start + bin_size\n    if end > len(data):\n        end = len(data)\n    bin_data.append(data[start:end])\n\n# Calculate the maximum of each bin\nbin_data_max = [np.max(bin) for bin in bin_data]\n",
        "\nbin_data = []\nfor i in range(0, len(data), bin_size):\n    bin_data.append(data[i:i+bin_size])\nbin_data_mean = np.mean(bin_data, axis=1)\n",
        "\n# Calculate the number of bins\nnum_bins = int(np.ceil(len(data) / bin_size))\n\n# Calculate the bin edges\nbin_edges = np.arange(len(data) - len(data) % bin_size, len(data), bin_size)\n\n# Calculate the binned data\nbin_data = np.split(data, bin_edges)\n\n# Calculate the mean of each bin\nbin_data_mean = [np.mean(bin) for bin in bin_data]\n",
        "\n# Calculate the number of bins\nnum_bins = int(np.ceil(data.shape[1] / bin_size))\n\n# Initialize the binned data array\nbin_data = np.zeros((data.shape[0], num_bins))\n\n# Initialize the binned data mean array\nbin_data_mean = np.zeros((data.shape[0], num_bins))\n\n# Loop through each row of the data array\nfor i in range(data.shape[0]):\n    # Loop through each bin of the data array\n    for j in range(num_bins):\n        # Calculate the start and end indices of the bin\n        start_idx = data.shape[1] - (j+1)*bin_size\n        end_idx = data.shape[1] - j*bin_size\n        # If the bin is larger than the data array, skip it\n        if start_idx < 0:\n            continue\n        # If the bin is smaller than the data array, pad it with zeros\n        if end_idx > data.shape[1]:\n            end_idx = data.shape[1]\n            bin_data[i, j] = np.mean(data[i, start_idx:])\n        else:\n            bin_data[i, j] = np.mean(data[i, start_idx:end_idx])\n        bin_data_mean[i, j] = np.mean(bin_data[i, :j+1])\n",
        "\n# Calculate the number of bins in each row\nnum_bins = (data.shape[1] + bin_size - 1) // bin_size\n\n# Create an empty array to hold the binned data\nbin_data = np.empty((data.shape[0], num_bins), dtype=object)\n\n# Loop through each row and bin it\nfor i in range(data.shape[0]):\n    # Calculate the start and end indices of each bin\n    bin_starts = np.arange(0, data.shape[1], bin_size)\n    bin_ends = np.minimum(bin_starts + bin_size, data.shape[1])\n\n    # Loop through each bin and calculate the mean\n    for j in range(num_bins):\n        bin_data[i, j] = (data[i, bin_starts[j]:bin_ends[j]]).mean()\n\n# Calculate the mean of each bin in each row\nbin_data_mean = np.empty((data.shape[0], num_bins))\nfor i in range(data.shape[0]):\n    for j in range(num_bins):\n        bin_data_mean[i, j] = bin_data[i, j].mean()\n",
        "\ndef smoothclamp(x, x_min, x_max):\n    x = np.clip(x, x_min, x_max)\n    x = (3*x**2 - 2*x**3) * (x_max - x_min) + x_min\n    return x\n",
        "\nimport numpy as np\n\ndef smoothclamp(x, N=5):\n    x_min = 0\n    x_max = 1\n    if x < x_min:\n        x = 0\n    elif x > x_max:\n        x = 1\n    else:\n        x = (x - x_min) / (x_max - x_min)\n    result = 0\n    for i in range(N):\n        result += np.power(x, i) / np.math.factorial(i)\n    return result\n",
        "\nresult = np.correlate(a, b, mode='same')\n",
        "\nresult = df.to_numpy().reshape(4,15,5)\n",
        "\nresult = df.values.reshape((15,4,5))\n",
        "\nresult = np.zeros((a.shape[0], m), dtype=np.uint8)\nfor i in range(a.shape[0]):\n    result[i] = np.unpackbits(np.uint8(a[i]), bitorder='little')[-m:]\n",
        "\nresult = np.zeros((a.shape[0], m), dtype=np.uint8)\nfor i in range(a.shape[0]):\n    num = a[i]\n    if num >= 0:\n        bits = np.unpackbits(np.uint8(num))\n        result[i, -len(bits):] = bits\n    else:\n        bits = np.unpackbits(np.uint8(2**m + num))\n        result[i, -len(bits):] = bits[-len(bits):]\n",
        "\nresult = np.zeros((a.shape[0], m), dtype=np.uint8)\nfor i in range(a.shape[0]):\n    binary = np.unpackbits(np.uint8(a[i]))\n    result[i, :binary.shape[0]] = binary\n",
        "\n# Calculate the mean of the array\nmean = np.mean(a)\n# Calculate the standard deviation of the array\nstd = np.std(a)\n# Calculate the 3rd standard deviation interval\nstart = mean - 3*std\nend = mean + 3*std\n",
        "\n# Calculate the mean of the array\nmean = np.mean(a)\n# Calculate the standard deviation of the array\nstd = np.std(a)\n# Calculate the 2nd standard deviation interval\nstart = mean - 2*std\nend = mean + 2*std\n",
        "\n    # Calculate the mean of the array\n    mean = np.mean(a)\n    # Calculate the standard deviation of the array\n    std = np.std(a)\n    # Calculate the 3rd standard deviation interval\n    start = mean - 3*std\n    end = mean + 3*std\n",
        "\n# Calculate the mean and standard deviation of the array\nmean = np.mean(a)\nstd = np.std(a)\n# Calculate the 2nd standard deviation\nstd_2 = std * 2\n# Calculate the lower and upper bounds of the 2nd standard deviation interval\nlower_bound = mean - std_2\nupper_bound = mean + std_2\n# Create a bool array to store the outliers\nresult = np.zeros(a.shape, dtype=bool)\n# Loop through the array and mark the outliers as True\nfor i in range(len(a)):\n    if a[i] < lower_bound or a[i] > upper_bound:\n        result[i] = True\n",
        "\nmasked_data = ma.masked_where(DataArray < 0, DataArray)\n",
        "\na[zero_rows, :] = 0\na[:, zero_cols] = 0\n",
        "\na[zero_rows,:] = 0\na[:,zero_cols] = 0\n",
        "\na[1, :] = 0\na[:, 0] = 0\n",
        "\nmask = np.zeros_like(a, dtype=bool)\nmask[np.arange(len(a)), np.argmax(a, axis=1)] = True\n",
        "\nmask = np.all(a == np.min(a, axis=1, keepdims=True), axis=1)\n",
        "\n# Calculate the Pearson correlation coefficient of post and distance\nresult = np.corrcoef(post, distance)[0, 1]\n",
        "\nresult = np.array([np.dot(X[:, i].reshape(-1, 1), X[:, i].reshape(1, -1)) for i in range(X.shape[1])])\n",
        "\nX = np.zeros((3, 3))\nfor i in range(3):\n    for j in range(3):\n        X[i] += Y[i][j].dot(Y[i][j].T)\n",
        "\nis_contained = (number in a)\n",
        "\nC = np.array([x for x in A if x not in B])\n",
        "\nC = np.intersect1d(A,B)\n",
        "\nC = np.array([])\nfor i in A:\n    if i >= B[0] and i <= B[1]:\n        C = np.append(C, i)\n    elif i >= B[1] and i <= B[2]:\n        C = np.append(C, i)\n",
        "\nresult = np.argsort(rankdata(a, method='min'), kind='stable')[::-1]\n",
        "\nresult = np.argsort(rankdata(a, method='min'), kind='mergesort')[::-1]\n",
        "\n    # Reverse the order of the ranks\n    result = np.argsort(rankdata(a))\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n# Create an empty array with the desired shape\ndists = np.empty((3, 3, 2))\n\n# Iterate over the x and y distances and assign them to the correct position in the dists array\nfor i in range(3):\n    for j in range(3):\n        dists[i, j] = (x_dists[i, j], y_dists[i, j])\n",
        "\nresult = a[:, second, third]\n",
        "\narr = np.zeros((20,10,10,2))\n",
        "\nl1 = np.sum(np.abs(X), axis=1)\nresult = X / l1.reshape(5,1)\n",
        "\nx = np.sqrt(np.sum(X**2, axis=1))\nresult = X / x[:, np.newaxis]\n",
        "\nx = np.array([LA.norm(v,ord=np.inf) for v in X])\nresult = np.divide(X,x.reshape(-1,1))\n",
        "\nconditions = [df['a'].str.contains(target)]\n",
        "\n# Calculate distance between all points using a for loop\nresult = np.zeros((len(a), len(a)))\nfor i in range(len(a)):\n    for j in range(len(a)):\n        result[i][j] = np.linalg.norm(a[i]-a[j])\n",
        "\nfrom scipy.spatial.distance import pdist, squareform\nresult = squareform(pdist(a))\n",
        "\nfrom scipy.spatial.distance import pdist, squareform\nresult = squareform(pdist(a))\n",
        "\nAVG = np.mean(NA)\n",
        "\nAVG = np.mean(NA)\n",
        "\nimport numpy as np\nA = ['np.inf', '33.33', '33.33', '33.37']\nNA = np.asarray(A, dtype=float)\nAVG = np.mean(NA, axis=0)\nprint(AVG)\n",
        "\nresult = np.unique(a[a != 0])\n",
        "\nresult = np.delete(a, np.where(np.diff(a) == 0)[0]+1)\n",
        "\ndf = pd.DataFrame({'lat': np.concatenate(lat).ravel(),\n                   'lon': np.concatenate(lon).ravel(),\n                   'val': np.concatenate(val).ravel()})\n",
        "\n    df = pd.DataFrame({'lat': np.concatenate(lat), 'lon': np.concatenate(lon), 'val': np.concatenate(val)})\n",
        "\n# Create a list of tuples, where each tuple contains the values of lat, lon, and val for each row\ndata = [(lat[i][j], lon[i][j], val[i][j]) for i in range(len(lat)) for j in range(len(lat[i]))]\n\n# Create a pandas dataframe with columns 'lat', 'lon', and 'val'\ndf = pd.DataFrame(data, columns=['lat', 'lon', 'val'])\n\n# Add a new column 'maximum' to the dataframe, which contains the maximum value of each row\ndf['maximum'] = df.apply(lambda row: max(row['lat'], row['lon'], row['val']), axis=1)\n",
        "\n# Create a 2D array of zeros with the same shape as the input array\nresult = np.zeros_like(a)\n\n# Calculate the number of windows that can fit in the input array\nn_windows = (a.shape[0] - size[0] + 1) * (a.shape[1] - size[1] + 1)\n\n# Create a 2D array of indices for the center of each window\nindices = np.indices(a.shape)\nindices = indices.reshape(2, -1)\n\n# Calculate the center of each window\ncenters = indices - size // 2\n\n# Calculate the starting and ending indices for each window\nstarts = centers - size // 2\nends = starts + size\n\n# Iterate over each window and copy the values into the result array\nfor i in range(n_windows):\n    start = starts[:, i]\n    end = ends[:, i]\n    window = a[start[0]:end[0], start[1]:end[1]]\n    result[start[0]:end[0], start[1]:end[1]] = window\n",
        "\n# Create a 2D array of indices for the center of the window\ncenter_indices = np.indices(size)\ncenter_indices = center_indices.reshape(2, -1).T\n\n# Create a 2D array of indices for the edges of the window\nedge_indices = np.indices(size)\nedge_indices = edge_indices.reshape(2, -1)\nedge_indices = np.concatenate((edge_indices, edge_indices + size - 1), axis=1)\n\n# Create a 2D array of indices for the grid\ngrid_indices = np.indices(a.shape)\ngrid_indices = grid_indices.reshape(2, -1)\n\n# Combine the center and edge indices to get all possible indices for the window\nwindow_indices = np.concatenate((center_indices, edge_indices), axis=0)\n\n# Create a boolean mask for the valid indices\nmask = (window_indices >= 0) & (window_indices < a.shape)\n\n# Apply the mask to the window indices to get the valid indices\nwindow_indices = window_indices[mask.all(axis=1)]\n\n# Create a 2D array of the window values\nwindow_values = a[window_indices[:, 0], window_indices[:, 1]]\n\n# Reshape the window values into a 3D array of windows\nresult = window_values.reshape(-1, size[0], size[1])\n",
        "\nresult = np.mean(a)\n",
        "\n    result = np.mean(a)\n",
        "\nresult = Z[..., -1:]\n",
        "\nresult = a[-1:, :]\n",
        "\nresult = c in CNTS\n",
        "\nresult = c in CNTS\n",
        "\n# Interpolate the values linearly using scipy.interpolate.interp2d\nf = intp.interp2d(np.arange(a.shape[0]), np.arange(a.shape[1]), a, kind='linear')\nresult = f(x_new, y_new)\n",
        "\ndf['Q_cum'] = df.groupby('D')['Q'].apply(lambda x: np.cumsum(x))\n",
        "\ni = np.diag(i)\n",
        "\na[np.triu_indices(a.shape[0], k=1)] = 0\n",
        "\n# [Missing Code]\n",
        "\nresult = -1\nfor i in range(len(x)):\n    if x[i] == a and y[i] == b:\n        result = i\n        break\n",
        "\nresult = np.where(np.logical_and(x == a, y == b))[0]\n",
        "\n# [Missing Code]\n",
        "\nA = np.vander(x, degree+1)\nresult = np.linalg.lstsq(A, y, rcond=None)[0]\n",
        "\ndf = df.apply(lambda x: x-a)\n",
        "\nresult = np.einsum('ijk,jl->ilk', A, B)\n",
        "\nscaler = MinMaxScaler()\nresult = scaler.fit_transform(a)\n",
        "\nscaler = MinMaxScaler()\nresult = scaler.fit_transform(arr)\n",
        "\nscaler = MinMaxScaler()\nresult = scaler.fit_transform(a.reshape(-1, a.shape[-1])).reshape(a.shape)\n",
        "\nmask = arr < -10\nmask2 = arr >= 15\nmask3 = mask ^ mask2\narr[mask] = 0\narr[mask3] += 5\narr[~mask2] = 30\n",
        "\nmask = arr < n1\nmask2 = arr >= n2\nmask3 = mask ^ mask2\narr[mask] = 0\narr[mask3] += 5\narr[~mask2] = 30\n",
        "\n# [Missing Code]\n",
        "\nresult = np.count_nonzero(np.logical_not(np.isclose(s1, s2, equal_nan=True)))\n",
        "\nresult = all(np.array_equal(a[0], a[i]) for i in range(1, len(a)))\n",
        "\nresult = all(np.isnan(arr).all() for arr in a)\n",
        "\nresult = np.pad(a, ((0, shape[0]-a.shape[0]), (0, shape[1]-a.shape[1])), mode='constant', constant_values=0)\n",
        "\nresult = np.pad(a, ((0, shape[0]-a.shape[0]), (0, shape[1]-a.shape[1])), mode='constant', constant_values=0)\n",
        "\nresult = np.pad(a, ((0, shape[0]-a.shape[0]), (0, shape[1]-a.shape[1])), 'constant', constant_values=element)\n",
        "\n    result = np.zeros(shape)\n    result[:arr.shape[0], :arr.shape[1]] = arr\n",
        "\n# [Missing Code]\n# pad the array to match the shape of (93,13)\n# if the array is smaller than (93,13), pad it with zeros\n# if the array is larger than (93,13), crop it to match the shape of (93,13)\n# if the array has different number of rows and columns, pad the rest row/column to the bottom/right\nresult = np.pad(a, ((0, shape[0]-a.shape[0]), (0, shape[1]-a.shape[1])), 'constant', constant_values=0)\n",
        "\na = np.array([i for i in range(0, 12)]).reshape(a.shape[0]//3, 3)\n",
        "\n# select the elements in a according to b\n# to achieve this result:\ndesired = np.array(\n  [[ 0,  3,  5],\n   [ 7,  8, 11],\n   [13, 15, 16]]\n)\n\n# create an empty array with the desired dimensions\nresult = np.zeros((3, 3))\n\n# iterate over the indices in b\nfor i in range(3):\n    for j in range(3):\n        # if the corresponding element in b is 1,\n        # select the corresponding element in a\n        if b[i][j] == 1:\n            result[i][j] = a[i][j][0]\n        else:\n            result[i][j] = a[i][j][1]\n",
        "\n# select the elements in a according to b\n# to achieve this result:\ndesired = np.array(\n  [[ 1,  3,  5],\n   [ 7,  9, 11],\n   [13, 15, 17]]\n)\n\n# create an empty array with the desired dimensions\nresult = np.zeros((3, 3))\n\n# iterate over the indices in b\nfor i in range(3):\n    for j in range(3):\n        # if the corresponding element in b is 1,\n        # select the corresponding element in a in its third dimension\n        if b[i][j] == 1:\n            result[i][j] = a[i][j][1]\n",
        "\n# select the elements in a according to b\n# to achieve this result:\ndesired = np.array(\n  [[ 0,  3,  6],\n   [ 8,  9, 13],\n   [13, 14, 19]]\n)\n\n# create an empty array with the desired dimensions\nresult = np.zeros((a.shape[0], a.shape[1]))\n\n# iterate over the indices in b\nfor i in range(b.shape[0]):\n    for j in range(b.shape[1]):\n        # select the corresponding element in a\n        result[i][j] = a[i][j][b[i][j]]\n",
        "\n# compute the sum of the corresponding elements in a in its third dimension\nresult = np.sum(a[np.arange(len(b)), np.arange(len(b[0])), b], axis=0)\n",
        "\nresult = np.sum(a[b==0], axis=(0,1))\n",
        "\nresult = np.where((df['a'] > 1) & (df['a'] <= 4), df['b'], np.nan)\n",
        "\n# Create a mask to filter out the peripheral zeros\nmask = np.array([[1,1,1,1,1,1],\n                 [1,1,0,0,0,1],\n                 [1,0,0,0,0,1],\n                 [1,0,0,0,0,1],\n                 [1,1,1,1,1,1]])\n\n# Apply the mask to the image to filter out the peripheral zeros\nresult = np.multiply(im, mask)\n",
        "\n# Truncate the array to get the bounding box of nonzero data\n# We can do this by finding the indices of the first and last nonzero rows and columns\n# and slicing the array accordingly\nfirst_row = np.argmax(A, axis=0)\nlast_row = A.shape[0] - np.argmax(A[::-1], axis=0) - 1\nfirst_col = np.argmax(A, axis=1)\nlast_col = A.shape[1] - np.argmax(A[:, ::-1], axis=1) - 1\n\nresult = A[first_row[0]:last_row[0]+1, first_col[0]:last_col[0]+1]\n",
        "\n# Create a mask that is True for all non-zero elements in the image\nmask = im != 0\n\n# Create a masked array with the same shape as the image, where the mask is True\nmasked_im = np.ma.masked_array(im, mask=mask)\n\n# Create a new array with the same shape as the image, where all elements are zero\nresult = np.zeros_like(im)\n\n# Iterate over each row and column of the masked array\nfor i in range(masked_im.shape[0]):\n    for j in range(masked_im.shape[1]):\n        # If the element is not masked, copy it to the corresponding position in the result array\n        if not masked_im.mask[i,j]:\n            result[i,j] = masked_im[i,j]\n",
        "\n# Create a mask to filter out the black pixels\nmask = (im != 0)\n# Apply the mask to the image to filter out the black pixels\nfiltered_im = im[mask]\n# Reshape the filtered image to create a 2D array\nresult = filtered_im.reshape((-1, im.shape[1]))\n"
    ],
    "Matplotlib": [
        "\n\nx = 10 * np.random.randn(10)\ny = x\n\n# plot x vs y, label them using \"x-y\" in the legend\nplt.plot(x, y, label='x-y')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend()\nplt.show()\n",
        "\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nplt.scatter(x, y)\n\n# how to turn on minor ticks on y axis only\nplt.minorticks_on()\nplt.grid(which='minor', axis='y')\n",
        "\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nplt.scatter(x, y)\n\n# how to turn on minor ticks\nplt.minorticks_on()\n",
        "\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nplt.scatter(x, y)\n\n# how to turn on minor ticks on x axis only\nplt.gca().xaxis.set_minor_locator(plt.MultipleLocator(0.1))\n",
        "\n\nx = np.arange(10)\n\n# draw a line (with random y) for each different line style\nfor style in ['-', '--', '-.', ':']:\n    plt.plot(x, np.random.rand(10), style)\n\nplt.show()\n",
        "\n\nx = np.arange(10)\n\n# draw a line (with random y) for each different line style\nfor style in ['-', '--', '-.', ':']:\n    plt.plot(x, np.random.rand(10), style)\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\n\n# line plot x and y with a thin diamond marker\nsns.lineplot(x=x, y=y, marker='d', linewidth=0.5)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\n\n# line plot x and y with a thick diamond marker\nsns.lineplot(x=x, y=y, marker='D', linewidth=3)\nplt.show()\n",
        "\n\nsns.set_style(\"whitegrid\")\ntips = sns.load_dataset(\"tips\")\nax = sns.boxplot(x=\"day\", y=\"total_bill\", data=tips)\n\n# set the y axis limit to be 0 to 40\nax.set_ylim(0, 40)\n",
        "\n\nx = 10 * np.random.randn(10)\n\nplt.plot(x)\n\n# highlight in red the x range 2 to 4\nplt.axvspan(2, 4, alpha=0.2, color='red')\n",
        "\n\n# draw a full line from (0,0) to (1,2)\nplt.plot([0, 1], [0, 2])\nplt.show()\n",
        "\n\n# draw a line segment from (0,0) to (1,2)\nplt.plot([0, 1], [0, 2], color='red', linewidth=2)\nplt.show()\n",
        "\n\nseaborn.set(style=\"ticks\")\n\nnumpy.random.seed(0)\nN = 37\n_genders = [\"Female\", \"Male\", \"Non-binary\", \"No Response\"]\ndf = pandas.DataFrame(\n    {\n        \"Height (cm)\": numpy.random.uniform(low=130, high=200, size=N),\n        \"Weight (kg)\": numpy.random.uniform(low=30, high=100, size=N),\n        \"Gender\": numpy.random.choice(_genders, size=N),\n    }\n)\n\n# make seaborn relation plot and color by the gender field of the dataframe df\nsns.relplot(x=\"Height (cm)\", y=\"Weight (kg)\", hue=\"Gender\", data=df)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = 2 * np.random.rand(10)\n\n# draw a regular matplotlib style plot using seaborn\nsns.set_style(\"whitegrid\")\nsns.lineplot(x=x, y=y)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.sin(x)\n\n# draw a line plot of x vs y using seaborn and pandas\nsns.lineplot(x=x, y=y)\nplt.show()\n",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n# in plt.plot(x, y), use a plus marker and give it a thickness of 7\nplt.plot(x, y, marker='+', linewidth=7)\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\n\nplt.plot(x, y, label=\"sin\")\n\n# show legend and set the font to size 20\nplt.legend(fontsize=20)\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\n\n# set legend title to xyz and set the title font to size 20\nplt.plot(x, y)\nplt.legend(title='xyz', prop={'size': 20})\nplt.title('Cosine Wave', fontsize=20)\nplt.show()\n",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n(l,) = plt.plot(range(10), \"o-\", lw=5, markersize=30)\n\n# set the face color of the markers to have an alpha (transparency) of 0.2\nl.set_facecolor((0, 0, 0, 0.2))\n",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n(l,) = plt.plot(range(10), \"o-\", lw=5, markersize=30)\n\n# make the border of the markers solid black\nl.set_markeredgecolor('black')\n",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n(l,) = plt.plot(range(10), \"o-\", lw=5, markersize=30)\n\n# set both line and marker colors to be solid red\nl.set_color(\"r\")\nl.set_markerfacecolor(\"r\")\nl.set_markeredgecolor(\"r\")\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\nplt.plot(x, y, label=\"sin\")\n\n# rotate the x axis labels clockwise by 45 degrees\nplt.xticks(np.arange(0, 2 * np.pi + 0.1, np.pi / 2),\n           ['0', r'$\\frac{\\pi}{2}$', r'$\\pi$', r'$\\frac{3\\pi}{2}$', r'$2\\pi$'])\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Sine Wave')\nplt.legend()\nplt.show()\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\nplt.plot(x, y, label=\"sin\")\n\n# rotate the x axis labels counter clockwise by 45 degrees\nplt.xticks(np.arange(0, 2 * np.pi + 0.1, np.pi / 2),\n           ['0', r'$\\frac{\\pi}{2}$', r'$\\pi$', r'$\\frac{3\\pi}{2}$', r'$2\\pi$'])\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Sine Wave')\nplt.legend()\nplt.show()\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\nplt.plot(x, y, label=\"sin\")\n\n# put a x axis ticklabels at 0, 2, 4...\nplt.xticks(np.arange(0, 2 * np.pi + 0.1, 2 * np.pi / 5))\n",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\nsns.distplot(x, label=\"a\", color=\"0.25\")\nsns.distplot(y, label=\"b\", color=\"0.25\")\n\n# add legends\nplt.legend()\n",
        "\n\nH = np.random.randn(10, 10)\n\n# color plot of the 2d array H\nplt.imshow(H, cmap='gray')\nplt.colorbar()\nplt.show()\n",
        "\n\nH = np.random.randn(10, 10)\n\n# show the 2d array H in black and white\nplt.imshow(H, cmap='gray')\nplt.show()\n",
        "\nplt.xlabel(\"X\", loc=\"right\")\n",
        "\n\ndf = sns.load_dataset(\"planets\")\ng = sns.boxplot(x=\"method\", y=\"orbital_period\", data=df)\n\n# rotate the x axis labels by 90 degrees\ng.set_xticklabels(g.get_xticklabels(), rotation=90)\n",
        "\n\ny = 2 * np.random.rand(10)\nx = np.arange(10)\nplt.plot(x, y)\nmyTitle = \"Some really really long long long title I really really need - and just can't - just can't - make it any - simply any - shorter - at all.\"\n\n# fit a very long title myTitle into multiple lines\nplt.title(myTitle, wrap=True)\n",
        "\n\ny = 2 * np.random.rand(10)\nx = np.arange(10)\n\n# make the y axis go upside down\ny = y[::-1]\n",
        "\n\nx = np.random.randn(10)\ny = x\nplt.scatter(x, y)\n\n# put x ticks at 0 and 1.5 only\nplt.xticks([0, 1.5])\n",
        "\n\nx = np.random.randn(10)\ny = x\nplt.scatter(x, y)\n\n# put y ticks at -1 and 1 only\nplt.ylim(-1, 1)\n",
        "\n\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\n\n# plot x, then y then z, but so that x covers y and y covers z\nplt.plot(x, label='x')\nplt.plot(y, label='y')\nplt.plot(z, label='z')\nplt.legend()\nplt.show()\n",
        "\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n# in a scatter plot of x, y, make the points have black borders and blue face\nplt.scatter(x, y, edgecolor='black', facecolor='blue')\nplt.show()\n",
        "\n\ny = 2 * np.random.rand(10)\nx = np.arange(10)\n\n# make all axes ticks integers\nplt.gca().xaxis.set_major_locator(plt.MaxNLocator(integer=True))\nplt.gca().yaxis.set_major_locator(plt.MaxNLocator(integer=True))\n",
        "\n\ndata = {\n    \"reports\": [4, 24, 31, 2, 3],\n    \"coverage\": [35050800, 54899767, 57890789, 62890798, 70897871],\n}\ndf = pd.DataFrame(data)\nsns.factorplot(y=\"coverage\", x=\"reports\", kind=\"bar\", data=df, label=\"Total\")\n\n# do not use scientific notation in the y axis ticks labels\nplt.ticklabel_format(style='plain', axis='y')\n",
        "\nax = sns.lineplot(x=x, y=y, dashes=True)\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 400)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# plot x vs y1 and x vs y2 in two subplots, sharing the x axis\nfig, (ax1, ax2) = plt.subplots(1, 2, sharex=True)\nax1.plot(x, y1)\nax1.set_title('y1')\nax2.plot(x, y2)\nax2.set_title('y2')\nplt.show()\n",
        "\n\nx = np.linspace(0, 2 * np.pi, 400)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# plot x vs y1 and x vs y2 in two subplots\n# remove the frames from the subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\nax1.plot(x, y1)\nax1.set_xlabel('x')\nax1.set_ylabel('y1')\nax1.set_title('y1 vs x')\nax2.plot(x, y2)\nax2.set_xlabel('x')\nax2.set_ylabel('y2')\nax2.set_title('y2 vs x')\nfig.suptitle('y1 vs y2')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.sin(x)\ndf = pd.DataFrame({\"x\": x, \"y\": y})\nsns.lineplot(x=\"x\", y=\"y\", data=df)\n\n# remove x axis label\nplt.xlabel(\"\")\n",
        "\n\nx = np.arange(10)\ny = np.sin(x)\ndf = pd.DataFrame({\"x\": x, \"y\": y})\nsns.lineplot(x=\"x\", y=\"y\", data=df)\n\n# remove x tick labels\nplt.xticks([])\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n\n# show xticks and vertical grid at x positions 3 and 4\nplt.xticks([3, 4])\nplt.grid(axis='x', which='major', alpha=0.5)\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n\n# show yticks and horizontal grid at y positions 3 and 4\nplt.yticks([3, 4])\nplt.grid(axis='y', which='major', linestyle='--')\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n\n# show yticks and horizontal grid at y positions 3 and 4\nplt.yticks([3, 4], ['3', '4'])\nplt.grid(axis='y')\n\n# show xticks and vertical grid at x positions 1 and 2\nplt.xticks([1, 2], ['1', '2'])\nplt.grid(axis='x')\n",
        "\n\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n\n# show grids\nplt.grid()\n",
        "\n\nx = 10 * np.random.randn(10)\ny = x\nplt.plot(x, y, label=\"x-y\")\n\n# put legend in the lower right\nplt.legend(loc='lower right')\n",
        "\nfig.tight_layout()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10, 20)\nz = np.arange(10)\n\n\nplt.plot(x, y, label='Y')\nplt.plot(x, z, label='Z')\nplt.legend()\n\n",
        "\n\ncolumn_labels = list(\"ABCD\")\nrow_labels = list(\"WXYZ\")\ndata = np.random.rand(4, 4)\nfig, ax = plt.subplots()\nheatmap = ax.pcolor(data, cmap=plt.cm.Blues)\n\n# Move the x-axis of this heatmap to the top of the plot\nax.xaxis.tick_top()\nax.set_xticks(np.arange(data.shape[1]) + 0.5, minor=False)\nax.set_yticks(np.arange(data.shape[0]) + 0.5, minor=False)\nax.set_xticklabels(column_labels, minor=False)\nax.set_yticklabels(row_labels, minor=False)\nax.invert_yaxis()\nplt.xticks(rotation=90)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x\nplt.plot(x, y)\n\n# Label the x-axis as \"X\"\nplt.xlabel(\"X\")\n\n# Set the space between the x-axis label and the x-axis to be 20\nplt.subplots_adjust(bottom=0.3)\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x\n# do not show xticks for the plot\nplt.plot(x, y)\nplt.xticks([])\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x\n# move the y axis ticks to the right\nplt.plot(x, y)\nplt.gca().yaxis.tick_right()\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and label y axis \"Y\"\n# Show y axis ticks on the left and y axis label on the right\n\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.set_ylabel(\"Y\")\nax.yaxis.tick_left()\nax.yaxis.set_label_position(\"left\")\n\nplt.show()\n",
        "\n\ntips = sns.load_dataset(\"tips\")\n\n# Make a seaborn joint regression plot (kind='reg') of 'total_bill' and 'tip' in the tips dataframe\n# change the line and scatter plot color to green but keep the distribution plot in blue\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind=\"reg\", color=\"b\")\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind=\"scatter\", color=\"g\")\nsns.distplot(tips[\"total_bill\"], color=\"b\")\nsns.distplot(tips[\"tip\"], color=\"g\")\nplt.show()\n",
        "\n\ntips = sns.load_dataset(\"tips\")\n\n# Make a seaborn joint regression plot (kind='reg') of 'total_bill' and 'tip' in the tips dataframe\n# change the line color in the regression to green but keep the histograms in blue\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind=\"reg\", color=\"b\")\nsns.set_palette(\"Set2\")\nsns.set_style(\"whitegrid\")\nplt.plot(np.unique(tips[\"total_bill\"]), np.poly1d(np.polyfit(tips[\"total_bill\"], tips[\"tip\"], 1))(np.unique(tips[\"total_bill\"])), color=\"g\")\nplt.xlabel(\"Total Bill\")\nplt.ylabel(\"Tip\")\nplt.show()\n",
        "\n\ntips = sns.load_dataset(\"tips\")\n\n# Make a seaborn joint regression plot (kind='reg') of 'total_bill' and 'tip' in the tips dataframe\n# do not use scatterplot for the joint plot\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind='reg', joint_kws={'scatter_kws':{'alpha':0}})\nplt.show()\n",
        "\n\ndf = pd.DataFrame(\n    {\n        \"celltype\": [\"foo\", \"bar\", \"qux\", \"woz\"],\n        \"s1\": [5, 9, 1, 7],\n        \"s2\": [12, 90, 13, 87],\n    }\n)\n\n# For data in df, make a bar plot of s1 and s1 and use celltype as the xlabel\n# Make the x-axis tick labels horizontal\nfig, ax = plt.subplots()\nax.bar(df[\"celltype\"], df[\"s1\"], label=\"s1\")\nax.bar(df[\"celltype\"], df[\"s2\"], bottom=df[\"s1\"], label=\"s2\")\nax.set_xlabel(\"celltype\")\nax.set_xticklabels(df[\"celltype\"], rotation=45, ha=\"right\")\nax.legend()\nplt.show()\n",
        "\n\ndf = pd.DataFrame(\n    {\n        \"celltype\": [\"foo\", \"bar\", \"qux\", \"woz\"],\n        \"s1\": [5, 9, 1, 7],\n        \"s2\": [12, 90, 13, 87],\n    }\n)\n\n# For data in df, make a bar plot of s1 and s1 and use celltype as the xlabel\n# Make the x-axis tick labels rotate 45 degrees\nfig, ax = plt.subplots()\nax.bar(df[\"celltype\"], df[\"s1\"], label=\"s1\")\nax.bar(df[\"celltype\"], df[\"s2\"], bottom=df[\"s1\"], label=\"s2\")\nax.set_xlabel(\"celltype\")\nax.set_xticklabels(df[\"celltype\"], rotation=45)\nax.legend()\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and label the x axis as \"X\"\n# Make both the x axis ticks and the axis label red\nplt.plot(x, y)\nplt.xlabel(\"X\")\nplt.xticks(color='red')\nplt.yticks(color='red')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and label the x axis as \"X\"\n# Make the line of the x axis red\nplt.plot(x, y, label='Y')\nplt.axhline(y=0, color='r', linestyle='-')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Y over X')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x with tick font size 10 and make the x tick labels vertical\nplt.plot(x, y)\nplt.xticks(fontsize=10, rotation=90)\nplt.yticks(fontsize=10)\nplt.show()\n",
        "\n\n# draw vertical lines at [0.22058956, 0.33088437, 2.20589566]\nplt.axvline(x=0.22058956, ymin=0, ymax=1, color='r', linestyle='--')\nplt.axvline(x=0.33088437, ymin=0, ymax=1, color='r', linestyle='--')\nplt.axvline(x=2.20589566, ymin=0, ymax=1, color='r', linestyle='--')\n",
        "\n\nfig, ax = plt.subplots()\nim = ax.imshow(rand_mat, cmap='YlOrRd')\n\nax.set_xticks(numpy.arange(len(xlabels)))\nax.set_yticks(numpy.arange(len(ylabels)))\nax.set_xticklabels(xlabels, rotation=90, ha='center')\nax.set_yticklabels(ylabels[::-1])\n\n# Rotate the tick labels and set their alignment.\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(ylabels)):\n    for j in range(len(xlabels)):\n        text = ax.text(j, i, round(rand_mat[i, j], 2),\n                       ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Heatmap with random data\")\nfig.tight_layout()\nplt.show()\n\n",
        "\nfrom matplotlib import rc\n\nrc(\"mathtext\", default=\"regular\")\n\ntime = np.arange(10)\ntemp = np.random.random(10) * 30\nSwdown = np.random.random(10) * 100 - 10\nRn = np.random.random(10) * 100 - 10\n\nfig, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\nax1.plot(time, Swdown, \"-\", label=\"Swdown\")\nax1.plot(time, Rn, \"-\", label=\"Rn\")\nax1.set_ylabel(r\"Radiation ($MJ\\,m^{-2}\\,d^{-1}$)\")\nax1.legend(loc=0)\nax1.grid()\nax2.plot(time, temp, \"-r\", label=\"temp\")\nax2.set_ylabel(r\"Temperature ($^\\circ$C)\")\nax2.set_ylim(0, 35)\nax1.set_ylim(-20, 100)\nax2.legend(loc=0)\nax2.grid()\nax2.set_xlabel(\"Time (h)\")\nplt.show()\nplt.clf()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# make two side-by-side subplots and and in each subplot, plot y over x\n# Title each subplot as \"Y\"\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\nax1.plot(x, y)\nax1.set_title(\"Y\")\nax2.plot(y, x)\nax2.set_title(\"X\")\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n]\n\n# make a seaborn scatter plot of bill_length_mm and bill_depth_mm\n# use markersize 30 for all data points in the scatter plot\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=df, s=30)\nplt.show()\n",
        "\n\na = [2.56422, 3.77284, 3.52623]\nb = [0.15, 0.3, 0.45]\nc = [58, 651, 393]\n\n# make scatter plot of a over b and annotate each data point with correspond numbers in c\nplt.scatter(b, a)\nfor i in range(len(a)):\n    plt.annotate(c[i], (b[i], a[i]))\nplt.xlabel('b')\nplt.ylabel('a')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart and label the line \"y over x\"\nplt.plot(x, y, label='y over x')\n\n# Show legend of the plot and give the legend box a title\nplt.legend(title='Legend')\n\n# Show the plot\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart and label the line \"y over x\"\nplt.plot(x, y, label='y over x')\n\n# Show legend of the plot and give the legend box a title  \"Legend\"\nplt.legend(title='Legend', loc='upper left')\n\n# Bold the legend title\nplt.setp(plt.gca().get_legend().get_title(), fontsize='18')\n\nplt.show()\n",
        "\nplt.hist(x, edgecolor='black', linewidth=1.2)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make two subplots. Make the first subplot three times wider than the second subplot but they should have the same height.\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))\n\n# Plot the data in the first subplot\nax1.plot(x, y)\n\n# Plot the data in the second subplot\nax2.plot(x, y)\n\n# Set the x and y limits for both subplots\nax1.set_xlim(0, 20)\nax1.set_ylim(0, 10)\nax2.set_xlim(0, 20)\nax2.set_ylim(0, 10)\n\n# Add a title to the first subplot\nax1.set_title('First Subplot')\n\n# Add a title to the second subplot\nax2.set_title('Second Subplot')\n\n# Show the plot\nplt.show()\n",
        "\nplt.hist(x, bins=bins, alpha=0.5, label='x')\nplt.hist(y, bins=bins, alpha=0.5, label='y')\nplt.legend()\nplt.show()\n",
        "\n\n# Create a figure and axis object\nfig, ax = plt.subplots()\n\n# Create a histogram of x with 10 bins and group it with y\nax.hist(x, bins=10, alpha=0.5, label='x')\nax.hist(y, bins=10, alpha=0.5, label='y', bottom=np.max(x))\n\n# Add a legend and title to the chart\nax.legend()\nax.set_title('Histogram of x and y')\n\n",
        "\nplt.plot([a, c], [b, d], color='red', linewidth=2)\nplt.xlim(0, 5)\nplt.ylim(0, 5)\n",
        "\n\nx = np.random.random((10, 10))\ny = np.random.random((10, 10))\n\n# make two colormaps with x and y and put them into different subplots\n# use a single colorbar for these two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\n# create a colormap for x\ncmap_x = plt.cm.get_cmap('RdBu', 10)\nnorm_x = plt.Normalize(vmin=x.min(), vmax=x.max())\nsm_x = plt.cm.ScalarMappable(cmap=cmap_x, norm=norm_x)\nsm_x.set_array([])\n\n# create a colormap for y\ncmap_y = plt.cm.get_cmap('RdBu', 10)\nnorm_y = plt.Normalize(vmin=y.min(), vmax=y.max())\nsm_y = plt.cm.ScalarMappable(cmap=cmap_y, norm=norm_y)\nsm_y.set_array([])\n\n# plot x on the left subplot\nim_x = ax1.imshow(x, cmap=cmap_x, norm=norm_x)\nax1.set_title('x')\nfig.colorbar(sm_x, ax=ax1)\n\n# plot y on the right subplot\nim_y = ax2.imshow(y, cmap=cmap_y, norm=norm_y)\nax2.set_title('y')\nfig.colorbar(sm_y, ax=ax2)\n\n# create a single colorbar for both subplots\ncbar_ax = fig.add_axes([0.95, 0.15, 0.02, 0.7])\ncbar = fig.colorbar(im_x, cax=cbar_ax)\ncbar.ax.set_ylabel('Colorbar')\n\nplt.show()\n",
        "\n\nx = np.random.random((10, 2))\n\n# Plot each column in x as an individual line and label them as \"a\" and \"b\"\nplt.plot(x[:,0], label=\"a\")\nplt.plot(x[:,1], label=\"b\")\nplt.legend()\nplt.show()\n",
        "\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nax1.plot(x, y)\nax1.set_title('Y over X')\n\nax2.plot(a, z)\nax2.set_title('Z over A')\n\nfig.suptitle('Y and Z')\n\n",
        "\n\npoints = [(3, 5), (5, 10), (10, 150)]\n\n# plot a line plot for points in points.\n# Make the y-axis log scale\nplt.plot([p[0] for p in points], [p[1] for p in points])\nplt.yscale('log')\nplt.show()\n",
        "\nplt.plot(x, y)\nplt.title('My Plot', fontsize=20)\nplt.xlabel('X-axis', fontsize=18)\nplt.ylabel('Y-axis', fontsize=16)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\nf = plt.figure()\nax = f.add_subplot(111)\n\n# plot y over x, show tick labels (from 1 to 10)\n# use the `ax` object to set the tick labels\nax.plot(x, y)\nax.set_xticks(np.arange(1, 11))\nax.set_yticks(np.arange(1, 11))\nax.set_xticklabels(np.arange(1, 11))\nax.set_yticklabels(np.arange(1, 11))\n",
        "\n\nfig, ax = plt.subplots()\n\nfor i in range(len(lines)):\n    x = [lines[i][0][0], lines[i][1][0]]\n    y = [lines[i][0][1], lines[i][1][1]]\n    ax.plot(x, y, c=c[i])\n\n",
        "\n\nx = np.arange(0, 1000, 50)\ny = np.arange(0, 1000, 50)\n\n# plot y over x on a log-log plot\n# mark the axes with numbers like 1, 10, 100. do not use scientific notation\nplt.loglog(x, y)\nplt.xticks([1, 10, 100], [1, 10, 100])\nplt.yticks([1, 10, 100], [1, 10, 100])\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('y over x on a log-log plot')\nplt.show()\n",
        "\n\n# create a new figure and set its size\nfig, ax = plt.subplots(2, 2, figsize=(12, 8))\n\n# plot the data in each subplot\ndf.plot(subplots=True, ax=ax)\n\n# add data points to each subplot\nfor i in range(2):\n    for j in range(2):\n        ax[i, j].plot(df.index, df.iloc[:, i+j], marker='o', linestyle='None')\n\n# set the x-axis limits for each subplot\nfor i in range(2):\n    for j in range(2):\n        ax[i, j].set_xlim(df.index[0], df.index[-1])\n\n# set the y-axis limits for each subplot\nfor i in range(2):\n    for j in range(2):\n        ax[i, j].set_ylim(-3, 3)\n\n# set the title for each subplot\nax[0, 0].set_title(\"Line Plot 1\")\nax[0, 1].set_title(\"Line Plot 2\")\nax[1, 0].set_title(\"Line Plot 3\")\nax[1, 1].set_title(\"Line Plot 4\")\n\n",
        "\nplt.hist(data, bins=range(min(data), max(data) + 2), density=True)\nplt.xticks(range(min(data), max(data) + 1, 1000))\nplt.yticks(np.arange(0, 0.11, 0.01))\nplt.gca().set_yticklabels(['{:,.0%}'.format(x) for x in np.arange(0, 0.11, 0.01)])\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.title('Histogram of Data')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line plot\n# Show marker on the line plot. Make the marker have a 0.5 transparency but keep the lines solid.\nplt.plot(x, y, marker='o', linestyle='solid', alpha=0.5)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\na = np.arange(10)\nz = np.arange(10)\n\n# Plot y over x and a over z in two side-by-side subplots.\n# Label them \"y\" and \"a\" and make a single figure-level legend using the figlegend function\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\nax1.plot(x, y, label='y')\nax2.plot(z, a, label='a')\nfig.legend(loc='upper center', bbox_to_anchor=(0.5, 1.05), ncol=2)\nax1.set_xlabel('x')\nax1.set_ylabel('y')\nax2.set_xlabel('z')\nax2.set_ylabel('a')\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n]\n\n# Make 2 subplots.\n# In the first subplot, plot a seaborn regression plot of \"bill_depth_mm\" over \"bill_length_mm\"\n# In the second subplot, plot a seaborn regression plot of \"flipper_length_mm\" over \"bill_length_mm\"\n# Do not share y axix for the subplots\n\nfig, axes = plt.subplots(1, 2, figsize=(12, 6))\n\nsns.regplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=df, ax=axes[0])\nsns.regplot(x=\"bill_length_mm\", y=\"flipper_length_mm\", data=df, ax=axes[1])\n\naxes[0].set_ylabel(\"\")\naxes[1].set_ylabel(\"\")\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nfig, ax = plt.subplots(1, 1)\nplt.xlim(1, 10)\nplt.xticks(range(1, 10))\nax.plot(y, x)\n\n# change the second x axis tick label to \"second\" but keep other labels in numerical\nax.set_xticks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nax.set_xticklabels(['first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth', 'tenth'])\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x\nplt.plot(x, y)\nplt.legend(['$\\lambda$'])\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(y, x)\nplt.xticks(range(0, 10, 2))\n\n# Add extra ticks [2.1, 3, 7.6] to existing xticks\nplt.xticks(np.append(plt.xticks()[0], [2.1, 3, 7.6]))\n",
        "\n\nx = np.arange(2010, 2020)\ny = np.arange(10)\nplt.plot(x, y)\n\n# Rotate the xticklabels to -60 degree. Set the xticks horizontal alignment to left.\nplt.xticks(rotation=-60, ha='left')\n",
        "\n\nx = np.arange(2010, 2020)\ny = np.arange(10)\nplt.plot(x, y)\n\n# Rotate the yticklabels to -60 degree. Set the xticks vertical alignment to top.\nplt.yticks(rotation=-60, verticalalignment='top')\nplt.xticks(rotation=0, verticalalignment='top')\n",
        "\n\nx = np.arange(2010, 2020)\ny = np.arange(10)\nplt.plot(x, y)\n\n# Set the transparency of xtick labels to be 0.5\nfor label in plt.gca().get_xticklabels():\n    label.set_alpha(0.5)\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(x, y)\n\n# Remove the margin before the first xtick but use greater than zero margin for the yaxis\nplt.margins(x=0.05, y=0.1)\n",
        "```python\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(x, y)\n\n# Remove the margin before the first ytick but use greater than zero margin for the xaxis\nplt.gca().tick_params(axis='x', which='major', pad=15)\nplt.gca().tick_params(axis='y', which='major', pad=10)\nplt.gca().tick_params(axis='y', which='minor', pad=5)\nplt.gca().tick_params(axis='x', which='major', pad=15)\nplt.gca().tick_params(axis='x', which='minor', pad=5)\nplt.gca().tick_params(axis='y', which='both', left=True, right=False, labelleft=True, labelright=False)\nplt.gca().tick_params(axis='x', which='both', bottom=True, top=False, labelbottom=True, labeltop=False)\nplt.gca().tick_params(axis='both', which='major', length=10, width=2)\nplt.gca().tick_params(axis='both', which='minor', length=5, width=1)\nplt.gca().tick_params(axis='y', which='major', direction='in', pad=10)\nplt.gca().tick_params(axis='x', which='major', direction='in', pad=15)\nplt.gca().tick_params(axis='y', which='minor', direction='in', pad=5)\nplt.gca().tick_params(axis='x', which='minor', direction='in', pad=5)\nplt.gca().tick_params(axis='both', which='major', labelsize=14)\nplt.gca().tick_params(axis='both', which='minor', labelsize=12)\nplt.gca().tick_params(axis='both', which='both', direction='in', length=10, width=2)\nplt.gca().tick_params(axis='both', which='both', bottom=True, top=True, left=True, right=True)\nplt.gca().tick_params(axis='both', which='both', labelbottom=True, labeltop=True, labelleft=True, labelright=True)\nplt.gca().tick_params(axis='both', which='both', labelsize=14)\nplt.gca().tick_params(axis='both', which='both', direction='in', length=10, width=2)\nplt.gca().tick_params(axis='both', which='both', bottom=True, top=True, left=True, right=True)\nplt.gca().tick_params(axis='both', which='both', labelbottom=True, labeltop=True, labelleft=True, labelright=True)\nplt.gca().tick_params(axis='both', which='both', labelsize=14)\nplt.gca().tick_params(axis='both', which='both', direction='in', length=10, width=2)\nplt.gca().tick_params(axis='both', which='both', bottom=True, top=True, left=True, right=True)\nplt.gca().tick_params(axis='both', which='both', labelbottom=True, labeltop=True, labelleft=True, labelright=True)\nplt.gca().tick_params(axis='both', which='both', labelsize=14)\nplt.gca().tick_params(axis='both', which='both', direction='in', length=10, width=2)\nplt.gca().tick_params(axis='both', which='both', bottom=True, top=True, left=True, right=True)\nplt.gca().tick_params(axis='both', which='both', labelbottom=True, labeltop=True, labelleft=True, labelright=True)\nplt.gca().tick_params(axis='both', which='both', labelsize=14)\nplt.gca().tick_params(axis='both', which='both",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# make a two columns and one row subplots. Plot y over x in each subplot.\n# Give the plot a global title \"Figure\"\nfig, axes = plt.subplots(1, 2, figsize=(10, 5))\naxes[0].plot(x, y)\naxes[1].plot(y, x)\nfig.suptitle('Figure')\nplt.show()\n",
        "\nplt.plot(df.index, df[\"Type A\"], label=\"Type A\")\nplt.plot(df.index, df[\"Type B\"], label=\"Type B\")\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.legend()\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make a scatter plot with x and y\n# Use vertical line hatch for the marker and make the hatch dense\nplt.scatter(x, y, marker='|', hatch='//', edgecolor='black')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make a scatter plot with x and y and remove the edge of the marker\n# Use vertical line hatch for the marker\nplt.scatter(x, y, marker='|', edgecolor='none', hatch='//')\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make a scatter plot with x and y\n# Use star hatch for the marker\nplt.scatter(x, y, marker='*', hatch='//')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make a scatter plot with x and y and set marker size to be 100\n# Combine star hatch and vertical line hatch together for the marker\nplt.scatter(x, y, s=100, marker='*1|_')\n\nplt.show()\n",
        "\n\ndata = np.random.random((10, 10))\n\n# Set xlim and ylim to be between 0 and 10\nplt.xlim(0, 10)\nplt.ylim(0, 10)\n\n# Plot a heatmap of data in the rectangle where right is 5, left is 1, bottom is 1, and top is 4.\nplt.imshow(data[1:4, 1:5], cmap='hot')\n\nplt.show()\n",
        "\n\nx = np.linspace(0.1, 2 * np.pi, 41)\ny = np.exp(np.sin(x))\n\n# make a stem plot of y over x and set the orientation to be horizontal\nplt.stem(x, y, linefmt='C0-', markerfmt='C0o', basefmt='C0-')\nplt.xticks([])\nplt.yticks([])\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Stem Plot of y over x')\nplt.show()\n",
        "\nplt.bar(range(len(d)), list(d.values()), align='center')\nplt.xticks(range(len(d)), list(d.keys()))\nfor i, v in enumerate(list(d.values())):\n    plt.text(i-0.2, v+0.1, str(v), color='black', fontweight='bold')\nfor i, k in enumerate(list(d.keys())):\n    plt.text(i-0.2, 0, k, color=c[k], fontweight='bold')\nplt.show()\n",
        "\n\n# Make a solid vertical line at x=3 and label it \"cutoff\". Show legend of this plot.\nplt.axvline(x=3, color='black', linestyle='--', label='cutoff')\nplt.legend()\nplt.show()\n",
        "\n\nlabels = [\"a\", \"b\"]\nheight = [3, 4]\n\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\nfig = plt.figure()\nax = fig.add_subplot(111, projection='polar')\nax.bar(labels, height)\nax.set_xticklabels(labels)\nplt.show()\n",
        "\n\nl = [\"a\", \"b\", \"c\"]\ndata = [225, 90, 50]\n\n# Make a donut plot of using `data` and use `l` for the pie labels\n# Set the wedge width to be 0.4\nfig1, ax1 = plt.subplots()\nax1.pie(data, labels=l, autopct='%1.1f%%', startangle=90, wedgeprops=dict(width=0.4))\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and show blue dashed grid lines\nplt.plot(x, y, 'b--')\nplt.grid(True, which='both', axis='both', color='blue', linestyle='--')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x\n# Turn minor ticks on and show gray dashed minor grid lines\n# Do not show any major grid lines\n\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.minorticks_on()\nax.grid(which='minor', linestyle='--', color='gray')\nax.grid(which='major', linestyle='--', color='gray', alpha=0.5)\n\n",
        "\n\nlabels = [\"Walking\", \"Talking\", \"Sleeping\", \"Working\"]\nsizes = [23, 45, 12, 20]\ncolors = [\"red\", \"blue\", \"green\", \"yellow\"]\n\n# Make a pie chart with data in `sizes` and use `labels` as the pie labels and `colors` as the pie color.\n# Bold the pie labels\nexplode = (0, 0.1, 0, 0)  # only \"explode\" the 2nd slice (i.e. 'Talking')\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.setp(ax1.get_legend().get_texts(), fontsize='14')  # legend font size\nplt.setp(ax1.get_legend().get_title(), fontsize='16')  # legend title font size\nplt.title(\"My Daily Activities\", fontsize=20)  # title font size\nplt.show()\n",
        "\n\nlabels = [\"Walking\", \"Talking\", \"Sleeping\", \"Working\"]\nsizes = [23, 45, 12, 20]\ncolors = [\"red\", \"blue\", \"green\", \"yellow\"]\n\n# Make a pie chart with data in `sizes` and use `labels` as the pie labels and `colors` as the pie color.\n# Bold the pie labels\nexplode = (0, 0.1, 0, 0)  # only \"explode\" the 2nd slice (i.e. 'Talking')\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.setp(ax1.get_legend().get_texts(), fontsize='14')  # legend font size\nplt.setp(ax1.get_legend().get_title(), fontsize='16')  # legend title font size\nplt.title(\"My Daily Activities\", fontsize=20)  # title font size\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart but use transparent marker with non-transparent edge\nplt.plot(x, y, marker='o', markerfacecolor='none', markeredgecolor='blue', markeredgewidth=2, alpha=0.5)\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n]\nsns.distplot(df[\"bill_length_mm\"], color=\"blue\")\n\n# Plot a vertical line at 55 with green color\nplt.axvline(x=55, color=\"green\")\n",
        "\n# Create a new figure and axis object\nfig, ax = plt.subplots()\n\n# Set the width of the bars\nwidth = 0.35\n\n# Set the positions of the bars\nblue_pos = np.arange(len(blue_bar))\norange_pos = [x + width for x in blue_pos]\n\n# Plot the blue bars\nax.bar(blue_pos, blue_bar, width, label='Blue')\n\n# Plot the orange bars\nax.bar(orange_pos, orange_bar, width, label='Orange')\n\n# Add a legend to the plot\nax.legend()\n\n# Set the x-axis labels\nax.set_xticks([r + width for r in range(len(blue_bar))])\nax.set_xticklabels(['A', 'B', 'C'])\n\n# Set the y-axis limits\nax.set_ylim([0, 30])\n\n# Set the y-axis label\nax.set_ylabel('Height')\n\n",
        "\n\nx = np.arange(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\na = np.arange(10)\n\n# Make two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\n# Plot y over x in the first subplot and plot z over a in the second subplot\nax1.plot(x, y, label='y')\nax2.plot(a, z, label='z')\n\n# Label each line chart and put them into a single legend on the first subplot\nax1.legend()\n\n",
        "\n\nplt.scatter(x, y, c=y, cmap='Spectral')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('y over x')\n\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x\n# use a tick interval of 1 on the a-axis\nplt.plot(x, y)\nplt.xticks(np.arange(10))\nplt.yticks(np.arange(10))\nplt.grid()\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"penguins\")[[\"bill_length_mm\", \"species\", \"sex\"]]\n\n# Use seaborn factorpot to plot multiple barplots of \"bill_length_mm\" over \"sex\" and separate into different subplot columns by \"species\"\n# Do not share y axis across subplots\n\nsns.factorplot(x=\"sex\", y=\"bill_length_mm\", hue=\"species\", col=\"species\", data=df, kind=\"bar\", sharey=False)\nplt.show()\n",
        "\n\n# draw a circle centered at (0.5, 0.5) with radius 0.2\nplt.figure(figsize=(5,5))\nplt.gca().add_patch(plt.Circle((0.5, 0.5), 0.2, fill=False))\nplt.axis('scaled')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and use the greek letter phi for title. Bold the title and make sure phi is bold.\nplt.plot(x, y)\nplt.title(r'$\\phi$', fontsize=24, fontweight='bold')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x with a legend of \"Line\"\n# Adjust the spacing between legend markers and labels to be 0.1\nplt.plot(x, y, label='Line')\nplt.legend(loc='upper left', bbox_to_anchor=(1, 1), ncol=1, borderaxespad=0.1)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x with a legend of \"Line\"\n# Adjust the length of the legend handle to be 0.3\nplt.plot(x, y, label='Line')\nplt.legend(handlelength=0.3)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(x, y, label=\"Line\")\nplt.plot(y, x, label=\"Flipped\")\n\n# Show a two columns legend of this plot\nplt.legend(ncol=2)\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(x, y, marker=\"*\", label=\"Line\")\n\n# Show a legend of this plot and show two markers on the line\nplt.legend(loc=\"upper left\")\nplt.plot(x, y, marker=\"o\", linestyle=\"--\", label=\"Markers\")\n",
        "\n\ndata = np.random.random((10, 10))\n\n# plot the 2d matrix data with a colorbar\nplt.imshow(data)\nplt.colorbar()\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x. Give the plot a title \"Figure 1\". bold the word \"Figure\" in the title but do not bold \"1\"\nplt.plot(x, y)\nplt.title(\"Figure 1\", fontweight=\"bold\")\nplt.xlabel(\"x-axis\")\nplt.ylabel(\"y-axis\")\nplt.show()\n",
        "\n\ndf = pd.DataFrame(\n    {\n        \"id\": [\"1\", \"2\", \"1\", \"2\", \"2\"],\n        \"x\": [123, 22, 356, 412, 54],\n        \"y\": [120, 12, 35, 41, 45],\n    }\n)\n\n# Use seaborn to make a pairplot of data in `df` using `x` for x_vars, `y` for y_vars, and `id` for hue\n# Hide the legend in the output figure\nsns.pairplot(df, x_vars=[\"x\"], y_vars=[\"y\"], hue=\"id\", legend=False)\n\n# Show the plot\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and invert the x axis\nplt.plot(x, y)\nplt.gca().invert_xaxis()\nplt.show()\n",
        "\n\nx = np.arange(11)\ny = np.arange(11)\nplt.xlim(0, 10)\nplt.ylim(0, 10)\n\n# Plot a scatter plot x over y and set both the x limit and y limit to be between 0 and 10\n# Turn off axis clipping so data points can go beyond the axes\nplt.scatter(x, y, clip_on=False)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot a scatter plot with values in x and y\n# Plot the data points to have red inside and have black border\nplt.scatter(x, y, c='black', edgecolors='red')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x on a 2 by 2 subplots with a figure size of (15, 15)\nfig, axes = plt.subplots(2, 2, figsize=(15, 15))\n\n# repeat the plot in each subplot\nfor i in range(2):\n    for j in range(2):\n        axes[i, j].plot(x, y)\n\nplt.show()\n",
        "\n\nx = np.random.rand(100) * 10\n\n# Make a histogram of x\nplt.hist(x, range=(0, 10), bins=5, width=2)\nplt.show()\n",
        "\nplt.plot(x, y)\nplt.fill_between(x, y-error, y+error, alpha=0.2)\nplt.show()\n",
        "\n\nxvec = np.linspace(-5.0, 5.0, 100)\nx, y = np.meshgrid(xvec, xvec)\nz = -np.hypot(x, y)\nplt.contourf(x, y, z)\n\n# draw x=0 and y=0 axis in my contour plot with white color\nplt.plot([0, 0], [-5, 5], color='white')\nplt.plot([-5, 5], [0, 0], color='white')\n",
        "\nax.errorbar(box_position, box_height, yerr=box_errors, fmt=\"o\", color=c)\n",
        "\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nax1.plot(x, y, label='Y')\nax1.set_title('Y')\n\nax2.plot(a, z, label='Z')\nax2.set_title('Z')\n\nfig.suptitle('Y vs Z')\nax2.set_xlabel('a')\nax2.set_ylabel('z')\n\nplt.show()\n\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# make 4 by 4 subplots with a figure size (5,5)\n# in each subplot, plot y over x and show axis tick labels\n# give enough spacing between subplots so the tick labels don't overlap\nfig, axes = plt.subplots(nrows=4, ncols=4, figsize=(5,5))\nfor i in range(4):\n    for j in range(4):\n        axes[i,j].plot(x, y)\n        axes[i,j].set_xticks(np.arange(10))\n        axes[i,j].set_yticks(np.arange(10))\n        axes[i,j].set_xlabel('x-axis')\n        axes[i,j].set_ylabel('y-axis')\n        plt.subplots_adjust(wspace=0.5, hspace=0.5)\n",
        "\n\nd = np.random.random((10, 10))\n\n# Use matshow to plot d and make the figure size (8, 8)\nplt.matshow(d, cmap='gray', fignum=1, figsize=(8, 8))\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n].head(10)\n\n# Plot df as a matplotlib table. Set the bbox of the table to [0, 0, 1, 1]\nfig, ax = plt.subplots()\nax.axis('off')\nax.table(cellText=df.values, bbox=[0, 0, 1, 1])\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart. Show x axis tick labels on both top and bottom of the figure.\nplt.plot(x, y)\nplt.xticks(np.arange(11))\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.tick_params(axis='x', labelbottom=True, labeltop=True)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart. Show x axis ticks on both top and bottom of the figure.\nplt.plot(x, y)\nplt.xticks(np.arange(11))\nplt.grid(axis='both')\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart. Show x axis tick labels but hide the x axis ticks\nplt.plot(x, y)\nplt.xticks(x)\nplt.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=True)\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"exercise\")\n\n# Make catplots of scatter plots by using \"time\" as x, \"pulse\" as y, \"kind\" as hue, and \"diet\" as col\n# Change the subplots titles to \"Group: Fat\" and \"Group: No Fat\"\n\nsns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\", height=5, aspect=1)\n\n# Change the subplot titles\nplt.subplot(1, 2, 1)\nplt.title(\"Group: Fat\")\nplt.subplot(1, 2, 2)\nplt.title(\"Group: No Fat\")\n\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"exercise\")\n\n# Make catplots of scatter plots by using \"time\" as x, \"pulse\" as y, \"kind\" as hue, and \"diet\" as col\n# Change the xlabels to \"Exercise Time\" and \"Exercise Time\"\nsns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\", s=10)\nplt.xlabel(\"Exercise Time\")\nplt.ylabel(\"Exercise Pulse\")\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"exercise\")\n\n# Make catplots of scatter plots by using \"time\" as x, \"pulse\" as y, \"kind\" as hue, and \"diet\" as col\n# Do not show any ylabel on either subplot\nsns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\", ylabel=None)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x with label \"y\"\n# make the legend fontsize 8\nplt.plot(x, y, label='y')\nplt.legend(fontsize=8)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x with figsize (5, 5) and dpi 300\nplt.figure(figsize=(5, 5), dpi=300)\nplt.plot(x, y)\nplt.show()\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x with label \"y\" and show legend\n# Remove the border of frame of legend\nplt.plot(x, y, label='y')\nplt.legend(frameon=False)\nplt.show()\n",
        "\nfrom numpy import *\n\nt = linspace(0, 2 * math.pi, 400)\na = sin(t)\nb = cos(t)\nc = a + b\n\n# Plot a, b, c in the same figure\nfig, ax = plt.subplots()\nax.plot(t, a, label='a')\nax.plot(t, b, label='b')\nax.plot(t, c, label='c')\nax.set_xlabel('t')\nax.set_ylabel('y')\nax.set_title('a, b, c')\nax.legend()\nplt.show()\n",
        "\n\ndf = sns.load_dataset(\"penguins\")[[\"bill_length_mm\", \"species\", \"sex\"]]\n\n# Make a stripplot for the data in df. Use \"sex\" as x, \"bill_length_mm\" as y, and \"species\" for the color\n# Remove the legend from the stripplot\nsns.stripplot(x=\"sex\", y=\"bill_length_mm\", hue=\"species\", data=df, jitter=True, dodge=True, alpha=0.5)\nplt.legend(loc='upper right', bbox_to_anchor=(1.3, 1))\nplt.show()\n",
        "\n\ndf = pandas.DataFrame(\n    {\n        \"a\": np.arange(1, 31),\n        \"b\": [\"A\",] * 10 + [\"B\",] * 10 + [\"C\",] * 10,\n        \"c\": np.random.rand(30),\n    }\n)\n\n# Use seaborn FaceGrid for rows in \"b\" and plot seaborn pointplots of \"c\" over \"a\"\n# In each subplot, show xticks of intervals of 1 but show xtick labels with intervals of 2\ng = sns.FacetGrid(df, row=\"b\", aspect=1.5)\ng.map(sns.pointplot, \"a\", \"c\", order=range(1, 31), ci=None)\nfor ax in g.axes.flat:\n    ax.set_xticks(range(1, 31, 2))\n    ax.set_xticklabels(range(1, 31, 2))\nplt.show()\n",
        "\nfrom mpl_toolkits.mplot3d import Axes3D\n\nx = np.random.random(10)\ny = np.random.random(10)\nz = np.random.random(10)\n\n# Make a 3D scatter plot of x,y,z\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x, y, z)\nax.view_init(100, 50)\n\n# change the view of the plot to have 100 azimuth and 50 elevation\n",
        "\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart and name axis with labels (\"x\" and \"y\")\n# Hide tick labels but keep axis labels\nplt.plot(x, y)\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.xticks([])\nplt.yticks([])\nplt.show()\n",
        "\n\nx = np.random.random((10, 10))\nfrom matplotlib import gridspec\n\nnrow = 2\nncol = 2\n\nfig = plt.figure(figsize=(ncol + 1, nrow + 1))\n\n# Make a 2x2 subplots with fig and plot x in each subplot as an image\n# Remove the space between each subplot and make the subplot adjacent to each other\n# Remove the axis ticks from each subplot\ngs = gridspec.GridSpec(nrow, ncol, wspace=0.0, hspace=0.0)\n\nfor i in range(nrow):\n    for j in range(ncol):\n        ax = plt.subplot(gs[i, j])\n        ax.imshow(x, cmap='gray')\n        ax.set_xticks([])\n        ax.set_yticks([])\n\nplt.show()\n"
    ],
    "Tensorflow": [
        "\nx.assign(1)\n",
        "\nx.assign(114514)\n",
        "\n# Create a tensor of zeros with shape (len(labels), 10)\nresult = tf.zeros((len(labels), 10), dtype=tf.int32)\n\n# Iterate over the labels and set the corresponding class to 1\nfor i, label in enumerate(labels):\n    result[i, label] = 1\n",
        "\n# Create a tensor of zeros with shape (len(labels), 10)\nresult = tf.zeros((len(labels), 10), dtype=tf.int32)\n\n# Iterate over the labels and set the corresponding class to 1\nfor i, label in enumerate(labels):\n    result[i, label] = 1\n",
        "\nresult = tf.one_hot(labels, depth=10, dtype=tf.int32)\n",
        "\n    result = tf.one_hot(labels, depth=10, dtype=tf.int32)\n",
        "\nresult = tf.one_hot(labels, depth=10, dtype=tf.int32)\n",
        "\nimport tensorflow as tf\n\n\ntf.compat.v1.disable_eager_execution()\ninput = [10, 20, 30]\ndef my_map_func(i):\n  return [[i, i+1, i+2]]       # Fyi [[i], [i+1], [i+2]] throws an exception\nds = tf.data.Dataset.from_tensor_slices(input)\nds = ds.map(map_func=lambda input: tf.compat.v1.py_func(\n  func=my_map_func, inp=[input], Tout=[tf.int64]\n))\nelement = tf.compat.v1.data.make_one_shot_iterator(ds).get_next()\nresult = []\nwith tf.compat.v1.Session() as sess:\n  for _ in range(9):\n    result.append(sess.run(element))\nprint(result)\n",
        "\n    result = tf.data.Dataset.from_tensor_slices(input)\n    result = result.flat_map(lambda x: tf.data.Dataset.from_tensor_slices([x, x+1, x+2]))\n",
        "\nmax_length = max(lengths)\nmask = tf.sequence_mask(lengths, max_length, dtype=tf.float32)\nresult = tf.pad(mask, [[0, 8-max_length], [0, 0]])\n",
        "\nmax_length = max(lengths)\nmask = tf.sequence_mask(lengths, max_length, dtype=tf.float32)\n",
        "\nmax_length = max(lengths)\nmask = tf.sequence_mask(lengths, max_length, dtype=tf.float32)\nresult = tf.pad(mask, [[0, 0], [0, 8-max_length]], constant_values=0)\n",
        "\n    max_length = tf.reduce_max(lengths)\n    mask = tf.sequence_mask(lengths, max_length, dtype=tf.float32)\n    result = tf.pad(mask, [[0, 8-max_length], [0, 0]])\n",
        "\nmax_length = max(lengths)\nmask = tf.sequence_mask(lengths, max_length, dtype=tf.float32)\nresult = tf.pad(mask, [[0, 8-max_length], [0, 0]])\n",
        "\nresult = tf.stack(tf.meshgrid(a, b), axis=-1)\n",
        "\n    result = tf.stack(tf.meshgrid(a,b), axis=-1)\n",
        "\nresult = tf.reshape(a, (50, 100, 512))\n",
        "\nresult = tf.expand_dims(a, axis=-2)\n",
        "\nresult = tf.reshape(a, (1, 50, 100, 1, 512))\n",
        "\nresult = tf.reduce_sum(A, axis=1)\n",
        "\nresult = tf.reduce_prod(A, axis=1)\n",
        "\nresult = tf.math.reciprocal(A)\n",
        "\n# [Missing Code]\n# Calculate the L2 distance d(A,B) element-wise\n# Hint: Use tf.reduce_sum to sum up the squared differences and then take the square root of the result\nresult = tf.sqrt(tf.reduce_sum(tf.square(tf.sub(a, b)), axis=1))\n",
        "\nresult = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=0)\n",
        "\n    # [Missing Code]\n    # Calculate the L2 distance d(A,B) element-wise\n    # First I did a tf.square(tf.sub(lhs, rhs)) to get\n    # [\n    #   [1,1,1],\n    #   [0,0,0]\n    # ]\n    # and then I want to do an element-wise reduce which returns \n    # [\n    #   3,\n    #   0\n    # ]\n    # but tf.reduce_sum does not allow my to reduce by row.\n    # I need to use tf.reduce_sum(tf.square(tf.sub(A, B)), axis=1)\n    # which returns\n    # [\n    #   3,\n    #   0\n    # ]\n    result = tf.reduce_sum(tf.square(tf.sub(A, B)), axis=1)\n",
        "\nm = tf.gather_nd(x, tf.stack([tf.range(2), z], axis=1))\n",
        "\nm = tf.gather_nd(x, tf.stack([row, col], axis=1))\n",
        "\n    m = tf.gather_nd(x, tf.stack([y,z], axis=1))\n",
        "\nresult = tf.tensordot(A, B, axes=[[2], [2]])\n",
        "\nresult = tf.tensordot(A, B, axes=[[2], [2]])\n",
        "\nresult = tf.strings.unicode_decode(x, \"UTF-8\")\n",
        "\n    result = tf.strings.unicode_decode(x, \"UTF-8\")\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n    # [Missing Code]\n    # Average the second to last dimension of X (the features) but only the non-zero entries.\n    # So, we divide by the sum by the number of non-zero entries.\n    # Hint: tf.reduce_sum() and tf.count_nonzero() can be useful here.\n    result = tf.reduce_sum(x, axis=-2) / tf.cast(tf.count_nonzero(x, axis=-2), tf.float32)\n",
        "\nSession = tf.Session\n",
        "\nresult = tf.argmax(a, axis=1)\n",
        "\nresult = tf.argmax(a, axis=1)\n",
        "\n    result = tf.argmax(a, axis=1)\n",
        "\n# Find the index of the minimum value in each column\nmin_indices = tf.argmin(a, axis=0)\n\n# Create a tensor of the same shape as a with the minimum indices\nresult = tf.scatter_nd(tf.expand_dims(tf.range(a.shape[0]), axis=1), min_indices, a.shape)\n",
        "\n# Save the model in \"export/1\"\ntf.saved_model.save(model, \"export/1\")\n",
        "\nresult = tfp.distributions.Categorical(probs=[0.25, 0.25, 0.25, 0.25]).sample(10)\n",
        "\nresult = tfp.distributions.Categorical(probs=[0.2, 0.3, 0.2, 0.3]).sample(114)\n",
        "\n    # Set the random seed to 10\n    tf.random.set_seed(seed_x)\n    # Generate 10 random integers from a uniform random variable which takes values in {1, 2, 3, 4}\n    result = tfp.distributions.Categorical(probs=[0.25, 0.25, 0.25, 0.25]).sample(10)\n",
        "\nresult = tf.__version__\n"
    ],
    "Scipy": [
        "\ncoefficients = np.polyfit(np.log(x), y, 1)\nresult = coefficients\n",
        "\ncoefficients = np.polyfit(np.log(x), y, 1)\nresult = coefficients[::-1]\n",
        "\npopt, pcov = scipy.optimize.curve_fit(func, x, y, p0)\nresult = popt\n",
        "\nstatistic, p_value = stats.ks_2samp(x, y)\n",
        "\ntest_stat, p_value = stats.ks_2samp(x, y)\nresult = p_value > alpha\n",
        "\nprint(result.x)\n",
        "\np_values = scipy.stats.norm.cdf(z_scores)\n",
        "\np_values = scipy.stats.norm.cdf(z_scores)\n",
        "\nz_scores = scipy.stats.norm.ppf(1-p_values)\n",
        "\ndist = stats.lognorm(s=stddev, scale=np.exp(mu))\nresult = dist.cdf(x)\n",
        "\ndist = stats.lognorm(s=stddev, scale=np.exp(mu))\nexpected_value = dist.mean()\nmedian = dist.median()\n",
        "\nresult = sa.dot(sb)\n",
        "\n    result = sA.dot(sB)\n",
        "\n# Interpolation using scipy.interpolate.LinearNDInterpolator\ninterpolator = scipy.interpolate.LinearNDInterpolator(points, V)\nresult = interpolator(request)\n",
        "\n# Interpolation using scipy.interpolate.LinearNDInterpolator\ninterpolator = scipy.interpolate.LinearNDInterpolator(points, V)\nresult = interpolator(request)\n",
        "\n# Calculate the rotation matrix using the angle\nrot_mat = np.array([[np.cos(angle), -np.sin(angle)], [np.sin(angle), np.cos(angle)]])\n# Calculate the translation matrix using the center of the image\ncenter = np.array([data_orig.shape[0]/2, data_orig.shape[1]/2])\ntrans_mat = np.array([[1, 0, -center[0]], [0, 1, -center[1]], [0, 0, 1]])\n# Calculate the new center of the rotated image\nnew_center = np.dot(np.linalg.inv(trans_mat), np.dot(rot_mat, center))\n# Calculate the new coordinates of the point (x0,y0) in the rotated image\nnew_coords = np.dot(np.linalg.inv(trans_mat), np.dot(rot_mat, np.array([x0, y0, 1])))[:2]\n",
        "\nresult = np.array(M.diagonal()).reshape(-1, 1)\n",
        "\nresult = stats.kstest(times, \"uniform\")\n",
        "\n    # [Missing Code]\n",
        "\nresult = stats.kstest(times, \"uniform\")\n",
        "\nFeature = sparse.hstack([c1, c2])\n",
        "\nFeature = sparse.hstack([c1, c2])\n",
        "\nFeature = sparse.vstack([c1, c2])\n",
        "\nimport numpy as np\nimport scipy.spatial\nimport scipy.optimize\n\n# create six points in 2d space; the first three belong to set \"A\" and the\n# second three belong to set \"B\"\nx = [1, 2, 3, 1.8, 1.9, 3.4]\ny = [2, 3, 1, 2.6, 3.4, 0.4]\npoints1 = np.array([(x, y) for x, y in zip(x, y)])\nN = points1.shape[0]\npoints2 = 2*np.random.rand(N,2)-1\n\n# calculate the distance matrix between the points in the two sets\ndist_matrix = scipy.spatial.distance.cdist(points1, points2)\n\n# use the scipy.optimize.linear_sum_assignment function to find the optimal assignment of points from set 1 to set 2\nrow_ind, col_ind = scipy.optimize.linear_sum_assignment(dist_matrix)\n\n# create a list of the indices of the points in set 2 that are assigned to each point in set 1\nmapping = [col_ind[row_ind == i] for i in range(N)]\n\n# use the list of indices to create the final mapping of points from set 1 to set 2\nresult = [mapping[i][0] for i in range(N)]\n\n# [Missing Code]\nprint(result)\n",
        "\n# [Missing Code]\n",
        "\nb.setdiag(0)\n",
        "\nresult = ndimage.label(img > threshold)[1]\n",
        "\n# [Missing Code]\n# Count the number of regions of cells which value below a given threshold\nlabeled_array, num_features = ndimage.label(img < threshold)\nresult = num_features\n",
        "\n    labels, num_labels = ndimage.label(img > threshold)\n    result = num_labels\n",
        "\n# [Missing Code]\n# Find the regions of cells which value exceeds a given threshold, say 0.75;\n# Determine the distance between the center of mass of such regions and the top left corner, which has coordinates (0,0).\n# Output the distances as a list.\n",
        "\nM = M + M.T\n",
        "\n    for i in range(sA.shape[0]):\n        for j in range(i):\n            sA[i,j] = sA[j,i]\n",
        "\n# Remove completely isolated single cells\nstructure = np.ones((3, 3))\nlabeled_array, num_features = scipy.ndimage.label(square, structure)\nsizes = scipy.ndimage.sum(square, labeled_array, range(num_features + 1))\nmask = sizes == 1\nremove_pixel = mask[labeled_array]\nsquare[remove_pixel] = 0\n",
        "\n# Remove all completely isolated single cells\nfor i in range(1, square.shape[0]-1):\n    for j in range(1, square.shape[1]-1):\n        if square[i, j] == 0 and (square[i-1, j] == 0 or square[i+1, j] == 0 or square[i, j-1] == 0 or square[i, j+1] == 0):\n            square[i, j] = 0\n",
        "\nmean = col.mean()\nstandard_deviation = col.std()\n",
        "\nMax = col.max()\nMin = col.min()\n",
        "\n# [Missing Code]\n# median = np.median(col.toarray()[0])\n# mode = np.bincount(col.toarray()[0]).argmax()\n",
        "\ndef fourier(x, *args):\n    a = args[:degree]\n    return np.sum([a[i] * np.cos(i * np.pi / tau * x) for i in range(degree)], axis=0)\n",
        "\n# Calculate pairwise Euclidean distances between all regions\nresult = scipy.spatial.distance.cdist(example_array, example_array, metric='euclidean')\n",
        "\n# Calculate pairwise Manhattan distances between all regions using cdist function\nresult = scipy.spatial.distance.cdist(example_array, example_array, 'cityblock')\n",
        "\n    # Calculate pairwise Euclidean distances between all regions\n    dist_matrix = scipy.spatial.distance.cdist(example_array, example_array, metric='euclidean')\n    # Convert distances measured in cells back to metres by multiplying by the raster resolution\n    resolution = 1 # Assuming raster resolution is 1m per cell\n    dist_matrix *= resolution\n",
        "\ntck = interpolate.splrep(x.flatten(), y.flatten(), k = 2, s = 4)\ny_int = interpolate.splev(x_val, tck, der = 0)\nresult = np.reshape(y_int, (5, 100))\n",
        "\nstatistic, critical_values, significance_level = ss.anderson_ksamp([x1, x2, x3, x4])\n",
        "\nresult = ss.anderson_ksamp((x1, x2))\n",
        "\nimport pandas as pd\nimport numpy as np\nimport scipy.stats as stats\n\ndef tau1(x):\n    y = np.array(A['A']) #  keep one column fix and run it in the other two\n    tau, p_value = stats.kendalltau(x, y)\n    return tau\n\ndf = pd.DataFrame([[1, 5, 2], [2, 4, 4], [3, 3, 1], [4, 2, 2], [5, 1, 4]], \n                 columns=['A', 'B', 'C'], index = [1, 2, 3, 4, 5])\n\ndf['AB'] = pd.rolling_apply(df['B'], 3, lambda x: tau1(x))\n\nprint(df)\n",
        "\nif sa.nnz == 0:\n    result = True\nelse:\n    result = False\n",
        "\nresult = len(sa.data) == 0 and len(sa.rows) == 0 and len(sa.cols) == 0\n",
        "\nresult = block_diag(*a)\n",
        "\nresult = stats.ranksums(pre_course_scores, during_course_scores)\np_value = result.pvalue\n",
        "\n    p_value = stats.ranksums(pre_course_scores, during_course_scores)[1]\n",
        "\n# Calculate the mean of the data\nmean = np.mean(a)\n\n# Calculate the variance of the data\nvariance = np.var(a, ddof=1)\n\n# Calculate the standard deviation of the data\nstd_dev = np.sqrt(variance)\n\n# Calculate the kurtosis of the data\nkurtosis = (np.sum((a - mean)**4) / (len(a) - 1)) / (std_dev**4)\n\n",
        "\nkurtosis_result = scipy.stats.kurtosis(a, bias=False)\n",
        "\nf = scipy.interpolate.interp2d(s, t, z, kind='cubic')\nresult = f(s, t)\n",
        "\n    f = scipy.interpolate.interp2d(example_s, example_t, z, kind='cubic')\n    result = f(s, t)\n",
        "\n# Create a list of indices for each voronoi region occupied by each extra point\nresult = []\nfor point in extraPoints:\n    region = vor.point_region(point)\n    result.append(region)\n\n# Convert the list of indices to a numpy array\nresult = np.array(result)\n",
        "\n# Create an empty list to store the indices of the Voronoi regions occupied by each extra point\nresult = []\n\n# Loop over the extra points\nfor point in extraPoints:\n    # Find the index of the Voronoi region that contains the point\n    regionIndex = vor.point_region[vor.regions[vor.point_region == -1].shape[0]]\n    # Append the index to the result list\n    result.append(regionIndex)\n\n# Convert the result list to a numpy array\nresult = np.array(result)\n",
        "\n# Create a sparse matrix using the given vectors\n# The matrix should have dimensions (max_vector_size, len(vectors))\n# The matrix should have only non-zero elements where the corresponding vector has a non-zero element\n# The matrix should have padded zeros to the end of elements for the vectors which are smaller than the maximum size\n\n# Create an empty sparse matrix\nresult = sparse.csr_matrix((max_vector_size, len(vectors)))\n\n# Iterate over each vector and set the non-zero elements in the sparse matrix\nfor i, vector in enumerate(vectors):\n    # Get the non-zero indices and values of the vector\n    non_zero_indices = np.where(vector != 0)[0]\n    non_zero_values = vector[non_zero_indices]\n    \n    # Set the non-zero elements in the sparse matrix\n    result[non_zero_indices, i] = non_zero_values\n\n",
        "\nimport numpy as np\nimport scipy.ndimage as nd\n\na= np.random.binomial(n=1, p=1/2, size=(9, 9))\nb = nd.median_filter(a, 3, origin=(1, 1))\nprint(b)\n",
        "\nrow_vec = M.getrow(row)\nresult = row_vec.toarray()[0][column]\n",
        "\nresult = []\nfor i in range(len(row)):\n    result.append(M.getrow(row[i])[0, column[i]])\n",
        "\nnew_array = np.zeros((10, 10, 100))\nfor i in range(10):\n    for j in range(10):\n        for k in range(100):\n            f = scipy.interpolate.interp1d(x, array[i, j, :], kind='linear')\n            new_array[i, j, k] = f(x_new[k])\n",
        "\nprob = scipy.integrate.quad(NDfx, -abs((x-u)/o2), abs((x-u)/o2))[0]\n",
        "\n    dev = abs((x-u)/o2)\n    P_inner = scipy.integrate.quad(NDfx,-dev,dev)[0]\n    P_outer = 1 - P_inner\n    P = P_inner + P_outer/2\n",
        "\nresult = sf.dct(np.eye(N), norm='ortho')\n",
        "\n# Create a sparse matrix using diags function from scipy.sparse\nTridiagonal_1 = sparse.diags(matrix, [-1,0,1], (5, 5)).toarray()\n",
        "\nM = np.zeros((N+1, N+1))\nfor i in range(N+1):\n    for j in range(i+1):\n        M[i,j] = scipy.stats.binom.pmf(j, i, p)\n",
        "\nresult = df.apply(stats.zscore)\n",
        "\nresult = df.apply(stats.zscore)\n",
        "\nresult = pd.DataFrame(columns=['data','zscore'])\nfor col in df.columns:\n    zscore = stats.zscore(df[col])\n    df_temp = pd.DataFrame({'data':df[col],'zscore':zscore},index=df.index)\n    result = pd.concat([result,df_temp],axis=1)\n",
        "\n# [Missing Code]\n# Calculate zscore for each column\nzscore = stats.zscore(df)\n# Round zscore to 3 decimal places\nzscore = np.round(zscore, decimals=3)\n# Create a new dataframe with zscore and data\nresult = pd.concat([df, pd.DataFrame(zscore, columns=df.columns)], axis=1)\n# Rename columns\nresult.columns = ['data', 'zscore']\n",
        "\nresult = scipy.optimize.line_search(test_func,test_grad,starting_point,direction)\n",
        "\nmid = np.array([[shape[0]//2, shape[1]//2]])\nresult = distance.cdist(np.indices(shape).reshape(shape[0]*shape[1], 2), mid)\n",
        "\nmid = np.array([[[shape[0]//2, shape[1]//2]]])\nresult = distance.cdist(np.indices(shape).reshape(shape[0]*shape[1], 2), mid, metric='cityblock')\n",
        "\n    mid = np.array([[[i,j] for j in range(shape[1])] for i in range(shape[0])])\n    # [Missing Code]\n",
        "\nresult = scipy.ndimage.zoom(x, shape[0]/x.shape[0], shape[1]/x.shape[1], order=1)\n",
        "\ndef func(x,a):\n    return np.dot(a, x**2)\ndef residual(pars, a, y):\n    vals = pars.valuesdict()\n    x = vals['x']\n    model = func(x,a)\n    return (y - model) **2\ndef main():\n    # simple one: a(M,N) = a(3,5)\n    a = np.array([ [ 0, 0, 1, 1, 1 ],\n                   [ 1, 0, 1, 0, 1 ],\n                   [ 0, 1, 0, 1, 0 ] ])\n    # true values of x\n    x_true = np.array([10, 13, 5, 8, 40])\n    # data without noise\n    y = func(x_true,a)\n    #************************************\n    # Apriori x0\n    x0 = np.array([2, 3, 1, 4, 20])\n    fit_params = Parameters()\n    fit_params.add('x', value=x0)\n    out = minimize(residual, fit_params, args=(a, y))\n    print(out)\nif __name__ == '__main__':\n    main()\n",
        "\ndef func(x,a):\n    return np.dot(a, x**2)\ndef residual(pars, a, y):\n    vals = pars.valuesdict()\n    x = vals['x']\n    model = func(x,a)\n    return (y - model)**2\ndef main():\n    # simple one: a(M,N) = a(3,5)\n    a = np.array([ [ 0, 0, 1, 1, 1 ],\n                   [ 1, 0, 1, 0, 1 ],\n                   [ 0, 1, 0, 1, 0 ] ])\n    # true values of x\n    x_true = np.array([10, 13, 5, 8, 40])\n    # data without noise\n    y = func(x_true,a)\n    #************************************\n    # Apriori x0\n    x0 = np.array([2, 3, 1, 4, 20])\n    fit_params = Parameters()\n    fit_params.add('x', value=x0, min=x_lower_bounds)\n    out = minimize(residual, fit_params, args=(a, y))\n    print(out.params['x'])\nif __name__ == '__main__':\n    main()\n",
        "\nimport scipy.integrate\nimport numpy as np\nN0 = 10\ntime_span = [-0.1, 0.1]\n\ndef dN1_dt_simple(t, N1):\n    return -100 * N1 + np.sin(t)\n\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_simple, t_span=time_span, y0=[N0,])\n\nresult = sol.y\nprint(result)\n",
        "\ndef dN1_dt_simple(t, N1):\n    return -100 * N1 + (t-np.sin(t)) if 0 < t < 2*np.pi else 0\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_simple, t_span=time_span, y0=[N0,])\n",
        "\ndef dN1_dt_simple(t, N1):\n    return -100 * N1 + np.cos(t)\nsol = scipy.integrate.solve_ivp(fun=dN1_dt_simple, t_span=time_span, y0=[N0,])\n",
        "\nfor t in range (4):\n    def const(x):    \n        y=x[t]\n        return y\n    cons.append({'type':'ineq', 'fun': const})\n",
        "\nresult = sparse.vstack((sa, sb))\n",
        "\nresult = sparse.vstack((sa, sb))\n",
        "\nI = []\n",
        "\n    def integrand(x):\n        return 2*x*c\n    result, error = scipy.integrate.quad(integrand, low, high)\n",
        "\nV.data[V.data != 0] += x\n",
        "\nV.data += x\n",
        "\n# Create a full matrix with the scalar value x\nfull_x = sparse.diags(x * np.ones(V.shape[0]), 0, format = 'coo')\n# Add the full matrix to V\nV = V + full_x\n# Add y to non-zero values in V\nV.data[V.data != 0] += y\n",
        "\n#iterate through columns\nfor Col in xrange(sa.shape[1]):\n   Column = sa[:,Col].data\n   List = [x**2 for x in Column]\n   #get the column length\n   Len = math.sqrt(sum(List))\n   #normalize the column\n   sa[:,Col] = sparse.csc_matrix(np.array([x/Len for x in Column]))\n",
        "\n#iterate through columns\nfor Col in xrange(sa.shape[1]):\n   Column = sa[:,Col].data\n   List = [x**2 for x in Column]\n   #get the column length\n   Len = math.sqrt(sum(List))\n   #normalize the column\n   sa[:,Col] = sparse.csr_matrix(np.array([x/Len for x in Column]))\n",
        "\na = (a > 0).astype(int)\n",
        "\n# Convert decimal matrix to binary matrix\na = (a > 0).astype(int)\n",
        "\n# Find the index of the closest element to each cluster's centroid\nclosest_elements = []\nfor i in range(5):\n    # Find the index of the centroid\n    centroid_index = np.argmin(np.sum((data - centroids[i])**2, axis=1))\n    # Find the index of the closest element to the centroid\n    closest_element_index = np.argmin(distance_matrix[centroid_index])\n    # Append the index to the list\n    closest_elements.append(closest_element_index)\n\n# Print the list of closest elements to each cluster's centroid\nprint(closest_elements)\n",
        "\n# Extract the closest-to-centroid element for each cluster\nclosest_to_centroid = []\nfor i in range(5):\n    # Find the index of the closest element to the centroid\n    closest_index = np.argmin(np.linalg.norm(data - centroids[i], axis=1))\n    # Extract the closest element\n    closest_to_centroid.append(data[closest_index])\n",
        "\n# Extract k-th closest element for each cluster\nresult = []\nfor i in range(k):\n    k_closest_elements = []\n    for j in range(len(cluster_membership)):\n        cluster_indices = np.where(cluster_membership[:, 0] == j)[0]\n        cluster_data = data[cluster_indices]\n        centroid = np.mean(cluster_data, axis=0)\n        distances = scipy.spatial.distance.cdist(cluster_data, [centroid])\n        k_closest_elements.append(cluster_indices[np.argsort(distances)[0][k-1]])\n    result.append(k_closest_elements)\n",
        "\nresult = fsolve(eqn, x0=0.5, args = (xdata,bdata))\n",
        "\nresult = []\nfor i in range(len(xdata)):\n    bdata = fsolve(eqn, x0=0.5, args = (adata[i],))\n    result.append([xdata[i], bdata[0]])\nresult = np.array(result)\nresult = result[result[:,1].argsort()]\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\nintegral_df = df.groupby(pd.Grouper(freq='25S')).apply(lambda x: integrate.trapz(x['A'], x.index.to_numpy()))\n",
        "\nresult = scipy.interpolate.griddata(x, y, eval)\n",
        "\ndef neg_log_likelihood(params, data):\n    n_categories = len(params)\n    freq = np.array(data.value_counts())\n    weights = params\n    prob = np.zeros(n_categories)\n    for i in range(n_categories):\n        prob[i] = freq[i] * np.log(weights[i])\n    return -np.sum(prob)\n\ndef neg_log_likelihood_grad(params, data):\n    n_categories = len(params)\n    freq = np.array(data.value_counts())\n    weights = params\n    prob = np.zeros(n_categories)\n    for i in range(n_categories):\n        prob[i] = freq[i] * np.log(weights[i])\n    grad = np.zeros(n_categories)\n    for i in range(n_categories):\n        grad[i] = freq[i] / weights[i]\n    return -grad\n\ndata = a['A1']\nn_categories = len(data.value_counts())\ninit_params = np.ones(n_categories) / n_categories\nresult = sciopt.minimize(neg_log_likelihood, init_params, args=(data,), jac=neg_log_likelihood_grad, method='BFGS')\nweights = result.x\n",
        "\npopt = sciopt.fminbound(e, pmin, pmax, args=(x,y))\n",
        "\nresult = signal.argrelmin(arr, order=n)[0]\n",
        "\nresult = []\nfor i in range(arr.shape[0]):\n    for j in range(arr.shape[1]):\n        if (i == 0 or arr[i-1][j] <= arr[i][j]) and (i == arr.shape[0]-1 or arr[i+1][j] <= arr[i][j]) and (j == 0 or arr[i][j-1] <= arr[i][j]) and (j == arr.shape[1]-1 or arr[i][j+1] <= arr[i][j]):\n            result.append([i,j])\n",
        "\ndf = df[(np.abs(stats.zscore(df[['NUM1', 'NUM2', 'NUM3']])) < 3).all(axis=1)]\n"
    ],
    "Sklearn": [
        "\ndata1 = pd.DataFrame(data=np.c_[data['data'], data['target']], columns=data['feature_names'] + ['target'])\n",
        "\ndata1 = pd.DataFrame(data=np.c_[data['data'], data['target']], columns=list(data['feature_names']) + ['target'])\n",
        "\ndata1 = pd.DataFrame(data=np.c_[data['data'], data['target']], columns=np.append(data['feature_names'], ['target']))\n",
        "\n    # Convert data from Bunch object to Pandas DataFrame\n    data1 = pd.DataFrame(data.data, columns=data.feature_names)\n",
        "\ndf_out = pd.get_dummies(df, columns=['Col3'])\n",
        "\ndf_out = pd.get_dummies(df, columns=['Col3'])\n",
        "\ndf_out = pd.get_dummies(df, columns=['Col4'])\n",
        "\ndf_out = pd.get_dummies(df.iloc[:, -1], prefix='Col', prefix_sep='_')\n",
        "\ndf_out = pd.get_dummies(df.iloc[:, -1], prefix=df.columns[-1], prefix_sep='_')\n",
        "\n# Use CalibratedClassifierCV to obtain probability estimates\ncalibrated_svm = CalibratedClassifierCV(svmmodel, cv=5)\ncalibrated_svm.fit(X, y)\nproba = calibrated_svm.predict_proba(x_test)[:, 1]\n",
        "\nfrom sklearn.calibration import CalibratedClassifierCV\nmodel = svm.LinearSVC()\ncalibrated_model = CalibratedClassifierCV(model, cv=5)\ncalibrated_model.fit(X, y)\nproba = calibrated_model.predict_proba(x_predict)\n",
        "\ndf = pd.concat([df_origin, pd.DataFrame(transform_output.todense())], axis=1)\n",
        "\ndf = pd.DataFrame(transform_output.todense())\ndf = pd.concat([df_origin, df], axis=1)\n",
        "\n    # Convert the transform_output to a dense numpy array\n    transform_output = transform_output.toarray()\n    # Create a new dataframe with the transformed data\n    df_transformed = pd.DataFrame(transform_output, columns=df.columns)\n    # Merge the transformed dataframe with the original dataframe\n    result = pd.concat([df, df_transformed], axis=1)\n",
        "\ndel clf.steps[1]\n",
        "\ndel clf.named_steps()['dim_svm']\n",
        "\ndel clf.named_steps['poly']\n",
        "\n# [Missing Code]\n# clf.steps.insert(1, ('poly2', PolynomialFeatures()))\n# clf.steps.pop(2)\n",
        "\n# [Missing Code]\n# clf.steps.insert(1, ('new_pca', PCA()))\n# clf.steps.pop(2)\n",
        "\nsteps = clf.named_steps\nsteps.insert(2, ('t1919810', PCA()))\n",
        "\nfit_params={\"early_stopping_rounds\":42,\n            \"eval_metric\" : \"mae\",\n            \"eval_set\" : [[testX, testY]]}\n",
        "\nfit_params={\"early_stopping_rounds\":42,\n            \"eval_metric\" : \"mae\",\n            \"eval_set\" : [[testX, testY]]}\ngridsearch.fit(trainX, trainY, **fit_params)\n",
        "\nproba = []\nfor train_index, test_index in cv:\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    logreg.fit(X_train, y_train)\n    proba.append(logreg.predict_proba(X_test))\n",
        "\nproba = []\nfor train_index, test_index in cv:\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    logreg.fit(X_train, y_train)\n    y_pred = logreg.predict_proba(X_test)[:, 1]\n    proba.append(y_pred)\n",
        "\ninversed = scaler.inverse_transform(scaled)\n",
        "\n    # inverse the scaled data using scaler\n    inversed = scaler.inverse_transform(scaled)\n",
        "\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score\n\nmodels = [LinearRegression(), LinearRegression(normalize=True), LinearRegression(fit_intercept=False)]\n\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\ny = np.array([1, 2, 3, 4, 5])\n\nfor model in models:\n    scores = cross_val_score(model, X, y, cv=5)\n    model_name = model.__class__.__name__\n    print(f'Name Model: {model_name}, Mean Score: {scores.mean()}')\n",
        "\nmodel_name = model.__class__.__name__\n",
        "\nimport numpy as np\nimport pandas as pd\nfrom sklearn.svm import LinearSVC\nfrom sklearn.model_selection import cross_val_score\n\nmodels = [LinearSVC(), LinearSVC(C=0.1), LinearSVC(C=10)]\nX = np.random.rand(100, 10)\ny = np.random.randint(2, size=100)\n\nfor model in models:\n    scores = cross_val_score(model, X, y, cv=5)\n    model_name = model.__class__.__name__\n    print(f'Name Model: {model_name}, Mean Score: {scores.mean()}')\n",
        "\ntf_idf_out = pipe.named_steps[\"tf_idf\"].fit_transform(data.test)\n",
        "\ntf_idf_out = pipe.named_steps[\"tf_idf\"].transform(data.test)\n",
        "\nselect_out = pipe.named_steps['select'].fit_transform(data, target)\n",
        "\nclf = GridSearchCV(bc, param_grid, cv=5)\nclf.fit(X_train, y_train)\n",
        "\nregressor = RandomForestRegressor(n_estimators=150, min_samples_split=1.0, random_state=42)\nrgr = regressor.fit(X,y)\n",
        "\nregressor = RandomForestRegressor(n_estimators=150, min_samples_split=1.0, random_state=42)\nrgr = regressor.fit(X,y)\n",
        "\ndef preprocess(s):\n    return s.upper()\n",
        "\ntfidf = TfidfVectorizer(preprocessor=prePro)\n",
        "\ndf_out = pd.DataFrame(preprocessing.scale(data), columns=data.columns, index=data.index)\n",
        "\ndf_out = pd.DataFrame(preprocessing.scale(data), columns=data.columns, index=data.index)\n",
        "\ncoef = grid.best_estimator_.named_steps[\"model\"].coef_\n",
        "\n# [Missing Code]\n",
        "\nmodel = SelectFromModel(clf, prefit=True)\ncolumn_names = X.columns[model.get_support()]\n",
        "\ncolumn_names = X.columns[model.get_support()]\n",
        "\nmodel = SelectFromModel(clf, prefit=True)\ncolumn_names = X.columns[model.get_support()]\n",
        "\nmodel = SelectFromModel(clf, prefit=True)\ncolumn_names = X.columns[model.get_support()]\n",
        "\nclosest_50_samples = km.fit_predict(X) == p\nclosest_50_samples = X[closest_50_samples]\nclosest_50_samples = pd.DataFrame(closest_50_samples)\nclosest_50_samples = closest_50_samples.sample(50)\n",
        "\nclosest_50_samples = km.fit_predict(X) == p\nclosest_50_samples = X[closest_50_samples]\nclosest_50_samples = closest_50_samples[np.argsort(np.linalg.norm(closest_50_samples - km.cluster_centers_[p], axis=1))[:50]]\n",
        "\nclosest_100_samples = km.fit_predict(X) == p\n",
        "\n    # Fit the k-means algorithm on the data\n    km.fit(X)\n    # Get the coordinates of the p^th center\n    center = km.cluster_centers_[p]\n    # Calculate the distance between each sample and the p^th center\n    distances = np.linalg.norm(X - center, axis=1)\n    # Get the indices of the 50 samples closest to the p^th center\n    indices = np.argsort(distances)[:50]\n    # Get the 50 samples closest to the p^th center\n    samples = X[indices]\n",
        "\n# One hot encoding of categorical variable.\nX_train = pd.get_dummies(X_train)\n",
        "\n# One Hot Encoding for categorical variables\nX_train = pd.get_dummies(X_train)\n",
        "\nfrom sklearn.svm import SVR\nsvr_rbf = SVR(kernel='rbf', C=1e3, gamma=0.1)\nsvr_rbf.fit(X, y)\npredict = svr_rbf.predict(X)\n",
        "\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import GridSearchCV\n\n# define the model\nmodel = SVR(kernel='rbf')\n\n# define the hyperparameters to tune\nparam_grid = {'C': [0.1, 1, 10], 'gamma': [0.1, 1, 10]}\n\n# define the grid search\ngrid_search = GridSearchCV(model, param_grid, cv=5)\n\n# fit the grid search\ngrid_search.fit(X, y)\n\n# get the best hyperparameters\nbest_params = grid_search.best_params_\n\n# define the model with the best hyperparameters\nmodel = SVR(kernel='rbf', C=best_params['C'], gamma=best_params['gamma'])\n\n# fit the model\nmodel.fit(X, y)\n\n# predict X\npredict = model.predict(X)\n",
        "\nfrom sklearn.svm import SVR\nfrom sklearn.preprocessing import PolynomialFeatures\n\npoly = PolynomialFeatures(degree=2)\nX_poly = poly.fit_transform(X)\n\nsvr_poly = SVR(kernel='poly')\nsvr_poly.fit(X_poly, y)\n\nX_test_poly = poly.transform(X_test)\npredict = svr_poly.predict(X_test_poly)\n",
        "\nfrom sklearn.svm import SVR\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import make_pipeline\n\n# create polynomial features\npoly = PolynomialFeatures(degree=2, include_bias=False)\n# create SVM with polynomial kernel\nsvm = SVR(kernel='poly', degree=2)\n# create pipeline\npipe = make_pipeline(poly, svm)\n# fit pipeline\npipe.fit(X, y)\n# predict X\npredict = pipe.predict(X)\n",
        "\n# [Missing Code]\n",
        "\n# [Missing Code]\n",
        "\n    # [Missing Code]\n",
        "\nnew_features = pd.DataFrame(np.zeros((len(features), max(len(f) for f in features))), columns=[f'f{i}' for i in range(max(len(f) for f in features))])\nfor i, f in enumerate(features):\n    new_features.iloc[i, :len(f)] = f\n",
        "\nnew_f = pd.DataFrame(np.zeros((len(f), max(len(i) for i in f))), columns=[f'f{i}' for i in range(max(len(i) for i in f))])\nfor i, sample in enumerate(f):\n    for j, feature in enumerate(sample):\n        new_f.iloc[i, j] = 1\n",
        "\nnew_features = pd.DataFrame(np.zeros((len(features), max(len(f) for f in features))), columns=[f'f{i}' for i in range(max(len(f) for f in features))])\nfor i, f in enumerate(features):\n    new_features.iloc[i, :len(f)] = f\n",
        "\n    # Convert the features to a 2D-array using numpy\n    new_features = np.array(features)\n",
        "\nnew_features = np.array(features).reshape(-1, len(features[0]))\n",
        "\n# [Missing Code]\n# Create a distance matrix using the given data_matrix\ndist_matrix = np.zeros((len(data_matrix), len(data_matrix)))\nfor i in range(len(data_matrix)):\n    for j in range(len(data_matrix)):\n        dist_matrix[i][j] = 1 - data_matrix[i][j]\n\n# Perform hierarchical clustering using AgglomerativeClustering\nmodel = sklearn.cluster.AgglomerativeClustering(n_clusters=2)\ncluster_labels = model.fit_predict(dist_matrix)\n",
        "\nmodel = sklearn.cluster.AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='average')\n# [Missing Code]\n",
        "\n# [Missing Code]\n# Create a distance matrix using 1-d array of simM\ndistM = np.zeros((len(simM), len(simM)))\nfor i in range(len(simM)):\n    for j in range(len(simM)):\n        distM[i][j] = 1 - simM[i][j]\n# Perform hierarchical clustering using AgglomerativeClustering\nmodel = sklearn.cluster.AgglomerativeClustering(n_clusters=2)\ncluster_labels = model.fit_predict(distM)\n",
        "\n# Perform hierarchical clustering on the data_matrix using scipy.cluster.hierarchy.linkage()\n# and scipy.cluster.hierarchy.fcluster() functions.\n# Set the number of clusters to 2 and use the 'single' linkage method.\n# Assign the cluster labels to the variable cluster_labels.\n",
        "\n# Perform hierarchical clustering using scipy.cluster.hierarchy\nZ = scipy.cluster.hierarchy.linkage(data_matrix, method='ward')\ncluster_labels = scipy.cluster.hierarchy.fcluster(Z, 2, criterion='maxclust')\n",
        "\n# Perform hierarchical clustering on the similarity matrix\nZ = scipy.cluster.hierarchy.linkage(simM, method='ward')\n# Perform clustering using the optimal number of clusters\noptimal_clusters = scipy.cluster.hierarchy.fcluster(Z, 2, criterion='maxclust')\n# Assign labels to the fruits based on the clustering results\ncluster_labels = ['fruit1' if i == 1 else 'fruit2' for i in optimal_clusters]\n",
        "\n# [Missing Code]\n",
        "\nimport numpy as np\nimport pandas as pd\nimport sklearn\nfrom sklearn.preprocessing import StandardScaler\n\ndata = load_data()\nassert type(data) == np.ndarray\n\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data)\n\nprint(centered_scaled_data)\n",
        "\n# [Missing Code]\n",
        "\n# Create a PowerTransformer object with method='box-cox'\npt = PowerTransformer(method='box-cox')\n# Fit and transform the data using the PowerTransformer object\nbox_cox_data = pt.fit_transform(data)\n",
        "\n# [Missing Code]\n",
        "\n# Create a PowerTransformer object with method='yeo-johnson'\npt = PowerTransformer(method='yeo-johnson')\n# Fit and transform the data\nyeo_johnson_data = pt.fit_transform(data)\n",
        "\nvectorizer = CountVectorizer(analyzer='word', tokenizer=None, preprocessor=None, stop_words=None, max_features=None, vocabulary=None, binary=False, ngram_range=(1, 1), analyzer_kwargs=None, dtype=np.int64)\n# [Missing Code]\n",
        "\nx = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n",
        "\n# Split the data into training and testing sets\nx_train, x_test, y_train, y_test = train_test_split(data.iloc[:, :-1], data.iloc[:, -1], test_size=0.2, random_state=42)\n",
        "\nx = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n",
        "\n    x = data.iloc[:, :-1]\n    y = data.iloc[:, -1]\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n",
        "\nfrom sklearn.cluster import KMeans\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\ndf = pd.read_csv(\"generate_csv/all_data_device.csv\", parse_dates=[\"date\"])\nf1 = df['mse'].values\n# generate another list\nf2 = list(range(0, len(f1)))\nX = np.array(list(zip(f1, f2)))\nkmeans = KMeans(n_clusters=2).fit(X)\nlabels = kmeans.predict(X)\n# Centroid values\ncentroids = kmeans.cluster_centers_\n#print(centroids)\n\nfig = plt.figure()\nax = Axes3D(fig)\nax.scatter(X[:, 0], X[:, 1], c=labels)\nax.scatter(centroids[:, 0], centroids[:, 1], marker='*', c='#050505', s=1000)\nplt.title('K Mean Classification')\nplt.show()\n",
        "\n# [Missing Code]\n",
        "\nfeatureSelector = sklearn.feature_selection.SelectKBest(k=1000)\nX_new = featureSelector.fit_transform(X, y)\nselected_feature_indices = featureSelector.get_support(indices=True)\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[selected_feature_indices]\n",
        "\nfeatureSelector = sklearn.feature_selection.SelectKBest(sklearn.feature_selection.f_classif, k=1000)\nX_new = featureSelector.fit_transform(X, y)\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[featureSelector.get_support()]\n",
        "\n    featureSelector = sklearn.feature_selection.SelectKBest(sklearn.feature_selection.f_classif, k=1000)\n    X_new = featureSelector.fit_transform(X, y)\n    selected_feature_indices = featureSelector.get_support(indices=True)\n    selected_feature_names = np.asarray(vectorizer.get_feature_names())[selected_feature_indices]\n",
        "\n# Sort the feature names in the same order as the vocabulary\nfeature_names = [feature for feature in feature_names if feature in vectorizer.vocabulary_]\n",
        "\n# Sort the feature names in the same order as the vocabulary\nfeature_names = [feature for feature in feature_names if feature in vectorizer.vocabulary_]\n",
        "\n# Sort the feature names in the same order as the vocabulary\nfeature_names = [feature for feature in feature_names if feature in vectorizer.vocabulary_]\n",
        "\n# Sort the feature names in the same order as the vocabulary\nfeature_names = [feature for feature in feature_names if feature in vectorizer.vocabulary_]\n",
        "\nslopes = []\nfor col in df1.columns:\n    df2 = df1[~np.isnan(df1[col])] #removes NaN values for each column to apply sklearn function\n    df3 = df2[['Time',col]]\n    npMatrix = np.matrix(df3)\n    X, Y = npMatrix[:,0], npMatrix[:,1]\n    slope = LinearRegression().fit(X,Y) # either this or the next line\n    m = slope.coef_[0]\n    slopes.append(m)\n",
        "\nslopes = []\nfor col in df1.columns:\n    df2 = df1[~np.isnan(df1[col])]\n    df3 = df2[['Time',col]]\n    npMatrix = np.matrix(df3)\n    X, Y = npMatrix[:,0], npMatrix[:,1]\n    slope = LinearRegression().fit(X,Y)\n    m = slope.coef_[0]\n    slopes.append(m)\n",
        "\ndf['Sex'] = LabelEncoder().fit_transform(df['Sex'])\n",
        "\ndf['Sex'] = LabelEncoder().fit_transform(df['Sex'])\n",
        "\n    df['Sex'] = LabelEncoder().fit_transform(df['Sex'])\n",
        "\n# ElasticNet Regression\n\nfrom sklearn import linear_model\nimport statsmodels.api as sm\n\nElasticNet = linear_model.ElasticNet() # create a lasso instance\nElasticNet.fit(X_train, y_train) # fit data\n\n# print(lasso.coef_)\n# print (lasso.intercept_) # print out the coefficients\n\ntraining_set_score = ElasticNet.score(X_train, y_train)\ntest_set_score = ElasticNet.score(X_test, y_test)\n\nprint(training_set_score)\nprint(test_set_score)\n",
        "\nscaler = MinMaxScaler()\ntransformed = scaler.fit_transform(np_array.reshape(-1, 1))\n",
        "\nscaler = MinMaxScaler()\ntransformed = scaler.fit_transform(np_array.reshape(-1, 1)).reshape(3, 3)\n",
        "\n    scaler = MinMaxScaler()\n    new_a = scaler.fit_transform(a.reshape(-1, 1)).reshape(a.shape)\n",
        "\npredict = clf.predict([close_buy1, m5, m10, ma20])\n",
        "\nnew_X = np.array(X, dtype=object)\n",
        "\nnew_X = np.array(X, dtype=object)\n",
        "\nnew_X = np.array(X, dtype=object)\n",
        "\n# [Missing Code]\n# Reshape the data to fit the model\nX = dataframe.iloc[-1:].values.reshape(-1, 1)\ny = dataframe.iloc[:,-1]\n",
        "\n# [Missing Code]\n",
        "\ntrain_size = 0.2\ntrain_dataframe, test_dataframe = train_test_split(features_dataframe, train_size=train_size, shuffle=False)\ntrain_dataframe = train_dataframe.sort_values(by=['date'])\ntest_dataframe = test_dataframe.sort_values(by=['date'])\n",
        "\ntrain_size = 0.8\ntrain_dataframe, test_dataframe = train_test_split(features_dataframe, train_size=train_size, shuffle=False)\ntrain_dataframe = train_dataframe.sort_values(by=['date'])\ntest_dataframe = test_dataframe.sort_values(by=['date'])\n",
        "\n    train_size = 0.2\n    train_dataframe, test_dataframe = train_test_split(features_dataframe, train_size=train_size, shuffle=False)\n    train_dataframe = train_dataframe.sort_values(by=['date'])\n    test_dataframe = test_dataframe.sort_values(by=['date'])\n",
        "\ncols = df.columns[2:4]\ndf[cols + '_scale'] = df.groupby('Month')[cols].apply(lambda x: scaler.fit_transform(x.values.reshape(-1, 1)))\n",
        "\nmyData['new_A2'] = myData.groupby('Month')['A2'].transform(lambda x: scaler.fit_transform(x.values.reshape(-1,1)))\nmyData['new_A3'] = myData.groupby('Month')['A3'].transform(lambda x: scaler.fit_transform(x.values.reshape(-1,1)))\n",
        "\n# [Missing Code]\n# Separate the words into a list\nword_list = words.split()\n# Remove the @ and # symbols from the words\nword_list = [word.replace('@', '').replace('#', '') for word in word_list]\n# Remove any punctuation marks from the words\nword_list = [word.translate(str.maketrans('', '', '.,!?')) for word in word_list]\n# Remove any empty strings from the list\nword_list = [word for word in word_list if word != '']\n",
        "\n# [Missing Code]\n",
        "\nfull_results = pd.DataFrame(GridSearch_fitted.cv_results_)\n",
        "\nfull_results = pd.DataFrame(GridSearch_fitted.cv_results_)\nfull_results = full_results[['params', 'mean_fit_time', 'mean_test_score', 'rank_test_score', 'split0_test_score', 'split1_test_score', 'split2_test_score', 'mean_train_score', 'std_train_score', 'mean_test_score', 'std_test_score']]\nfull_results = full_results.sort_values(by='mean_fit_time')\n",
        "\nimport joblib\njoblib.dump(model, 'sklearn_model')\n",
        "\ncosine_similarity_matrix = 1 - sklearn.metrics.pairwise.cosine_similarity(tfidf.fit_transform(df['description']), tfidf.transform(df['description']))\n"
    ],
    "Pytorch": [
        "\noptim.param_groups[0]['lr'] = 0.001\n",
        "\nimport numpy as np\nimport pandas as pd\nimport torch\n\n# Load data\ntrain_data = load_data()\n\n# Define model\nmodel = load_model()\n\n# Define optimizer\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\n# Define loss function\ncriterion = torch.nn.CrossEntropyLoss()\n\n# Train model\nfor epoch in range(10):\n    running_loss = 0.0\n    for i, data in enumerate(train_data, 0):\n        inputs, labels = data\n\n        # zero the parameter gradients\n        optimizer.zero_grad()\n\n        # forward + backward + optimize\n        outputs = model(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        # Update learning rate if loss increases\n        if loss > prev_loss:\n            optimizer.lr = optimizer.lr * 0.1\n\n        prev_loss = loss\n\n        # print statistics\n        running_loss += loss.item()\n        if i % 2000 == 1999:    # print every 2000 mini-batches\n            print('[%d, %5d] loss: %.3f' %\n                  (epoch + 1, i + 1, running_loss / 2000))\n            running_loss = 0.0\n",
        "\noptim.param_groups[0]['lr'] = 0.0005\n",
        "\n    # Check if loss on training set is increasing\n    if train_loss > prev_train_loss:\n        # Decrease learning rate\n        for param_group in optim.param_groups:\n            param_group['lr'] *= 0.1\n",
        "\nembedding_weights = torch.from_numpy(np.array(word2vec.wv.vectors))\nembedding_layer = nn.Embedding.from_pretrained(embedding_weights)\n",
        "\n    embedded_input = torch.from_numpy(np.array([word2vec[word] for word in input_Tensor]))\n",
        "\npx = pd.DataFrame(x.numpy())\n",
        "\npx = pd.DataFrame(x.numpy())\n",
        "\npx = pd.DataFrame(x.numpy())\n",
        "\nC = B[:, A_log] # Throws error\n",
        "\nimport torch\nA_logical = torch.ByteTensor([1, 0, 1]) # the logical index\nB = torch.LongTensor([[1, 2, 3], [4, 5, 6]])\nC = B[:, A_logical] # Throws error\n",
        "\nC = B[:, A_log] # Throws error\n",
        "\nC = B[:, A_log] # Throws error\n",
        "\nC = B[A_log, :] # This works\n",
        "\nimport torch\n\nA_log = torch.ByteTensor([0, 0, 1]) # the logical index\nB = torch.LongTensor([[999, 777, 114514], [9999, 7777, 1919810]])\nC = B[:, A_log] # Throws error\n\nprint(C)\n",
        "\nC = torch.index_select(B, dim=1, index=idx)\n",
        "\nx_tensor = torch.from_numpy(np.array(x_array, dtype=np.float16))\n",
        "\nx_tensor = torch.from_numpy(x_array)\n",
        "\n    a = np.array(a, dtype=np.float32)\n    # [Missing Code]\n",
        "\nmax_len = max(lens)\nmask = torch.zeros((len(lens), max_len), dtype=torch.long)\nfor i, l in enumerate(lens):\n    mask[i, :l] = 1\n",
        "\nmax_len = max(lens)\nmask = torch.zeros((len(lens), max_len), dtype=torch.long)\nfor i, l in enumerate(lens):\n    mask[i, :l] = 1\n",
        "\nmax_len = max(lens)\nmask = torch.zeros((len(lens), max_len), dtype=torch.long)\nfor i, l in enumerate(lens):\n    mask[i, :l] = 1\n",
        "\n    max_len = max(lens)\n    mask = torch.zeros((len(lens), max_len), dtype=torch.long)\n    for i, l in enumerate(lens):\n        mask[i, :l] = 1\n",
        "\nTensor_3D = torch.diag_embed(Tensor_2D)\n",
        "\n    diag_ele = torch.diag(t)\n    drag_ele = torch.diag(torch.diag(t))\n    result = torch.stack([diag_ele, drag_ele], dim=1)\n",
        "\nab = torch.cat((a,b),0)\n",
        "\nab = torch.cat((a,b),0)\n",
        "\n    ab = torch.cat((a, b), 0)\n",
        "\na[ : , lengths : , : ]  = 0\n",
        "\na[ : , lengths : , : ]  = 2333\n",
        "\na[ : , : lengths , : ]  = 0\n",
        "\na[ : , : lengths , : ]  = 2333\n",
        "\ntensor_of_tensors = torch.stack(list_of_tensors)\n",
        "\nnew_tensors = torch.stack(list)\n",
        "\n    tt = torch.stack(lt)\n",
        "\ntensor_of_tensors = torch.stack(list_of_tensors)\n",
        "\nresult = t[idx].flatten()\n",
        "\nresult = t[idx].numpy()\n",
        "\nresult = t[idx, torch.arange(t.shape[1])]\n",
        "\nresult = x.gather(1,ids)\n",
        "\nresult = x.gather(1,ids.unsqueeze(-1).expand(-1,-1,x.shape[-1]))\n",
        "\nresult = np.zeros((70,2))\nfor i in range(70):\n    idx = np.argmax(ids[i])\n    result[i] = x[i][idx]\n",
        "\ny = torch.argmax(softmax_output, dim=1)\n",
        "\ny = torch.argmax(softmax_output, dim=1)\n",
        "\ny = torch.zeros(softmax_output.shape[0], 1, dtype=torch.long)\nfor i in range(softmax_output.shape[0]):\n    y[i] = torch.argmin(softmax_output[i])\n",
        "\n    y = torch.argmax(softmax_output, dim=1)\n",
        "\n    y = torch.argmin(softmax_output, dim=1)\n",
        "\nimport numpy as np\nimport pandas as pd\nfrom torch.autograd import Variable\nimport torch\nimport torch.nn.functional as F\n\ndef cross_entropy2d(input, target, weight=None, size_average=True):\n    # input: (n, c, w, z), target: (n, w, z)\n    n, c, w, z = input.size()\n    # log_p: (n, c, w, z)\n    log_p = F.log_softmax(input, dim=1)\n    # log_p: (n*w*z, c)\n    log_p = log_p.permute(0, 3, 2, 1).contiguous().view(-1, c)  # make class dimension last dimension\n    log_p = log_p[\n       target.view(n, w, z, 1).repeat(0, 0, 0, c) >= 0]  # this looks wrong -> Should rather be a one-hot vector\n    log_p = log_p.view(-1, c)\n    # target: (n*w*z,)\n    mask = target >= 0\n    target = target[mask]\n    loss = F.nll_loss(log_p, target.view(-1), weight=weight, size_average=False)\n    if size_average:\n        loss /= mask.data.sum()\n    return loss\n\ndef load_data():\n    # Load data here\n    images = Variable(torch.randn(5, 3, 4, 4))\n    labels = Variable(torch.LongTensor(5, 4, 4).random_(3))\n    return images, labels\n\nimages, labels = load_data()\nloss = cross_entropy2d(images, labels)\nprint(loss)\n",
        "\ncnt_equal = np.sum(A == B)\n",
        "\ncnt_equal = np.sum(A == B)\n",
        "\ncnt_not_equal = np.count_nonzero(A != B)\n",
        "\n    cnt_equal = np.sum(A == B)\n",
        "\ncnt_equal = np.count_nonzero(A[-len(B):] == B)\n",
        "\ncnt_not_equal = np.count_nonzero(A[-len(B):] != B)\n",
        "\ntensors_31 = []\nfor i in range(0, 40, 10):\n    tensor = a[:, :, :, i:i+10, :]\n    tensors_31.append(tensor)\n",
        "\ntensors_31 = []\nfor i in range(0, 40, 10):\n    tensor = a[:, :, i:i+chunk_dim, :, :]\n    tensors_31.append(tensor)\n",
        "\noutput[mask==1] = clean_input_spectrogram[mask==1]\n",
        "\noutput[mask==0] = clean_input_spectrogram[mask==0]\n",
        "\nsigned_min = torch.min(torch.abs(x), torch.abs(y)) * torch.sign(x) * torch.sign(y)\n",
        "\nsigned_max = torch.max(torch.abs(x), torch.abs(y))\nsigned_max = torch.where(torch.abs(x) == signed_max, torch.sign(x), signed_max)\nsigned_max = torch.where(torch.abs(y) == signed_max, torch.sign(y), signed_max)\n",
        "\n    sign_x = torch.sign(x)\n    sign_y = torch.sign(y)\n    min = torch.min(torch.abs(x), torch.abs(y))\n    signed_min = sign_x * min * sign_y\n",
        "\nconf, classes = torch.max(MyNet(input).reshape(1, 3), 1)\nconfidence_score = conf.item()\n",
        "\nresult = torch.cat((a[:, :2], (a[:, 2:].mean(dim=1).unsqueeze(1) + b[:, :1] + b[:, 1:]).unsqueeze(1), a[:, 2:], b[:, 1:]), dim=1)\n",
        "\n    # Create a new tensor with the same shape as a and b\n    result = torch.zeros_like(a)\n    # Iterate over the columns of a and b\n    for i in range(a.shape[1]):\n        # Get the last column of a and the first column of b\n        col_a = a[:, i]\n        col_b = b[:, i]\n        # Calculate the average of the last column of a and the first column of b\n        col_avg = (col_a[-1] + col_b[0]) / 2\n        # Concatenate the last column of a, the middle column with the average, and the first column of b\n        result[:, i] = torch.cat((col_a, col_avg, col_b))\n",
        "\nnew = torch.zeros(1,4,4)\nnew[:,1:3,1:3] = t\nresult = torch.cat([new,torch.zeros(1,4,4)],dim=2)\n",
        "\nnew = torch.zeros(1,4,4)\nnew[:,1:3,1:3] = t\nresult = new\n",
        "\nnew = torch.tensor([[-1, -1, -1, -1,]])\nresult = torch.cat([t, new, new, new, new], dim=1)\n",
        "\nresult = torch.bmm(data, W).squeeze()\nresult = result.view(10, 2, 3)\n"
    ]
}