{
    "Pandas": [
        "```python\nimport pandas as pd\nimport numpy as np\n\n\ndf = pd.DataFrame({'Col1': [1, 4, 7, 10, 13, 16],\n                   'Col2': [2, 5, 8, 11, 14, 17],\n                   'Col3': [3, 6, 9, 12, 15, 18],\n                   'Type': [1, 1, 2, 2, 3, 3]})\nList = np.random.permutation(len(df))\n# [Begin of Missing Code]\nresult = df.iloc[List].reset_index(drop=True)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\ndf = pd.DataFrame({'Col1': [1, 4, 7, 10, 13, 16],\n                   'Col2': [2, 5, 8, 11, 14, 17],\n                   'Col3': [3, 6, 9, 12, 15, 18],\n                   'Type': [1, 1, 2, 2, 3, 3]})\nList = np.random.permutation(len(df))\n# [Begin of Missing Code]\ndf = df.iloc[List].reset_index(drop=True)\nresult = sum(df['Type'] != df['Type'].shift())\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Qu1': ['apple', 'potato', 'cheese', 'banana', 'cheese', 'banana', 'cheese', 'potato', 'egg'],\n                   'Qu2': ['sausage', 'banana', 'apple', 'apple', 'apple', 'sausage', 'banana', 'banana', 'banana'],\n                   'Qu3': ['apple', 'potato', 'sausage', 'cheese', 'cheese', 'potato', 'cheese', 'potato', 'egg']})\n# [Begin of Missing Code]\nfor col in df.columns:\n    counts = df[col].value_counts()\n    values_to_keep = counts[counts >= 2].index\n    df[col] = df[col].apply(lambda x: x if x in values_to_keep else 'other')\nresult = df\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Qu1': ['apple', 'potato', 'cheese', 'banana', 'cheese', 'banana', 'cheese', 'potato', 'egg'],\n                   'Qu2': ['sausage', 'banana', 'apple', 'apple', 'apple', 'sausage', 'banana', 'banana', 'banana'],\n                   'Qu3': ['apple', 'potato', 'sausage', 'cheese', 'cheese', 'potato', 'cheese', 'potato', 'egg']})\n\n# [Begin of Missing Code]\nfor col in df.columns:\n    counts = df[col].value_counts()\n    df[col] = df[col].apply(lambda x: x if counts[x] >= 3 else 'other')\n# [End of Missing Code]\n\nprint(df)\n```",
        "```python\nimport pandas as pd\n\nexample_df = pd.DataFrame({'Qu1': ['apple', 'potato', 'cheese', 'banana', 'cheese', 'banana', 'cheese', 'potato', 'egg'],\n                   'Qu2': ['sausage', 'banana', 'apple', 'apple', 'apple', 'sausage', 'banana', 'banana', 'banana'],\n                   'Qu3': ['apple', 'potato', 'sausage', 'cheese', 'cheese', 'potato', 'cheese', 'potato', 'egg']})\ndef f(df=example_df):\n    # [Begin of Missing Code]\n    for col in df.columns:\n        counts = df[col].value_counts()\n        values_to_keep = counts[counts >= 2].index\n        df[col] = df[col].apply(lambda x: x if x in values_to_keep else 'other')\n    result = df\n    # [End of Missing Code]\n    return result\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Qu1': ['apple', 'potato', 'cheese', 'banana', 'cheese', 'banana', 'cheese', 'potato', 'egg'],\n                   'Qu2': ['sausage', 'banana', 'apple', 'apple', 'apple', 'sausage', 'banana', 'banana', 'banana'],\n                   'Qu3': ['apple', 'potato', 'sausage', 'cheese', 'cheese', 'potato', 'cheese', 'potato', 'egg']})\n# [Begin of Missing Code]\ndf['Qu1'] = df['Qu1'].apply(lambda x: 'other' if df['Qu1'].value_counts()[x] < 3 else x)\ndf['Qu2'] = df['Qu2'].apply(lambda x: x if df['Qu2'].value_counts()[x] < 2 else x)\ndf['Qu3'] = df['Qu3'].apply(lambda x: 'other' if df['Qu3'].value_counts()[x] < 2 else x)\nresult = df\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Qu1': ['apple', 'potato', 'cheese', 'banana', 'cheese', 'banana', 'cheese', 'potato', 'egg'],\n                   'Qu2': ['sausage', 'banana', 'apple', 'apple', 'apple', 'sausage', 'banana', 'banana', 'banana'],\n                   'Qu3': ['apple', 'potato', 'sausage', 'cheese', 'cheese', 'potato', 'cheese', 'potato', 'egg']})\n\n# [Begin of Missing Code]\nvalue_counts_qu1 = pd.value_counts(df.Qu1)\ndf['Qu1'] = df['Qu1'].apply(lambda x: 'other' if x not in value_counts_qu1[value_counts_qu1 >= 3].index.tolist() and x != 'apple' else x)\n\nvalue_counts_qu2 = pd.value_counts(df.Qu2)\ndf['Qu2'] = df['Qu2'].apply(lambda x: x if x in value_counts_qu2[value_counts_qu2 >= 2].index.tolist() else 'other')\n\nvalue_counts_qu3 = pd.value_counts(df.Qu3)\ndf['Qu3'] = df['Qu3'].apply(lambda x: x if x in value_counts_qu3[value_counts_qu3 >= 2].index.tolist() else 'other')\n# [End of Missing Code]\n\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'url': ['A.com', 'A.com', 'A.com', 'B.com', 'B.com', 'C.com', 'B.com'],\n                   'keep_if_dup': ['Yes', 'Yes', 'No', 'No', 'No', 'No', 'Yes']})\n# [Begin of Missing Code]\ndf.loc[df['keep_if_dup'] == 'No', 'url'] = None\nresult = df.drop_duplicates(subset='url', keep='first')\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'url': ['A.com', 'A.com', 'A.com', 'B.com', 'B.com', 'C.com', 'B.com'],\n                   'drop_if_dup': ['Yes', 'Yes', 'No', 'No', 'No', 'No', 'Yes']})\n# [Begin of Missing Code]\nresult = df.drop_duplicates(subset='url', keep='first')\nresult = pd.concat([result, df[df['drop_if_dup'] == 'No']])\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'url': ['A.com', 'A.com', 'A.com', 'B.com', 'B.com', 'C.com', 'B.com'],\n                   'keep_if_dup': ['Yes', 'Yes', 'No', 'No', 'No', 'No', 'Yes']})\n# [Begin of Missing Code]\ndf = df.sort_values(by=['url', 'keep_if_dup'], ascending=[True, False])\ndf = df.drop_duplicates(subset='url', keep='last')\nresult = df.sort_index()\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'name': ['A', 'A', 'B', 'C', 'B', 'A'],\n                   'v1': ['A1', 'A2', 'B1', 'C1', 'B2', 'A2'],\n                   'v2': ['A11', 'A12', 'B12', 'C11', 'B21', 'A21'],\n                   'v3': [1, 2, 3, 4, 5, 6]})\n# [Begin of Missing Code]\nresult = {}\nfor index, row in df.iterrows():\n    current_dict = result\n    for col in df.columns[:-1]:\n        if row[col] not in current_dict:\n            current_dict[row[col]] = {}\n        current_dict = current_dict[row[col]]\n    current_dict[df.columns[-1]] = row[df.columns[-1]]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\n```\n[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'datetime': ['2015-12-01 00:00:00-06:00', '2015-12-02 00:01:00-06:00', '2015-12-03 00:00:00-06:00']})\ndf['datetime'] = pd.to_datetime(df['datetime'])\n# [Begin of Missing Code]\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nresult = example_df['datetime'].dt.tz_localize(None)\n```",
        "```python\ndf['datetime'] = df['datetime'].dt.tz_localize(None).dt.strftime('%d-%b-%Y %H:%M:%S').sort_values()\n```",
        "```python\ndf['datetime'] = df['datetime'].dt.tz_localize(None)\ndf = df.sort_values(by='datetime')\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'name': ['matt', 'james', 'adam'],\n                   'status': ['active', 'active', 'inactive'],\n                   'number': [12345, 23456, 34567],\n                   'message': ['[job:  , money: none, wife: none]',\n                               '[group: band, wife: yes, money: 10000]',\n                               '[job: none, money: none, wife:  , kids: one, group: jail]']})\n# [Begin of Missing Code]\ndf['message'] = df['message'].apply(lambda x: x.strip('[]'))\ndf['message'] = df['message'].apply(lambda x: x.split(', '))\ndf['message'] = df['message'].apply(lambda x: dict(map(str.strip, i.split(':')) for i in x))\nresult = pd.concat([df.drop('message', axis=1), df['message'].apply(pd.Series)], axis=1)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'product': [1179160, 1066490, 1148126, 1069104, 1069105, 1160330, 1069098, 1077784, 1193369, 1179741],\n                   'score': [0.424654, 0.424509, 0.422207, 0.420455, 0.414603, 0.168784, 0.168749, 0.168738, 0.168703, 0.168684]})\nproducts = [1069104, 1069105]\n\n# [Begin of Missing Code]\ndf.loc[df['product'].isin(products), 'score'] *= 10\n# [End of Missing Code]\n\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\ndf = pd.DataFrame({'product': [1179160, 1066490, 1148126, 1069104, 1069105, 1160330, 1069098, 1077784, 1193369, 1179741],\n                   'score': [0.424654, 0.424509, 0.422207, 0.420455, 0.414603, 0.168784, 0.168749, 0.168738, 0.168703, 0.168684]})\nproducts = [1066490, 1077784]\n# [Begin of Missing Code]\ndf.loc[df['product'].isin(products), 'score'] = df.loc[df['product'].isin(products), 'score']\ndf.loc[~df['product'].isin(products), 'score'] = df.loc[~df['product'].isin(products), 'score'] * 10\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'product': [1179160, 1066490, 1148126, 1069104, 1069105, 1160330, 1069098, 1077784, 1193369, 1179741],\n                   'score': [0.424654, 0.424509, 0.422207, 0.420455, 0.414603, 0.168784, 0.168749, 0.168738, 0.168703, 0.168684]})\nproducts = [[1069104, 1069105], [1179159, 1179161]]\n# [Begin of Missing Code]\ndf.loc[df['product'].isin(products[0] + products[1]), 'score'] *= 10\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'product': [1179160, 1066490, 1148126, 1069104, 1069105, 1160330, 1069098, 1077784, 1193369, 1179741],\n                   'score': [0.424654, 0.424509, 0.422207, 0.420455, 0.414603, 0.168784, 0.168749, 0.168738, 0.168703, 0.168684]})\nproducts = [1069104, 1069105]\n# [Begin of Missing Code]\ndf.loc[df['product'].isin(products), 'score'] = (df.loc[df['product'].isin(products), 'score'] - df.loc[df['product'].isin(products), 'score'].min()) / (df.loc[df['product'].isin(products), 'score'].max() - df.loc[df['product'].isin(products), 'score'].min())\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'A': [1, 0, 0, 0, 1, 0],\n                   'B': [0, 1, 0, 0, 0, 1],\n                   'C': [0, 0, 1, 0, 0, 0],\n                   'D': [0, 0, 0, 1, 0, 0]})\n# [Begin of Missing Code]\nresult = df.apply(lambda x: ''.join(x.index[x==1]), axis=1)\nresult.name = 'category'\ndf = pd.concat([df, result], axis=1)\n# [End of Missing Code]\nprint(df)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'A': [0, 1, 1, 1, 0, 1],\n                   'B': [1, 0, 1, 1, 1, 0],\n                   'C': [1, 1, 0, 1, 1, 1],\n                   'D': [1, 1, 1, 0, 1, 1]})\n# [Begin of Missing Code]\nresult = df.apply(lambda x: x.index[x==0][0], axis=1)\n# [End of Missing Code]\nresult = df.assign(category=result)\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'A': [1, 0, 0, 0, 1, 0],\n                   'B': [0, 1, 0, 0, 1, 1],\n                   'C': [1, 1, 1, 0, 1, 0],\n                   'D': [0, 0, 0, 1, 1, 0]})\n# [Begin of Missing Code]\ndf['category'] = df.apply(lambda x: list(x.index[x==1]), axis=1)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Date':['2019-01-01','2019-02-08','2019-02-08', '2019-03-08']})\ndf['Date'] = pd.to_datetime(df['Date'])\n# [Begin of Missing Code]\ndf['Date'] = df['Date'].dt.strftime('%b-%Y')\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Date':['2019-01-01','2019-02-08','2019-02-08', '2019-03-08']})\ndf['Date'] = pd.to_datetime(df['Date'])\n# [Begin of Missing Code]\ndf['Date'] = df['Date'].dt.strftime('%d-%b-%Y')\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Date':['2018-01-01','2018-02-08','2018-02-08', '2018-02-08']})\ndf['Date'] = pd.to_datetime(df['Date'])\nList = ['2017-08-17', '2018-01-31']\n# [Begin of Missing Code]\ndf = df[(df['Date'] >= List[0]) & (df['Date'] <= List[1])]\ndf['Month'] = df['Date'].dt.month_name().str.slice(stop=3)\ndf['Year'] = df['Date'].dt.year\ndf['Day'] = df['Date'].dt.day_name().str.slice(stop=3)\ndf['Date'] = df['Month'] + '-' + df['Day'] + '-' + df['Year'].astype(str)\n# [End of Missing Code]\nresult = df[['Date']]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'#1': [11.6985, 43.6431, 54.9089, 63.1225, 72.4399],\n                   '#2': [126.0, 134.0, 130.0, 126.0, 120.0]},\n                  index=['1980-01-01', '1980-01-02', '1980-01-03', '1980-01-04', '1980-01-05'])\n# [Begin of Missing Code]\ndf['#1'] = df['#1'].shift(periods=-1)\ndf.iloc[-1, 0] = df.iloc[0, 0]\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'#1': [11.6985, 43.6431, 54.9089, 63.1225, 72.4399],\n                   '#2': [126.0, 134.0, 130.0, 126.0, 120.0]},\n                  index=['1980-01-01', '1980-01-02', '1980-01-03', '1980-01-04', '1980-01-05'])\n# [Begin of Missing Code]\ndf = pd.concat([df.tail(1), df.head(-1)], axis=0)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'#1': [11.6985, 43.6431, 54.9089, 63.1225, 72.4399],\n                   '#2': [126.0, 134.0, 130.0, 126.0, 120.0]},\n                  index=['1980-01-01', '1980-01-02', '1980-01-03', '1980-01-04', '1980-01-05'])\n# [Begin of Missing Code]\ndf['#1'] = df['#1'].shift(periods=-1)\ndf['#1'][0] = df['#1'].iloc[-1]\ndf['#2'] = df['#2'].shift(periods=1)\ndf['#2'][df.index[-1]] = df['#2'][df.index[0]]\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'#1': [11.6985, 43.6431, 54.9089, 63.1225, 72.4399],\n                   '#2': [126.0, 134.0, 130.0, 126.0, 120.0]},\n                  index=['1980-01-01', '1980-01-02', '1980-01-03', '1980-01-04', '1980-01-05'])\n# [Begin of Missing Code]\ndf['#1'] = df['#1'].shift(-1)\ndf.iloc[-1, 0] = df.iloc[0, 0]\ndf = df[['#1', '#2']]\nmin_r2 = float('inf')\nfor i in range(len(df)):\n    r2 = df.corr().iloc[0, 1] ** 2\n    if r2 < min_r2:\n        min_r2 = r2\n        result = df.copy()\n    df = df.shift(-1)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame(\n    {'HeaderA': [476],\n     'HeaderB': [4365],\n     'HeaderC': [457]})\n# [Begin of Missing Code]\ndf.columns = [col + 'X' for col in df.columns]\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame(\n    {'HeaderA': [476],\n     'HeaderB': [4365],\n     'HeaderC': [457]})\n# [Begin of Missing Code]\ndf.columns = ['X' + col for col in df.columns]\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame(\n    {'HeaderA': [476],\n     'HeaderB': [4365],\n     'HeaderC': [457],\n     \"HeaderX\": [345]})\n# [Begin of Missing Code]\ndf.columns = [col + 'X' if not col.endswith('X') else 'X' + col for col in df.columns]\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({ 'group': ['A', 'A', 'A', 'B', 'B'], 'group_color' : ['green', 'green', 'green', 'blue', 'blue'], 'val1': [5, 2, 3, 4, 5], 'val2' : [4, 2, 8, 5, 7],'val3':[1,1,4,5,1] })\n# [Begin of Missing Code]\nvalue_cols = [col for col in df.columns if col.startswith('val')]\nresult = df.groupby('group').agg({\"group_color\": \"first\", **{col: \"mean\" for col in value_cols}})\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({ 'group': ['A', 'A', 'A', 'B', 'B'], 'group_color' : ['green', 'green', 'green', 'blue', 'blue'], 'val1': [5, 2, 3, 4, 5], 'val2' : [4, 2, 8, 5, 7],'val3':[1,1,4,5,1] })\n# [Begin of Missing Code]\nvalue_cols = [col for col in df.columns if col.startswith('val')]\nresult = df.groupby('group').agg({\"group_color\": \"first\", **{col: \"sum\" for col in value_cols}})\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({ 'group': ['A', 'A', 'A', 'B', 'B'], 'group_color' : ['green', 'green', 'green', 'blue', 'blue'], 'val1': [5, 2, 3, 4, 5], 'val2' : [4, 2, 8, 5, 7],'val42':[1,1,4,5,1] })\n# [Begin of Missing Code]\nval_cols = [col for col in df.columns if col.startswith('val')]\nagg_dict = {\"group_color\": \"first\"}\nfor col in val_cols:\n    if col.endswith('2'):\n        agg_dict[col] = 'mean'\n    else:\n        agg_dict[col] = 'sum'\nresult = df.groupby('group').agg(agg_dict)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'a':[1,1,1,1],'b':[2,2,1,0],'c':[3,3,1,0],'d':[0,4,6,0],'q':[5,5,1,0]})\nrow_list = [0,2,3]\ncolumn_list = ['a','b','d']\n# [Begin of Missing Code]\nresult = df.loc[row_list, column_list].mean()\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'a':[1,1,1,1],'b':[2,2,1,0],'c':[3,3,1,0],'d':[0,4,6,0],'q':[5,5,1,0]})\nrow_list = [0,2,3]\ncolumn_list = ['a','b','d']\n# [Begin of Missing Code]\nresult = df.loc[row_list, column_list].sum()\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\ndf = pd.DataFrame({'a':[1,1,1,1],'b':[2,2,1,0],'c':[3,3,1,0],'d':[0,4,6,0],'q':[5,5,1,0]})\nrow_list = [0,2,3]\ncolumn_list = ['a','b','d']\n# [Begin of Missing Code]\nresult = df.loc[row_list, column_list].sum()\nresult.drop(result.idxmax(), inplace=True)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame(data=[[34, 'null', 'mark'], [22, 'null', 'mark'], [34, 'null', 'mark']], columns=['id', 'temp', 'name'], index=[1, 2, 3])\n# [Begin of Missing Code]\nresult = pd.Series({col: df[col].value_counts() for col in df.columns})\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame(data=[[34, 'null', 'null'], [22, 'null', 'mark'], [34, 'null', 'mark']], columns=['id', 'temp', 'name'], index=[1, 2, 3])\n# [Begin of Missing Code]\nresult = df.isnull().sum()\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\ndf = pd.DataFrame(data=[[34, 'null', 'mark'], [22, 'null', 'mark'], [34, 'null', 'mark']], columns=['id', 'temp', 'name'], index=[1, 2, 3])\n# [Begin of Missing Code]\nresult = \"\"\nfor col in df.columns:\n    result += \"---- \" + col + \" ---\\n\"\n    result += str(df[col].value_counts()) + \"\\n\"\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nresult = df.copy()\nresult.columns = result.iloc[0]\nresult = result.drop(result.index[0])\nresult = result.reset_index(drop=True)\n```",
        "```python\nresult = df.copy()\nresult.columns = result.iloc[0]\nresult = result.drop(result.index[0])\nresult = result.reset_index(drop=True)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame([[3,1,2],[np.nan,1,2],[np.nan,np.nan,2]],columns=['0','1','2'])\n# [Begin of Missing Code]\ndf = df.apply(lambda x: pd.Series(x.dropna().values))\nresult = df.reindex(columns=df.columns[::-1]).ffill().reindex(columns=df.columns)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame([[3,1,2],[1,2,np.nan],[2,np.nan,np.nan]],columns=['0','1','2'])\n# [Begin of Missing Code]\ndf = df.fillna(method='ffill', axis=1).fillna(method='bfill', axis=1)\n# [End of Missing Code]\nprint(df)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame([[3,1,2],[np.nan,1,2],[np.nan,np.nan,2]],columns=['0','1','2'])\n# [Begin of Missing Code]\nresult = df.apply(lambda x: pd.Series(x.dropna().values.tolist() + x[x.isnull()].values.tolist()), axis=1)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'lab':['A', 'B', 'C', 'D', 'E', 'F'], 'value':[50, 35, 8, 5, 1, 1]})\ndf = df.set_index('lab')\nthresh = 6\n# [Begin of Missing Code]\ndf.loc[df['value'] < thresh, 'lab'] = 'X'\ndf = df.groupby('lab').sum()\n# [End of Missing Code]\nprint(df)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'lab':['A', 'B', 'C', 'D', 'E', 'F'], 'value':[50, 35, 8, 5, 1, 1]})\ndf = df.set_index('lab')\nthresh = 6\n# [Begin of Missing Code]\ndf.loc[df['value'] < thresh, 'lab'] = 'X'\ndf = df.groupby('lab').mean()\n# [End of Missing Code]\nprint(df)\n```",
        "```python\nimport pandas as pd\n\ndf = pd.DataFrame({'lab':['A', 'B', 'C', 'D', 'E', 'F'], 'value':[50, 35, 8, 5, 1, 1]})\ndf = df.set_index('lab')\nsection_left = 4\nsection_right = 38\n# [Begin of Missing Code]\nmask = (df['value'] < section_left) | (df['value'] > section_right)\ndf_filtered = df[mask]\ndf_mean = pd.DataFrame({'lab':['X'], 'value':[df[~mask]['value'].mean()]})\nresult = pd.concat([df_filtered, df_mean])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n# [Begin of Missing Code]\ninv_cols = df.columns.map(lambda x: f\"inv_{x}\")\ninv_df = pd.DataFrame(1/df.values, columns=inv_cols)\nresult = pd.concat([df, inv_df], axis=1)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n# [Begin of Missing Code]\nexp_df = np.exp(df)\nexp_df.columns = [\"exp_\" + col for col in df.columns]\nresult = pd.concat([df, exp_df], axis=1)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({\"A\": [1, 0, 3], \"B\": [4, 5, 6]})\n# [Begin of Missing Code]\ninv_cols = df.columns[:-1].tolist()\ninv_df = df[inv_cols].replace(0, 1).apply(lambda x: 1/x)\ninv_df.columns = [\"inv_\" + col for col in inv_cols]\nresult = pd.concat([df, inv_df], axis=1)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n# [Begin of Missing Code]\nsigmoid = lambda x: 1/(1+np.exp(-x))\nresult = df.assign(**{'sigmoid_'+col: sigmoid(df[col]) for col in df})\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\na = np.array([[ 1. ,  0.9,  1. ],\n              [ 0.9,  0.9,  1. ],\n              [ 0.8,  1. ,  0.5],\n              [ 1. ,  0.3,  0.2],\n              [ 1. ,  0.2,  0.1],\n              [ 0.9,  1. ,  1. ],\n              [ 1. ,  0.9,  1. ],\n              [ 0.6,  0.9,  0.7],\n              [ 1. ,  0.9,  0.8],\n              [ 1. ,  0.8,  0.9]])\nidx = pd.date_range('2017', periods=a.shape[0])\ndf = pd.DataFrame(a, index=idx, columns=list('abc'))\n# [Begin of Missing Code]\nmin_idx = df.idxmin()\nresult = df.apply(lambda x: x[:min_idx[x.name]].idxmax())\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\na = np.array([[ 1. ,  0.9,  1. ],\n              [ 0.9,  0.9,  1. ],\n              [ 0.8,  1. ,  0.5],\n              [ 1. ,  0.3,  0.2],\n              [ 1. ,  0.2,  0.1],\n              [ 0.9,  1. ,  1. ],\n              [ 1. ,  0.9,  1. ],\n              [ 0.6,  0.9,  0.7],\n              [ 1. ,  0.9,  0.8],\n              [ 1. ,  0.8,  0.9]])\n\n\nidx = pd.date_range('2017', periods=a.shape[0])\ndf = pd.DataFrame(a, index=idx, columns=list('abc'))\n# [Begin of Missing Code]\nmask = df.apply(lambda x: x == x.max()).cumsum() <= df.apply(lambda x: x == x.min()).cumsum()\nresult = df.where(mask).idxmax()\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\ndf = pd.DataFrame({'user': ['a','a','b','b'], 'dt': ['2016-01-01','2016-01-02', '2016-01-05','2016-01-06'], 'val': [1,33,2,1]})\ndf['dt'] = pd.to_datetime(df['dt'])\n# [Begin of Missing Code]\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\ndate_range = pd.date_range(min_date, max_date)\nusers = df['user'].unique()\nresult = pd.DataFrame({'dt': date_range})\nfor user in users:\n    user_df = df[df['user'] == user]\n    user_result = pd.merge(result, user_df, on='dt', how='left')\n    user_result['user'].fillna(user, inplace=True)\n    user_result['val'].fillna(0, inplace=True)\n    result = pd.concat([result, user_result])\nresult.reset_index(drop=True, inplace=True)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\ndf= pd.DataFrame({'user': ['abc','abc','efg','efg'], 'dt': ['2022-01-01','2022-01-02', '2022-01-05','2022-01-06'], 'val': [1,14,51,4]})\ndf['dt'] = pd.to_datetime(df['dt'])\n# [Begin of Missing Code]\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\ndate_range = pd.date_range(min_date, max_date)\nresult = pd.DataFrame({'dt': date_range})\nresult['user'] = df['user'].unique()[0]\nresult = pd.merge(result, df, on=['dt', 'user'], how='left').fillna(0)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf= pd.DataFrame({'user': ['a','a','b','b'], 'dt': ['2016-01-01','2016-01-02', '2016-01-05','2016-01-06'], 'val': [1,33,2,1]})\ndf['dt'] = pd.to_datetime(df['dt'])\n# [Begin of Missing Code]\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\ndate_range = pd.date_range(min_date, max_date)\nresult = pd.DataFrame({'dt': date_range})\nresult['user'] = df['user'].unique()[0]\nresult['val'] = 233\nresult = pd.concat([df, result], sort=False).reset_index(drop=True)\nresult = result.sort_values(['user', 'dt']).reset_index(drop=True)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\ndf= pd.DataFrame({'user': ['a','a','b','b'], 'dt': ['2016-01-01','2016-01-02', '2016-01-05','2016-01-06'], 'val': [1,33,2,1]})\ndf['dt'] = pd.to_datetime(df['dt'])\n# [Begin of Missing Code]\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\nusers = df['user'].unique()\nresult = pd.DataFrame({'dt': pd.date_range(min_date, max_date), 'user': users.repeat(max_date-min_date+1)})\nresult = result.merge(df, on=['dt', 'user'], how='left')\nresult['val'] = result.groupby('user')['val'].fillna(method='ffill')\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\ndf= pd.DataFrame({'user': ['a','a','b','b'], 'dt': ['2016-01-01','2016-01-02', '2016-01-05','2016-01-06'], 'val': [1,33,2,1]})\ndf['dt'] = pd.to_datetime(df['dt'])\n# [Begin of Missing Code]\nmin_date = df['dt'].min()\nmax_date = df['dt'].max()\nusers = df['user'].unique()\nresult = pd.DataFrame(columns=['dt', 'user', 'val'])\nfor user in users:\n    user_df = df[df['user'] == user].copy()\n    user_df.set_index('dt', inplace=True)\n    user_df = user_df.reindex(pd.date_range(min_date, max_date), method='ffill')\n    user_df.reset_index(inplace=True)\n    user_df['dt'] = user_df['dt'].dt.strftime('%d-%b-%Y')\n    result = pd.concat([result, user_df])\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'name': ['Aaron', 'Aaron', 'Aaron', 'Brave', 'Brave', 'David'],\n                   'a': [3, 3, 3, 4, 3, 5],\n                   'b': [5, 6, 6, 6, 6, 1],\n                   'c': [7, 9, 10, 0, 1, 4]})\n# [Begin of Missing Code]\ndf['name'] = pd.factorize(df['name'])[0] + 1\nresult = df\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'name': ['Aaron', 'Aaron', 'Aaron', 'Brave', 'Brave', 'David'],\n                   'a': [3, 3, 3, 4, 3, 5],\n                   'b': [5, 6, 6, 6, 6, 1],\n                   'c': [7, 9, 10, 0, 1, 4]})\n# [Begin of Missing Code]\ndf['a'] = pd.factorize(df['name'])[0] + 1\nresult = df\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\nexample_df = pd.DataFrame({'name': ['Aaron', 'Aaron', 'Aaron', 'Brave', 'Brave', 'David'],\n                   'a': [3, 3, 3, 4, 3, 5],\n                   'b': [5, 6, 6, 6, 6, 1],\n                   'c': [7, 9, 10, 0, 1, 4]})\ndef f(df=example_df):\n    # [Begin of Missing Code]\n    df['name'] = pd.factorize(df['name'])[0] + 1\n    result = df\n    # [End of Missing Code]\n    return result\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'name': ['Aaron', 'Aaron', 'Aaron', 'Brave', 'Brave', 'David'],\n                   'a': [3, 3, 3, 4, 3, 5],\n                   'b': [5, 6, 6, 6, 6, 1],\n                   'c': [7, 9, 10, 0, 1, 4]})\n# [Begin of Missing Code]\ndf['ID'] = df.groupby(['name', 'a']).ngroup() + 1\nresult = df[['ID', 'b', 'c']]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'user': ['u1', 'u2', 'u3'],\n                   '01/12/15': [100, 200, -50],\n                   '02/12/15': [300, -100, 200],\n                   'someBool': [True, False, True]})\n# [Begin of Missing Code]\nresult = pd.melt(df, id_vars=['user', 'someBool'], var_name='date', value_name='value')\n# [End of Missing Code]\nprint(result)\n```\n\n[Python Version]\nPython 3.9.7\n\n[Explanation]\nThe missing code uses the `pd.melt()` function to transform the table from wide format to long format. The `id_vars` parameter specifies the columns to keep as is, which are 'user' and 'someBool'. The `var_name` parameter specifies the name of the new column that will contain the original column names, which is 'date'. The `value_name` parameter specifies the name of the new column that will contain the original values, which is 'value'. The resulting table is assigned to the variable `result`. The `print()` function is used to output the resulting table.",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'user': ['u1', 'u2', 'u3'],\n                   '01/12/15': [100, 200, -50],\n                   '02/12/15': [300, -100, 200],\n                   'someBool': [True, False, True]})\n# [Begin of Missing Code]\nresult = pd.melt(df, id_vars=['user', '01/12/15'], var_name='others', value_name='value')\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'user': ['u1', 'u2', 'u3'],\n                   '01/12/15': [100, 200, None],\n                   '02/12/15': [None, -100, 200],\n                   'someBool': [True, False, True]})\n# [Begin of Missing Code]\ndf = df.melt(id_vars=['user', 'someBool'], var_name='date', value_name='value')\ndf = df.dropna()\n# [End of Missing Code]\nresult = df\nprint(result)\n```\n\nPython Version: 3.9.7\n\nYes, pivot_table in pandas can be helpful in this case. However, in this solution, we used the melt() function to unpivot the date columns and then dropped the rows with missing values. Finally, we renamed the columns to match the desired output.",
        "```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.rand(4,5), columns = list('abcde'))\ncolumns = ['b','e']\n# [Begin of Missing Code]\nresult = df.loc[df['c'] > 0.5, columns].values\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.rand(4,5), columns = list('abcde'))\ncolumns = ['a','b','e']\n# [Begin of Missing Code]\nresult = df.loc[df['c'] > 0.45, columns].values\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\ndef f(df, columns=['b', 'e']):\n    # [Begin of Missing Code]\n    result = df.loc[df['c'] > 0.5, columns].values\n    # [End of Missing Code]\n    return result\n```",
        "```python\nimport pandas as pd\ndef f(df, columns=['b', 'e']):\n    # [Begin of Missing Code]\n    result = df.loc[df['c'] > 0.5, columns].sum(axis=1)\n    # [End of Missing Code]\n    return result\n```",
        "```python\ndef f(df, columns=['b', 'e']):\n    # [Begin of Missing Code]\n    result = df.loc[df['c'] > 0.5, columns]\n    # [End of Missing Code]\n    return result\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nfrom datetime import datetime, timedelta\n\ndf = pd.DataFrame({'ID': [1, 2, 3, 4, 5, 6, 7],\n                   'date': ['09/15/07', '06/01/08', '10/25/08', '05/13/09', '11/07/09', '11/15/09', '07/03/11'],\n                   'close': [123.45, 130.13, 132.01, 118.34, 145.99, 146.73, 171.10]})\nX = 365\n\n# [Begin of Missing Code]\ndf['date'] = pd.to_datetime(df['date'], format='%m/%d/%y')\ndf = df.sort_values(by='date')\ndf = df.reset_index(drop=True)\n\nfiltered_dates = [df['date'][0]]\nfor i in range(1, len(df)):\n    if (df['date'][i] - filtered_dates[-1]).days > X:\n        filtered_dates.append(df['date'][i])\n\nresult = df[df['date'].isin(filtered_dates)]\n# [End of Missing Code]\n\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nfrom datetime import datetime, timedelta\n\n\ndf = pd.DataFrame({'ID': [1, 2, 3, 4, 5, 6, 7],\n                   'date': ['09/15/07', '06/01/08', '10/25/08', '05/13/09', '11/07/09', '11/15/09', '07/03/11'],\n                   'close': [123.45, 130.13, 132.01, 118.34, 145.99, 146.73, 171.10]})\nX = 52\n# [Begin of Missing Code]\ndf['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values(by='date')\ndf['diff'] = df['date'].diff()\ndf = df[df['diff'] > timedelta(weeks=X)]\nresult = df.drop(columns=['diff'])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nfrom datetime import datetime, timedelta\n\ndf = pd.DataFrame({'ID': [1, 2, 3, 4, 5, 6, 7, 8],\n                   'date': ['09/15/07', '06/01/08', '10/25/08', '1/14/9', '05/13/09', '11/07/09', '11/15/09', '07/03/11'],\n                   'close': [123.45, 130.13, 132.01, 118.34, 514.14, 145.99, 146.73, 171.10]})\nX = 17\n# [Begin of Missing Code]\ndf['date'] = pd.to_datetime(df['date'], format='%m/%d/%y')\ndf = df.sort_values(by='date')\ndf['date_diff'] = df['date'].diff()\ndf['date_diff'] = df['date_diff'].fillna(pd.Timedelta(seconds=0))\ndf['date_diff'] = df['date_diff'].apply(lambda x: x.days)\ndf = df[df['date_diff'] >= X*7]\ndf['date'] = df['date'].dt.strftime('%d-%b-%Y')\nresult = df[['ID', 'date', 'close']]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'col1':[2, 1, 3, 1, 0]})\n# [Begin of Missing Code]\nresult = df.groupby(df.index // 3).mean()\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'col1':[1, 1, 4, 5, 1]})\n# [Begin of Missing Code]\nresult = df.groupby(df.index // 3).sum()\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'col1':[1, 1, 4, 5, 1, 4]})\n# [Begin of Missing Code]\nresult = df.groupby(df.index // 4).sum()\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'col1':[2, 1, 3, 1, 0]})\n# [Begin of Missing Code]\nresult = df.iloc[::-1].rolling(3).mean().iloc[2::3][::-1]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'col1':[2, 1, 3, 1, 0, 2, 1, 3, 1]})\nresult = pd.DataFrame()\nfor i in range(0, len(df), 5):\n    if i+3 <= len(df):\n        result = result.append(pd.DataFrame({'col1': [df[i:i+3].sum().values[0]]}))\n    else:\n        result = result.append(pd.DataFrame({'col1': [df[i:].mean().values[0]]}))\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'col1':[2, 1, 3, 1, 0, 2, 1, 3, 1]})\n# [Begin of Missing Code]\nresult = pd.DataFrame()\nfor i in range(0, len(df), 3):\n    if i+3 <= len(df):\n        result = pd.concat([result, pd.DataFrame({'col1': [df.iloc[i:i+3]['col1'].sum()]})])\n    else:\n        result = pd.concat([result, pd.DataFrame({'col1': [df.iloc[i:]['col1'].mean()]})])\n    if i+2 <= len(df):\n        result = pd.concat([result, pd.DataFrame({'col1': [df.iloc[i:i+2]['col1'].mean()]})])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\nindex = range(14)\ndata = [1, 0, 0, 2, 0, 4, 6, 8, 0, 0, 0, 0, 2, 1]\ndf = pd.DataFrame(data=data, index=index, columns = ['A'])\n# [Begin of Missing Code]\ndf['A'] = df['A'].replace(0, method='ffill')\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\nindex = range(14)\ndata = [1, 0, 0, 2, 0, 4, 6, 8, 0, 0, 0, 0, 2, 1]\ndf = pd.DataFrame(data=data, index=index, columns = ['A'])\n# [Begin of Missing Code]\ndf['A'] = df['A'].replace(0, method='ffill')\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\nindex = range(14)\ndata = [1, 0, 0, 2, 0, 4, 6, 8, 0, 0, 0, 0, 2, 1]\ndf = pd.DataFrame(data=data, index=index, columns = ['A'])\n# [Begin of Missing Code]\ndf['A'] = df['A'].replace(0, pd.np.nan)\ndf['A'] = df['A'].fillna(method='ffill')\ndf['A'] = df['A'].fillna(method='bfill')\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'duration': ['7 year', '2day', '4 week', '8 month']},\n                  index=list(range(1,5)))\n# [Begin of Missing Code]\ndf['number'] = df.duration.str.extract(r'(\\d+)')\ndf['time'] = df.duration.str.extract(r'(\\D+)')\ntime_dict = {'year': 365, 'month': 30, 'week': 7, 'day': 1}\ndf['time_days'] = df['time'].map(time_dict)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'duration': ['year 7', 'day2', 'week 4', 'month 8']},\n                  index=list(range(1,5)))\n# [Begin of Missing Code]\ndf['time number'] = df['duration'].str.extract(r'(\\d+)')\ndf['time'] = df['duration'].str.extract(r'(\\D+)')\ndf['time_day'] = df['time'].replace({'year': 365, 'month': 30, 'week': 7, 'day': 1})\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\nexample_df = pd.DataFrame({'duration': ['7 year', '2day', '4 week', '8 month']},\n                  index=list(range(1,5)))\ndef f(df=example_df):\n    # [Begin of Missing Code]\n    df['number'] = df.duration.str.extract('(\\d+)')\n    df['time'] = df.duration.str.extract('(\\D+)')\n    time_dict = {'year': 365, 'month': 30, 'week': 7, 'day': 1}\n    df['time_days'] = df['time'].map(time_dict)\n    # [End of Missing Code]\n    return df\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'duration': ['year 7', 'day2', 'week 4', 'month 8']},\n                  index=list(range(1,5)))\n# [Begin of Missing Code]\ndf['number'] = df.duration.str.extract(r'(\\d+)')\ndf['time'] = df.duration.str.extract(r'(\\D+)')\ndf['time_day'] = df.time.replace({'year': 365, 'month': 30, 'week': 7, 'day': 1}) * df['number'].astype(int)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\ndf1 = pd.DataFrame({'A': [1, 1, 1],\n                   'B': [2, 2, 2],\n                   'C': [3, 3, 3],\n                   'D': [4, 4, 4],\n                   'E': [5, 5, 5],\n                   'F': [6, 6, 6],\n                   'Postset': ['yes', 'no', 'yes']})\ndf2 = pd.DataFrame({'A': [1, 1, 1],\n                   'B': [2, 2, 2],\n                   'C': [3, 3, 3],\n                   'D': [4, 4, 4],\n                   'E': [5, 5, 5],\n                   'F': [6, 4, 6],\n                   'Preset': ['yes', 'yes', 'yes']})\ncolumns_check_list = ['A','B','C','D','E','F']\n# [Begin of Missing Code]\nresult = np.where(np.logical_or.reduce([df1[column] != df2[column] for column in columns_check_list]))\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\ndf1 = pd.DataFrame({'A': [1, 1, 1],\n                   'B': [2, 2, 2],\n                   'C': [3, 3, 3],\n                   'D': [4, 4, 4],\n                   'E': [5, 5, 5],\n                   'F': [6, 6, 6],\n                   'Postset': ['yes', 'no', 'yes']})\n\n\ndf2 = pd.DataFrame({'A': [1, 1, 1],\n                   'B': [2, 2, 2],\n                   'C': [3, 3, 3],\n                   'D': [4, 4, 4],\n                   'E': [5, 5, 5],\n                   'F': [6, 4, 6],\n                   'Preset': ['yes', 'yes', 'yes']})\n\n\ncolumns_check_list = ['A','B','C','D','E','F']\n# [Begin of Missing Code]\ncheck = np.where(np.all([df1[column] == df2[column] for column in columns_check_list]))\nresult = check[0].tolist()\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\nindex = pd.MultiIndex.from_tuples([('abc', '3/1/1994'), ('abc', '9/1/1994'), ('abc', '3/1/1995')],\n                                 names=('id', 'date'))\ndf = pd.DataFrame({'x': [100, 90, 80], 'y':[7, 8, 9]}, index=index)\n# [Begin of Missing Code]\ndf.index = df.index.set_levels(pd.to_datetime(df.index.levels[1]), level=1)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\nindex = pd.MultiIndex.from_tuples([('abc', '3/1/1994'), ('abc', '9/1/1994'), ('abc', '3/1/1995')],\n                                 names=('name', 'datetime'))\ndf = pd.DataFrame({'fee': [100, 90, 80], 'credits':[7, 8, 9]}, index=index)\n# [Begin of Missing Code]\ndf.index = df.index.set_levels(pd.to_datetime(df.index.levels[1]), level=1)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\ndef f(df):\n    # [Begin of Missing Code]\n    df.reset_index(inplace=True)\n    df['date'] = pd.to_datetime(df['date'])\n    output = df.values\n    # [End of Missing Code]\n    return output\n```",
        "[Solution Code]\n```python\nimport pandas as pd\ndef f(df):\n    # [Begin of Missing Code]\n    df.index = pd.to_datetime(df.index.get_level_values(0)) # parse date index\n    df.index = df.index.swaplevel() # swap the two levels\n    # [End of Missing Code]\n    return df\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Country': ['Argentina', 'Argentina', 'Brazil', 'Brazil'],\n                   'Variable': ['var1', 'var2', 'var1', 'var2'],\n                   '2000': [12, 1, 20, 0],\n                   '2001': [15, 3, 23, 1],\n                   '2002': [18, 2, 25, 2],\n                   '2003': [17, 5, 29, 2],\n                   '2004': [23, 7, 31, 3],\n                   '2005': [29, 5, 32, 3]})\n# [Begin of Missing Code]\ndf = pd.melt(df, id_vars=['Country', 'Variable'], var_name='year', value_name='value')\ndf = df.pivot_table(index=['Variable', 'Country', 'year'], columns='Variable', values='value').reset_index()\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Country': ['Argentina', 'Argentina', 'Brazil', 'Brazil'],\n                   'Variable': ['var1', 'var2', 'var1', 'var2'],\n                   '2000': [12, 1, 20, 0],\n                   '2001': [15, 3, 23, 1],\n                   '2002': [18, 2, 25, 2],\n                   '2003': [17, 5, 29, 2],\n                   '2004': [23, 7, 31, 3],\n                   '2005': [29, 5, 32, 3]})\n# [Begin of Missing Code]\ndf = pd.melt(df, id_vars=['Country', 'Variable'], var_name='year', value_name='value')\ndf['year'] = df['year'].astype(int)\ndf = df.sort_values(by=['Country', 'Variable', 'year'], ascending=[True, True, False])\ndf = df.pivot(index=['Variable', 'Country', 'year'], columns='Variable', values='value').reset_index()\ndf = df[['Variable', 'Country', 'year', 'var1', 'var2']]\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'A_Name': ['AA', 'BB', 'CC', 'DD', 'EE', 'FF', 'GG'],\n                   'B_Detail': ['X1', 'Y1', 'Z1', 'L1', 'M1', 'N1', 'K1'],\n                   'Value_B': [1.2, 0.76, 0.7, 0.9, 1.3, 0.7, -2.4],\n                   'Value_C': [0.5, -0.7, -1.3, -0.5, 1.8, -0.8, -1.9],\n                   'Value_D': [-1.3, 0.8, 2.5, 0.4, -1.3, 0.9, 2.1]})\n# [Begin of Missing Code]\nresult = df[(abs(df.filter(like='Value')) < 1).all(axis=1)]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'A_Name': ['AA', 'BB', 'CC', 'DD', 'EE', 'FF', 'GG'],\n                   'B_Detail': ['X1', 'Y1', 'Z1', 'L1', 'M1', 'N1', 'K1'],\n                   'Value_B': [1.2, 0.76, 0.7, 0.9, 1.3, 0.7, -2.4],\n                   'Value_C': [0.5, -0.7, -1.3, -0.5, 1.8, -0.8, -1.9],\n                   'Value_D': [-1.3, 0.8, 2.5, 0.4, -1.3, 0.9, 2.1]})\n# [Begin of Missing Code]\nresult = df.loc[(abs(df.filter(like='Value')) > 1).any(axis=1)]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'A_Name': ['AA', 'BB', 'CC', 'DD', 'EE', 'FF', 'GG'],\n                   'B_Detail': ['X1', 'Y1', 'Z1', 'L1', 'M1', 'N1', 'K1'],\n                   'Value_B': [1.2, 0.76, 0.7, 0.9, 1.3, 0.7, -2.4],\n                   'Value_C': [0.5, -0.7, -1.3, -0.5, 1.8, -0.8, -1.9],\n                   'Value_D': [-1.3, 0.8, 2.5, 0.4, -1.3, 0.9, 2.1]})\n# [Begin of Missing Code]\ncols = [col for col in df.columns if col.startswith('Value')]\ndf = df[abs(df[cols]) > 1].dropna()\ndf.columns = [col.replace('Value_', '') for col in df.columns]\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'A': ['Good &AMP; bad', 'BB', 'CC', 'DD', 'Good &AMP; bad'], 'B': range(5), 'C': ['Good &AMP; bad'] * 5})\n# [Begin of Missing Code]\ndf = df.replace('&AMP;', '&', regex=True)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'A': ['Good &LT bad', 'BB', 'CC', 'DD', 'Good &LT; bad'], 'B': range(5), 'C': ['Good &LT; bad'] * 5})\n# [Begin of Missing Code]\ndf = df.replace('&LT', '<', regex=True)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\nexample_df = pd.DataFrame({'A': ['Good &AMP; bad', 'BB', 'CC', 'DD', 'Good &AMP; bad'], 'B': range(5), 'C': ['Good &AMP; bad'] * 5})\ndef f(df=example_df):\n    # [Begin of Missing Code]\n    df = df.replace('&AMP;', '&', regex=True)\n    result = df\n    # [End of Missing Code]\n    return result\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'A': ['Good &AMP; bad', 'BB', 'CC', 'DD', 'Good &LT; bad'], 'B': range(5), 'C': ['Good &GT; bad'] * 5})\n# [Begin of Missing Code]\ndf = df.replace({'&AMP;': '&', '&LT;': '<', '&GT;': '>'}, regex=True)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'A': ['1 &AMP; 1', 'BB', 'CC', 'DD', '1 &AMP; 0'], 'B': range(5), 'C': ['0 &AMP; 0'] * 5})\n# [Begin of Missing Code]\ndf = df.replace('&AMP;', '&', regex=True)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport re\n\n\ndef validate_single_space_name(name: str) -> str:\n    pattern = re.compile(r'^.*( ){1}.*$')\n    match_obj = re.match(pattern, name)\n    if match_obj:\n        return name\n    else:\n        return None\n\n\ndf = pd.DataFrame({'name':['Jack Fine','Kim Q. Danger','Jane Smith', 'Zhongli']})\ndf['first_name'] = df['name'].apply(lambda x: x.split()[0] if len(x.split()) == 2 else x)\ndf['last_name'] = df['name'].apply(lambda x: x.split()[1] if len(x.split()) == 2 else None)\ndf = df.drop(columns=['name'])\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport re\n\ndf = pd.DataFrame({'name':['Jack Fine','Kim Q. Danger','Jane Smith', 'Zhongli']})\n\ndef validate_single_space_name(name: str) -> str:\n    pattern = re.compile(r'^.*( ){1}.*$')\n    match_obj = re.match(pattern, name)\n    if match_obj:\n        return name\n    else:\n        return None\n\ndf['1_name'] = df['name'].apply(validate_single_space_name)\ndf['2_name'] = df['name'].str.split(' ').str[1]\ndf['1_name'] = df['1_name'].str.split(' ').str[0]\ndf = df[['1_name', '2_name']]\nresult = df\nprint(result)\n```\n\nNote: The solution code assumes that if a name cannot be split into first and last name, it will be put in the 1_name column.",
        "[Solution Code]\n```python\nimport pandas as pd\nimport re\n\ndf = pd.DataFrame({'name':['Jack Fine','Kim Q. Danger','Jane 114 514 Smith', 'Zhongli']})\n# [Begin of Missing Code]\ndef split_name(name):\n    if name.count(' ') > 1:\n        name_parts = name.split(' ')\n        first_name = name_parts[0]\n        middle_name = ' '.join(name_parts[1:-1])\n        last_name = name_parts[-1]\n        return pd.Series([first_name, middle_name, last_name])\n    else:\n        return pd.Series([name, None, None])\n\ndf[['first name', 'middle_name', 'last_name']] = df['name'].apply(split_name)\ndf.drop('name', axis=1, inplace=True)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nresult = pd.merge_asof(df2, df1, on='Timestamp', direction='backward')\nresult = result.drop_duplicates(subset='Timestamp', keep='last')\nresult = result[['Timestamp', 'stuff', 'data']]\n```",
        "```python\nresult = pd.merge_asof(df1, df2, on='Timestamp', direction='nearest')\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'datetime': ['2021-04-10 01:00:00', '2021-04-10 02:00:00', '2021-04-10 03:00:00', '2021-04-10 04:00:00', '2021-04-10 05:00:00'],\n                   'col1': [25, 25, 25, 50, 100],\n                   'col2': [50, 50, 100, 50, 100],\n                   'col3': [50, 50, 50, 100, 100]})\ndf['datetime'] = pd.to_datetime(df['datetime'])\n# [Begin of Missing Code]\ndf['state'] = df.apply(lambda row: row['col1'] if row['col2'] <= 50 and row['col3'] <= 50 else max(row['col1'], row['col2'], row['col3']), axis=1)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'datetime': ['2021-04-10 01:00:00', '2021-04-10 02:00:00', '2021-04-10 03:00:00', '2021-04-10 04:00:00', '2021-04-10 05:00:00'],\n                   'col1': [25, 25, 25, 50, 100],\n                   'col2': [50, 50, 100, 50, 100],\n                   'col3': [50, 50, 50, 100, 100]})\n\n\ndf['datetime'] = pd.to_datetime(df['datetime'])\n# [Begin of Missing Code]\ndf['state'] = df.apply(lambda row: row['col1'] if row['col2'] > 50 and row['col3'] > 50 else row['col1'] + row['col2'] + row['col3'], axis=1)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({\"ID\": [1,2,3,4,5], \"Field1\": [1.15,2,1,25,\"and\"]})\n# [Begin of Missing Code]\nerror_list = []\nfor index, row in df.iterrows():\n    if not isinstance(row[\"Field1\"], int):\n        error_list.append(row[\"Field1\"])\n# [End of Missing Code]\nresult = error_list\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({\"ID\": [1,2,3,4,5], \"Field1\": [1.15,2,1,25,\"and\"]})\n# [Begin of Missing Code]\ninteger_list = []\nfor index, row in df.iterrows():\n    if isinstance(row['Field1'], int):\n        continue\n    elif str(row['Field1']).isnumeric():\n        integer_list.append(int(row['Field1']))\n# [End of Missing Code]\nresult = integer_list\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\nexample_df = pd.DataFrame({\"ID\": [1,2,3,4,5], \"Field1\": [1.15,2,1,25,\"and\"]})\ndef f(df=example_df):\n    # [Begin of Missing Code]\n    result = []\n    for index, row in df.iterrows():\n        if not isinstance(row[\"Field1\"], int):\n            result.append(row[\"Field1\"])\n    # [End of Missing Code]\n    return result\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'cat': ['A', 'B', 'C'],\n                   'val1': [7, 10, 5],\n                   'val2': [10, 2, 15],\n                   'val3': [0, 1, 6],\n                   'val4': [19, 14, 16]})\n# [Begin of Missing Code]\nresult = df.set_index('cat')\nresult = result.div(result.sum(axis=1), axis=0)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'cat': ['A', 'B', 'C'],\n                   'val1': [7, 10, 5],\n                   'val2': [10, 2, 15],\n                   'val3': [0, 1, 6],\n                   'val4': [19, 14, 16]})\n# [Begin of Missing Code]\ndf.set_index('cat', inplace=True)\nresult = df.div(df.sum(axis=0), axis=1)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport io\n\ndata = io.StringIO(\"\"\"\nrs  alleles  chrom  pos strand  assembly#  center  protLSID  assayLSID\nTP3      A/C      0    3      +        NaN     NaN       NaN        NaN\nTP7      A/T      0    7      +        NaN     NaN       NaN        NaN\nTP12     T/A      0   12      +        NaN     NaN       NaN        NaN\nTP15     C/A      0   15      +        NaN     NaN       NaN        NaN\nTP18     C/T      0   18      +        NaN     NaN       NaN        NaN\n\"\"\")\ndf = pd.read_csv(data, delim_whitespace=True).set_index('rs')\ntest = ['TP3', 'TP7', 'TP18']\n# [Begin of Missing Code]\nresult = df.loc[test]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport io\n\ndata = io.StringIO(\"\"\"\nrs    alias  chrome  poston\nTP3      A/C      0    3\nTP7      A/T      0    7\nTP12     T/A      0   12\nTP15     C/A      0   15\nTP18     C/T      0   18\n\"\"\")\ndf = pd.read_csv(data, delim_whitespace=True).set_index('rs')\ntest = ['TP3', 'TP18']\n# [Begin of Missing Code]\nresult = df.loc[test]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport io\n\ndata = io.StringIO(\"\"\"\nrs  alleles  chrom  pos strand  assembly#  center  protLSID  assayLSID\nTP3      A/C      0    3      +        NaN     NaN       NaN        NaN\nTP7      A/T      0    7      +        NaN     NaN       NaN        NaN\nTP12     T/A      0   12      +        NaN     NaN       NaN        NaN\nTP15     C/A      0   15      +        NaN     NaN       NaN        NaN\nTP18     C/T      0   18      +        NaN     NaN       NaN        NaN\n\"\"\")\ndf = pd.read_csv(data, delim_whitespace=True).set_index('rs')\ntest = ['TP3', 'TP7', 'TP18']\n# [Begin of Missing Code]\nresult = df.drop(test)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\ndef f(df, test):\n    # [Begin of Missing Code]\n    result = df.loc[test].drop_duplicates()\n    # [End of Missing Code]\n    return result\n```",
        "```python\nimport pandas as pd\nfrom scipy.spatial.distance import cdist\n\n\ntime = [0, 0, 0, 1, 1, 2, 2]\nx = [216, 218, 217, 280, 290, 130, 132]\ny = [13, 12, 12, 110, 109, 3, 56]\ncar = [1, 2, 3, 1, 3, 4, 5]\ndf = pd.DataFrame({'time': time, 'x': x, 'y': y, 'car': car})\n\n# Begin of Missing Code\ndef get_nearest_neighbour(df):\n    dist_matrix = cdist(df[['x', 'y']], df[['x', 'y']])\n    np.fill_diagonal(dist_matrix, np.inf)\n    nearest_neighbour = dist_matrix.argmin(axis=1)\n    euclidean_distance = dist_matrix.min(axis=1)\n    return pd.DataFrame({'nearest_neighbour': df.iloc[nearest_neighbour]['car'].values, 'euclidean_distance': euclidean_distance})\n\nresult = df.groupby('time').apply(get_nearest_neighbour).reset_index()\nresult = pd.concat([result.drop(['level_1'], axis=1), result['level_1'].apply(pd.Series)], axis=1).drop(['nearest_neighbour'], axis=1)\n# End of Missing Code\n\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\ntime = [0, 0, 0, 1, 1, 2, 2]\nx = [216, 218, 217, 280, 290, 130, 132]\ny = [13, 12, 12, 110, 109, 3, 56]\ncar = [1, 2, 3, 1, 3, 4, 5]\ndf = pd.DataFrame({'time': time, 'x': x, 'y': y, 'car': car})\n\n# Begin of Missing Code\ndef get_farmost_neighbour(df):\n    distances = np.sqrt((df['x'] - df['x'].values[:, np.newaxis])**2 + (df['y'] - df['y'].values[:, np.newaxis])**2)\n    np.fill_diagonal(distances, np.inf)\n    farmost_neighbour = distances.argmin(axis=1)\n    euclidean_distance = distances.min(axis=1)\n    return pd.DataFrame({'farmost_neighbour': farmost_neighbour, 'euclidean_distance': euclidean_distance})\n\nresult = df.groupby('time').apply(get_farmost_neighbour).reset_index()\nresult = result[['time', 'car', 'farmost_neighbour', 'euclidean_distance']]\n# End of Missing Code\n\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\ndf = pd.DataFrame({'keywords_0':[\"a\", np.nan, \"c\"], \n                'keywords_1':[\"d\", \"e\", np.nan],\n                'keywords_2':[np.nan, np.nan, \"b\"],\n                'keywords_3':[\"f\", np.nan, \"g\"]})\n# [Begin of Missing Code]\ncols = [\"keywords_0\", \"keywords_1\", \"keywords_2\", \"keywords_3\"]\ndf[\"keywords_all\"] = df[cols].apply(lambda x: \",\".join(x.dropna()), axis=1)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\ndf = pd.DataFrame({'keywords_0':[\"a\", np.nan, \"c\"], \n                'keywords_1':[\"d\", \"e\", np.nan],\n                'keywords_2':[np.nan, np.nan, \"b\"],\n                'keywords_3':[\"f\", np.nan, \"g\"]})\n# [Begin of Missing Code]\ncols = ['keywords_0', 'keywords_1', 'keywords_2', 'keywords_3']\ndf[\"keywords_all\"] = df[cols].apply(lambda x: \"-\".join(x.dropna().astype(str)), axis=1)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\ndf = pd.DataFrame({'users': ['Hu Tao', 'Zhongli', 'Xingqiu'],\n                   'keywords_0': [\"a\", np.nan, \"c\"],\n                   'keywords_1': [\"d\", \"e\", np.nan],\n                   'keywords_2': [np.nan, np.nan, \"b\"],\n                   'keywords_3': [\"f\", np.nan, \"g\"]})\n# [Begin of Missing Code]\ncols = ['keywords_0', 'keywords_1', 'keywords_2', 'keywords_3']\ndf[\"keywords_all\"] = df[cols].apply(lambda x: \"-\".join(x.dropna().astype(str)), axis=1)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\ndf = pd.DataFrame({'users': ['Hu Tao', 'Zhongli', 'Xingqiu'],\n                   'keywords_0': [\"a\", np.nan, \"c\"],\n                   'keywords_1': [\"d\", \"e\", np.nan],\n                   'keywords_2': [np.nan, np.nan, \"b\"],\n                   'keywords_3': [\"f\", np.nan, \"g\"]})\n# [Begin of Missing Code]\ncols = ['keywords_0', 'keywords_1', 'keywords_2', 'keywords_3']\ndf[\"keywords_all\"] = df[cols].apply(lambda x: \"-\".join(x.dropna().tolist()), axis=1)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'UserId': [1, 1, 1, 2, 3, 3],\n                   'ProductId': [1, 4, 7, 4, 2, 1],\n                   'Quantity': [6, 1, 3, 2, 7, 2]})\n# [Begin of Missing Code]\nrows_to_change = df.sample(frac=0.2, random_state=0)\nrows_to_change['Quantity'] = 0\nresult = pd.concat([df.drop(rows_to_change.index), rows_to_change])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'UserId': [1, 1, 1, 2, 3, 3],\n                   'ProductId': [1, 4, 7, 4, 2, 1],\n                   'Quantity': [6, 1, 3, 2, 7, 2]})\n# [Begin of Missing Code]\nn = int(len(df)*0.2)\nrandom_sample = df.sample(n=n, random_state=0)\nrandom_sample['ProductId'] = 0\nresult = pd.concat([df.drop(random_sample.index), random_sample])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'UserId': [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3],\n                   'ProductId': [1, 4, 7, 4, 2, 1, 1, 4, 7, 4, 2, 1, 1, 4, 7],\n                   'Quantity': [6, 1, 3, 2, 7, 2, 6, 1, 3, 2, 7, 2, 6, 1, 3]})\n# [Begin of Missing Code]\nresult = df.groupby('UserId').apply(lambda x: x.sample(frac=0.2, random_state=0))\nresult['Quantity'] = 0\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf=pd.DataFrame(data=[[1,2],[3,4],[1,2],[1,4],[1,2]],columns=['col1','col2'])\n# [Begin of Missing Code]\nduplicate_bool = df.duplicated(subset=['col1','col2'], keep='first')\nduplicate = df.loc[duplicate_bool == True]\nduplicate['index_original'] = duplicate_bool[duplicate_bool == True].index\nresult = duplicate[['col1', 'col2', 'index_original']]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf=pd.DataFrame(data=[[1,2],[3,4],[1,2],[1,4],[1,2]],columns=['col1','col2'])\n# [Begin of Missing Code]\nduplicate_bool = df.duplicated(subset=['col1','col2'], keep='last')\nduplicate = df.loc[duplicate_bool == True]\nlast_duplicate_index = df.loc[duplicate_bool == True, 'col1'].index.tolist()\nresult = pd.concat([duplicate.reset_index(drop=True), pd.DataFrame({'index_original': last_duplicate_index})], axis=1)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\nexample_df=pd.DataFrame(data=[[1,2],[3,4],[1,2],[1,4],[1,2]],columns=['col1','col2'])\ndef f(df=example_df):\n    # [Begin of Missing Code]\n    duplicate_bool = df.duplicated(subset=['col1','col2'], keep='first')\n    duplicate = df.loc[duplicate_bool == True]\n    index_original = df[duplicate_bool].index.tolist()\n    duplicate['index_original'] = index_original\n    result = duplicate\n    # [End of Missing Code]\n    return result\n```",
        "```python\nimport pandas as pd\n\n\ndf=pd.DataFrame(data=[[1,1,2,5],[1,3,4,1],[4,1,2,5],[5,1,4,9],[1,1,2,5]],columns=['val', 'col1','col2','3col'])\n# [Begin of Missing Code]\nduplicate_bool = df.duplicated(subset=['col1','col2', '3col'], keep='first')\nduplicate = df.loc[duplicate_bool == True]\nduplicate['index_original'] = duplicate_bool[duplicate_bool == True].index\nresult = duplicate\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf=pd.DataFrame(data=[[1,1,2,5],[1,3,4,1],[4,1,2,5],[5,1,4,9],[1,1,2,5]],columns=['val', 'col1','col2','3col'])\n# [Begin of Missing Code]\nduplicate_bool = df.duplicated(subset=['col1','col2'], keep='last')\nduplicate = df.loc[duplicate_bool == True]\nduplicate['index_original'] = duplicate.index.tolist()\nresult = duplicate\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Sp': ['MM1', 'MM1', 'MM1', 'MM2', 'MM2', 'MM2', 'MM4', 'MM4', 'MM4'],\n                   'Mt': ['S1', 'S1', 'S3', 'S3', 'S4', 'S4', 'S2', 'S2', 'S2'],\n                   'Value': ['a', 'n', 'cb', 'mk', 'bg', 'dgd', 'rd', 'cb', 'uyi'],\n                   'count': [3, 2, 5, 8, 10, 1, 2, 2, 7]})\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmax()]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Sp':['MM2','MM2','MM4','MM4','MM4'],\n                   'Mt':['S4','S4','S2','S2','S2'],\n                   'Value':['bg','dgd','rd','cb','uyi'],\n                   'count':[10,1,2,8,8]})\n# [Begin of Missing Code]\nresult = df.loc[df.groupby(['Sp','Mt'])['count'].idxmax()]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Sp': ['MM1', 'MM1', 'MM1', 'MM2', 'MM2', 'MM2', 'MM4', 'MM4', 'MM4'],\n                   'Mt': ['S1', 'S1', 'S3', 'S3', 'S4', 'S4', 'S2', 'S2', 'S2'],\n                   'Value': ['a', 'n', 'cb', 'mk', 'bg', 'dgd', 'rd', 'cb', 'uyi'],\n                   'count': [3, 2, 5, 8, 10, 1, 2, 2, 7]})\n# [Begin of Missing Code]\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmin()]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Sp':['MM1','MM1','MM1','MM2','MM2','MM2','MM4','MM4','MM4'],\n                   'Value':['S1','S1','S3','S3','S4','S4','S2','S2','S2'],\n                   'Mt':['a','n','cb','mk','bg','dgd','rd','cb','uyi'],\n                   'count':[3,2,5,8,10,1,2,2,7]})\n# [Begin of Missing Code]\nresult = df.loc[df.groupby(['Sp','Value'])['count'].idxmax()]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf=pd.DataFrame({\"Category\":['Foo','Bar','Cho','Foo'],'Index':[1,2,3,4]})\nfilter_list=['Foo','Bar']\n# [Begin of Missing Code]\nresult = df.query(\"Category in @filter_list\")\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf=pd.DataFrame({\"Category\":['Foo','Bar','Cho','Foo'],'Index':[1,2,3,4]})\nfilter_list=['Foo','Bar']\n# [Begin of Missing Code]\nresult = df.query(\"Category not in @filter_list\")\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'col1': {0: 'a', 1: 'b', 2: 'c'},\n                   'col2': {0: 1, 1: 3, 2: 5},\n                   'col3': {0: 2, 1: 4, 2: 6},\n                   'col4': {0: 3, 1: 6, 2: 2},\n                   'col5': {0: 7, 1: 2, 2: 3},\n                   'col6': {0: 2, 1: 9, 2: 5},\n                  })\ndf.columns = [list('AAAAAA'), list('BBCCDD'), list('EFGHIJ')]\n# [Begin of Missing Code]\nvalue_vars = [tuple(df.columns.levels[i][j] for i in range(df.columns.nlevels)) for j in range(df.columns.nunique())]\nresult = pd.melt(df, value_vars=value_vars)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'col1': {0: 'a', 1: 'b', 2: 'c'},\n                   'col2': {0: 1, 1: 3, 2: 5},\n                   'col3': {0: 2, 1: 4, 2: 6},\n                   'col4': {0: 3, 1: 6, 2: 2},\n                   'col5': {0: 7, 1: 2, 2: 3},\n                   'col6': {0: 2, 1: 9, 2: 5},\n                  })\ndf.columns = [list('AAAAAA'), list('BBCCDD'), list('EFGHIJ')]\n# [Begin of Missing Code]\nid_vars = df.columns.levels[0]\nvalue_vars = [tuple(df.columns.levels[i+1]) for i in range(len(df.columns.levels)-1)]\nresult = pd.melt(df, id_vars=id_vars, value_vars=value_vars)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\ndf = pd.DataFrame.from_dict({'id': ['A', 'B', 'A', 'C', 'D', 'B', 'C'],\n                             'val': [1,2,-3,1,5,6,-2],\n                             'stuff':['12','23232','13','1234','3235','3236','732323']})\n# [Begin of Missing Code]\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n# [End of Missing Code]\nprint(df)\nresult = df\n```",
        "```python\nimport pandas as pd\n\ndf = pd.DataFrame.from_dict({'id': ['A', 'B', 'A', 'C', 'D', 'B', 'C'],\n                             'val': [1,2,-3,1,5,6,-2],\n                             'stuff':['12','23232','13','1234','3235','3236','732323']})\n# [Begin of Missing Code]\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n# [End of Missing Code]\nprint(df)\nresult = df\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\ndf = pd.DataFrame.from_dict({'id': ['A', 'B', 'A', 'C', 'D', 'B', 'C'],\n                             'val': [1,2,-3,1,5,6,-2],\n                             'stuff':['12','23232','13','1234','3235','3236','732323']})\n# [Begin of Missing Code]\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\n# [End of Missing Code]\nprint(df)\nresult = df\n```",
        "```python\nimport pandas as pd\n\ndf = pd.DataFrame.from_dict({'id': ['A', 'B', 'A', 'C', 'D', 'B', 'C'],\n                             'val': [1,2,-3,1,5,6,-2],\n                             'stuff':['12','23232','13','1234','3235','3236','732323']})\n# [Begin of Missing Code]\ndf['cummax'] = df.groupby('id')['val'].cummax()\n# [End of Missing Code]\nprint(df)\nresult = df\n```",
        "```python\nimport pandas as pd\n\ndf = pd.DataFrame.from_dict({'id': ['A', 'B', 'A', 'C', 'D', 'B', 'C'],\n                             'val': [1,2,-3,1,5,6,-2],\n                             'stuff':['12','23232','13','1234','3235','3236','732323']})\n# [Begin of Missing Code]\ndf['cumsum'] = df.groupby('id')['val'].cumsum()\ndf.loc[df['cumsum'] < 0, 'cumsum'] = 0\n# [End of Missing Code]\nprint(df)\nresult = df\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\nd = {'l':  ['left', 'right', 'left', 'right', 'left', 'right'],\n     'r': ['right', 'left', 'right', 'left', 'right', 'left'],\n     'v': [-1, 1, -1, 1, -1, np.nan]}\ndf = pd.DataFrame(d)\n# [Begin of Missing Code]\nresult = df.groupby('l')['v'].sum(skipna=False)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\nd = {'l':  ['left', 'right', 'left', 'right', 'left', 'right'],\n     'r': ['right', 'left', 'right', 'left', 'right', 'left'],\n     'v': [-1, 1, -1, 1, -1, np.nan]}\ndf = pd.DataFrame(d)\n# [Begin of Missing Code]\nresult = df.groupby('r')['v'].sum(skipna=False)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\nd = {'l':  ['left', 'right', 'left', 'right', 'left', 'right'],\n     'r': ['right', 'left', 'right', 'left', 'right', 'left'],\n     'v': [-1, 1, -1, 1, -1, np.nan]}\ndf = pd.DataFrame(d)\n# [Begin of Missing Code]\nresult = df.groupby('l')['v'].sum()\nresult[result.isna()] = np.nan\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({\n    'Column1': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Column2': [4, 3, 6, 8, 3, 4, 1, 4, 3],\n    'Column3': [7, 3, 3, 1, 2, 2, 3, 2, 7],\n    'Column4': [9, 8, 7, 6, 5, 4, 3, 2, 1],\n    'Column5': [1, 1, 1, 1, 1, 1, 1, 1, 1]})\n# [Begin of Missing Code]\nresult = []\nfor col1 in df.columns:\n    for col2 in df.columns:\n        if col1 != col2:\n            if df[col1].nunique() == df[col2].nunique() == len(df):\n                result.append(f\"{col1} {col2} one-to-one\")\n            elif df[col1].nunique() == len(df) and df[col2].nunique() < len(df):\n                result.append(f\"{col1} {col2} one-to-many\")\n            elif df[col2].nunique() == len(df) and df[col1].nunique() < len(df):\n                result.append(f\"{col1} {col2} many-to-one\")\n            else:\n                result.append(f\"{col1} {col2} many-to-many\")\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({\n    'Column1': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Column2': [4, 3, 6, 8, 3, 4, 1, 4, 3],\n    'Column3': [7, 3, 3, 1, 2, 2, 3, 2, 7],\n    'Column4': [9, 8, 7, 6, 5, 4, 3, 2, 1],\n    'Column5': [1, 1, 1, 1, 1, 1, 1, 1, 1]})\n# [Begin of Missing Code]\nresult = []\nfor col1 in df.columns:\n    for col2 in df.columns:\n        if col1 != col2:\n            if df[col1].nunique() == df[col2].nunique() == len(df):\n                result.append(f\"{col1} {col2} one-2-one\")\n            elif df[col1].nunique() == len(df) and df[col2].nunique() < len(df):\n                result.append(f\"{col1} {col2} one-2-many\")\n            elif df[col1].nunique() < len(df) and df[col2].nunique() == len(df):\n                result.append(f\"{col1} {col2} many-2-one\")\n            else:\n                result.append(f\"{col1} {col2} many-2-many\")\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({\n    'Column1': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Column2': [4, 3, 6, 8, 3, 4, 1, 4, 3],\n    'Column3': [7, 3, 3, 1, 2, 2, 3, 2, 7],\n    'Column4': [9, 8, 7, 6, 5, 4, 3, 2, 1],\n    'Column5': [1, 1, 1, 1, 1, 1, 1, 1, 1]})\n# [Begin of Missing Code]\nresult = df.corr(method='pearson').applymap(lambda x: 'many-to-many' if x > 0.8 else ('one-to-one' if x == 1 else ('many-to-one' if x > 0.0 else None)))\nresult = result.where(pd.notnull(result), 'one-to-many')\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({\n    'Column1': [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    'Column2': [4, 3, 6, 8, 3, 4, 1, 4, 3],\n    'Column3': [7, 3, 3, 1, 2, 2, 3, 2, 7],\n    'Column4': [9, 8, 7, 6, 5, 4, 3, 2, 1],\n    'Column5': [1, 1, 1, 1, 1, 1, 1, 1, 1]})\n# [Begin of Missing Code]\nresult = df.corr(method='pearson').applymap(lambda x: 'many-2-many' if x > 0.7 else ('one-2-one' if x == 1 else ('many-2-one' if x > 0.0 else 'NaN')))\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\ndf = pd.DataFrame({'firstname':['foo Bar','Bar Bar','Foo Bar','jim','john','mary','jim'],\n                   'lastname':['Foo Bar','Bar','Foo Bar','ryan','con','sullivan','Ryan'],\n                   'email':['Foo bar','Bar','Foo Bar','jim@com','john@com','mary@com','Jim@com'],\n                   'bank':[np.nan,'abc','xyz',np.nan,'tge','vbc','dfg']})\n\n# [Begin of Missing Code]\n# drop duplicates based on firstname, lastname, email and keep the one with bank account\ndf = df.drop_duplicates(subset=['firstname', 'lastname', 'email'], keep='last', ignore_index=True)\n# drop rows with no bank account\ndf = df.dropna(subset=['bank'], axis=0, how='all', thresh=None, subset=None, inplace=False)\nresult = df\n# [End of Missing Code]\n\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ns = pd.Series(['2,144.78', '2,036.62', '1,916.60', '1,809.40', '1,711.97', '6,667.22', '5,373.59', '4,071.00', '3,050.20', '-0.06', '-1.88', '', '-0.13', '', '-0.14', '0.07', '0', '0'],\n              index=['2016-10-31', '2016-07-31', '2016-04-30', '2016-01-31', '2015-10-31', '2016-01-31', '2015-01-31', '2014-01-31', '2013-01-31', '2016-09-30', '2016-06-30', '2016-03-31', '2015-12-31', '2015-09-30', '2015-12-31', '2014-12-31', '2013-12-31', '2012-12-31'])\n# [Begin of Missing Code]\nresult = pd.to_numeric(s.astype(str).str.replace(',',''), errors='coerce')\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Survived': [0,1,1,1,0],\n                   'SibSp': [1,1,0,1,0],\n                   'Parch': [0,0,0,0,1]})\n# [Begin of Missing Code]\nresult = df.groupby((df['SibSp'] > 0) | (df['Parch'] > 0))['Survived'].mean().rename({True: 'Has Family', False: 'No Family'})\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Survived': [0,1,1,1,0],\n                   'SibSp': [1,1,0,1,0],\n                   'Parch': [0,0,0,0,1]})\n# [Begin of Missing Code]\nresult = df.groupby((df['Survived'] > 0) | (df['Parch'] > 0))['SibSp'].mean().rename({True: 'Has Family', False: 'No Family'})\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Survived': [0,1,1,1,0],\n                   'SibSp': [1,1,0,1,0],\n                   'Parch': [0,0,0,0,1]})\n# [Begin of Missing Code]\nresult = df.groupby((df['SibSp'] == 1) & (df['Parch'] == 1)).mean().rename({True: 'Has Family', False: 'No Family'}).iloc[:, 0]\nresult['New Family'] = df.groupby((df['SibSp'] == 0) & (df['Parch'] == 1)).mean().iloc[:, 0]\nresult['Old Family'] = df.groupby((df['SibSp'] == 1) & (df['Parch'] == 0)).mean().iloc[:, 0]\nresult = result.reindex(['Has Family', 'New Family', 'No Family', 'Old Family'])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'cokey':[11168155,11168155,11168155,11168156,11168156],\n                   'A':[18,0,56,96,0],\n                   'B':[56,18,96,152,96]})\n# [Begin of Missing Code]\nresult = df.groupby('cokey').apply(lambda x: x.sort_values('A'))\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'cokey':[11168155,11168155,11168155,11168156,11168156],\n                   'A':[18,0,56,96,0],\n                   'B':[56,18,96,152,96]})\n# [Begin of Missing Code]\nresult = df.groupby('cokey').apply(lambda x: x.sort_values('A'))\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\nl = [('A', 'a'),  ('A', 'b'), ('B','a'),  ('B','b')]\nnp.random.seed(1)\ndf = pd.DataFrame(np.random.randn(5, 4), columns=l)\n# [Begin of Missing Code]\ndf.columns = pd.MultiIndex.from_tuples(df.columns)\ndf = df.stack(0).unstack(0).swaplevel(0,1,axis=1).sort_index(axis=1)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\nl = [('A', '1', 'a'),  ('A', '1', 'b'), ('A', '2', 'a'), ('A', '2', 'b'), ('B', '1','a'),  ('B', '1','b')]\nnp.random.seed(1)\ndf = pd.DataFrame(np.random.randn(5, 6), columns=l)\n# [Begin of Missing Code]\ndf.columns = pd.MultiIndex.from_tuples(df.columns)\ndf = df.stack(level=[0,1]).unstack(level=[1,2])\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\nl = [('A', 'a', '1'), ('A', 'b', '2'), ('B','a', '1'), ('A', 'b', '1'),  ('B','b', '1'),  ('A', 'a', '2')]\nnp.random.seed(1)\ndf = pd.DataFrame(np.random.randn(5, 6), columns=l)\n# [Begin of Missing Code]\ndf.columns = pd.MultiIndex.from_tuples(df.columns)\ndf = df.stack(level=[0,1])\ndf.index = pd.MultiIndex.from_tuples(df.index, names=['Caps', 'Middle', 'Lower'])\ndf = df.unstack(level=[0,1])\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\n\nnp.random.seed(123)\nbirds = np.random.choice(['African Swallow', 'Dead Parrot', 'Exploding Penguin'], size=int(5e4))\nsomeTuple = np.unique(birds, return_counts=True)\n\n# [Begin of Missing Code]\nresult = pd.DataFrame({'birdType': someTuple[0], 'birdCount': someTuple[1]})\n# [End of Missing Code]\n\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'a':[1,1,1,2,2,2,3,3,3], 'b':[12,13,23,22,23,24,30,35,55]})\n# [Begin of Missing Code]\nresult = df.groupby('a')['b'].agg([np.mean, np.std])\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'a':[12,13,23,22,23,24,30,35,55], 'b':[1,1,1,2,2,2,3,3,3]})\n# [Begin of Missing Code]\nresult = df.groupby('b')['a'].agg([np.mean, np.std])\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'a':[1,1,1,2,2,2,3,3,3], 'b':[12,13,23,22,23,24,30,35,55]})\n# [Begin of Missing Code]\ndf['softmax'] = df.groupby('a')['b'].apply(lambda x: np.exp(x) / np.sum(np.exp(x)))\ndf['min-max'] = df.groupby('a')['b'].apply(lambda x: (x - np.min(x)) / (np.max(x) - np.min(x)))\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n\nimport pandas as pd\n\n\ndf = pd.DataFrame([[1,1,0,1],[0,0,0,0],[1,0,0,1],[0,1,0,0],[1,1,0,1]],columns=['A','B','C','D'])\n# [Begin of Missing Code]\ndf = df.loc[:, (df != 0).any(axis=0)]\ndf = df.loc[(df != 0).any(axis=1)]\nresult = df\n# [End of Missing Code]\nprint(result)",
        "[Solution Code]\n\nimport pandas as pd\n\n\ndf = pd.DataFrame([[-1,-1,0,2],[0,0,0,0],[1,0,0,1],[0,1,0,0],[1,1,0,1]],columns=['A','B','C','D'])\n# [Begin of Missing Code]\ndf = df.loc[:, (df != 0).any(axis=0)]\ndf = df.loc[(df != 0).any(axis=1)]\nresult = df.reset_index(drop=True)\n# [End of Missing Code]\nprint(result)",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame([[1,2,3,1],[0,0,0,0],[1,0,0,1],[0,1,2,0],[1,1,0,1]],columns=['A','B','C','D'])\n# [Begin of Missing Code]\nresult = df.loc[(df.max(axis=1) <= 1), ['A', 'D']]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame([[1,2,3,1],[0,0,0,0],[1,0,0,1],[0,1,2,0],[1,1,0,1]],columns=['A','B','C','D'])\n# [Begin of Missing Code]\ndf[df.max(axis=1) > 1] = 0\nresult = df[df.max(axis=0) <= 1]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ns = pd.Series([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.98,0.93],\n          index=['146tf150p','havent','home','okie','thanx','er','anything','lei','nite','yup','thank','ok','where','beerage','anytime','too','done','645','tick','blank'])\n# [Begin of Missing Code]\nresult = s.sort_values(ascending=True)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ns = pd.Series([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.98,0.93],\n              index=['146tf150p','havent','home','okie','thanx','er','anything','lei','nite','yup','thank','ok','where','beerage','anytime','too','done','645','tick','blank'])\n# [Begin of Missing Code]\ndf = pd.DataFrame({'index': s.index, 1: s.values})\ndf = df.sort_values(by=[1, 'index'], ascending=[True, True])\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'A': [1, 2, 's', 3, 'b'],\n                   'B': ['green', 'red', 'blue', 'yellow', 'black']})\n# [Begin of Missing Code]\nresult = df[df['A'].apply(lambda x: isinstance(x, (int, float)))]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'A': [1, 2, 's', 3, 'b'],\n                   'B': ['green', 'red', 'blue', 'yellow', 'black']})\n# [Begin of Missing Code]\nresult = df[df['A'].apply(lambda x: isinstance(x, str))]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Sp': ['MM1', 'MM1', 'MM1', 'MM2', 'MM2', 'MM2', 'MM4', 'MM4', 'MM4'],\n                   'Mt': ['S1', 'S1', 'S3', 'S3', 'S4', 'S4', 'S2', 'S2', 'S2'],\n                   'Value': ['a', 'n', 'cb', 'mk', 'bg', 'dgd', 'rd', 'cb', 'uyi'],\n                   'count': [3, 2, 5, 8, 10, 1, 2, 2, 7]})\n# [Begin of Missing Code]\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmax()]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Sp':['MM2','MM2','MM4','MM4','MM4'],\n                   'Mt':['S4','S4','S2','S2','S2'],\n                   'Value':['bg','dgd','rd','cb','uyi'],\n                   'count':[10,1,2,8,8]})\n# [Begin of Missing Code]\nresult = df.loc[df.groupby(['Sp','Mt'])['count'].idxmax()]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Sp': ['MM1', 'MM1', 'MM1', 'MM2', 'MM2', 'MM2', 'MM4', 'MM4', 'MM4'],\n                   'Mt': ['S1', 'S1', 'S3', 'S3', 'S4', 'S4', 'S2', 'S2', 'S2'],\n                   'Value': ['a', 'n', 'cb', 'mk', 'bg', 'dgd', 'rd', 'cb', 'uyi'],\n                   'count': [3, 2, 5, 8, 10, 1, 2, 2, 7]})\n# [Begin of Missing Code]\nresult = df.loc[df.groupby(['Sp', 'Mt'])['count'].idxmin()]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nresult = df.loc[df.groupby(['Sp','Value'])['count'].idxmax()]\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\ndict = {'abc':'1/2/2003', 'def':'1/5/2017', 'ghi':'4/10/2013'}\ndf = pd.DataFrame({'Member':['xyz', 'uvw', 'abc', 'def', 'ghi'], 'Group':['A', 'B', 'A', 'B', 'B'], 'Date':[np.nan, np.nan, np.nan, np.nan, np.nan]})\n# [Begin of Missing Code]\ndf['Date'] = df['Member'].map(dict).fillna(df['Date'])\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\ndict = {'abc':'1/2/2003', 'def':'1/5/2017', 'ghi':'4/10/2013'}\ndf = pd.DataFrame({'Member':['xyz', 'uvw', 'abc', 'def', 'ghi'], 'Group':['A', 'B', 'A', 'B', 'B'], 'Date':[np.nan, np.nan, np.nan, np.nan, np.nan]})\n# [Begin of Missing Code]\ndf['Date'] = df['Member'].map(dict).fillna('17/8/1926')\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\nexample_dict = {'abc':'1/2/2003', 'def':'1/5/2017', 'ghi':'4/10/2013'}\nexample_df = pd.DataFrame({'Member':['xyz', 'uvw', 'abc', 'def', 'ghi'], 'Group':['A', 'B', 'A', 'B', 'B'], 'Date':[np.nan, np.nan, np.nan, np.nan, np.nan]})\n\ndef f(dict=example_dict, df=example_df):\n    # [Begin of Missing Code]\n    df['Date'] = df['Member'].map(dict).fillna(df['Date'])\n    # [End of Missing Code]\n    return df\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\ndict = {'abc':'1/2/2003', 'def':'1/5/2017', 'ghi':'4/10/2013'}\ndf = pd.DataFrame({'Member':['xyz', 'uvw', 'abc', 'def', 'ghi'], 'Group':['A', 'B', 'A', 'B', 'B'], 'Date':[np.nan, np.nan, np.nan, np.nan, np.nan]})\n# [Begin of Missing Code]\ndf['Date'] = df['Member'].map(dict)\ndf['Date'] = pd.to_datetime(df['Date'], errors='coerce').dt.strftime('%d-%b-%Y').fillna('17-Aug-1926')\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\nd = ({'Date': ['1/1/18','1/1/18','2/1/18','3/1/18','1/2/18','1/3/18','2/1/19','3/1/19'],\n      'Val': ['A','B','C','D','A','B','C','D']})\ndf = pd.DataFrame(data=d)\n# [Begin of Missing Code]\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.Date.map(df.groupby('Date').size())\ndf['Count_m'] = df.groupby([df['Date'].dt.year.rename('year'), df['Date'].dt.month.rename('month')])['Val'].transform('count')\ndf['Count_y'] = df.groupby(df['Date'].dt.year.rename('year'))['Val'].transform('count')\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\nd = ({'Date': ['1/1/18','1/1/18','1/1/18','2/1/18','3/1/18','1/2/18','1/3/18','2/1/19','3/1/19'],\n      'Val': ['A','A','B','C','D','A','B','C','D']})\ndf = pd.DataFrame(data=d)\n# [Begin of Missing Code]\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.Date.map(df.groupby('Date').size())\ndf['Count_m'] = df.groupby([df['Date'].dt.year.rename('year'), df['Date'].dt.month.rename('month')])['Date'].transform('count')\ndf['Count_y'] = df.groupby(df['Date'].dt.year)['Date'].transform('count')\ndf['Count_Val'] = df.groupby(['Date', 'Val'])['Val'].transform('count')\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\nd = ({'Date': ['1/1/18','1/1/18','1/1/18','2/1/18','3/1/18','1/2/18','1/3/18','2/1/19','3/1/19'],\n      'Val': ['A','A','B','C','D','A','B','C','D']})\ndf = pd.DataFrame(data=d)\n# [Begin of Missing Code]\ndf['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%y')\ndf['Count_d'] = df.Date.map(df.groupby('Date').size())\ndf['Count_m'] = df.groupby([df['Date'].dt.year.rename('year'), df['Date'].dt.month.rename('month')])['Val'].transform('count')\ndf['Count_y'] = df.groupby([df['Date'].dt.year.rename('year')])['Val'].transform('count')\ndf['Count_w'] = df.groupby([df['Date'].dt.weekday.rename('weekday')])['Val'].transform('count')\ndf['Count_Val'] = df.groupby(['Val'])['Date'].transform('count')\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Date': ['20.07.2018', '20.07.2018', '21.07.2018', '21.07.2018'],\n                   'B': [10, 1, 0, 1],\n                   'C': [8, 0, 1, 0]})\n# result1: zero\n# result2: non-zero\n# [Begin of Missing Code]\nresult1 = df.groupby('Date').apply(lambda x: (x == 0).sum())\nresult2 = df.groupby('Date').apply(lambda x: (x != 0).sum())\n# [End of Missing Code]\nprint(result1)\nprint(result2)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Date': ['20.07.2018', '20.07.2018', '21.07.2018', '21.07.2018'],\n                   'B': [10, 1, 0, 1],\n                   'C': [8, 0, 1, 0]})\n# result1: even\n# result2: odd\n# [Begin of Missing Code]\nresult1 = df.groupby('Date').apply(lambda x: (x % 2 == 0).sum())\nresult2 = df.groupby('Date').apply(lambda x: (x % 2 == 1).sum())\n# [End of Missing Code]\nprint(result1)\nprint(result2)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\nnp.random.seed(1)\ndf = pd.DataFrame({\n          'A' : ['one', 'one', 'two', 'three'] * 6,\n          'B' : ['A', 'B', 'C'] * 8,\n          'C' : ['foo', 'foo', 'foo', 'bar', 'bar', 'bar'] * 4,\n          'D' : np.random.randn(24),\n          'E' : np.random.randn(24)\n})\n# [Begin of Missing Code]\nresult = pd.pivot_table(df, values=['D','E'], index=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\nnp.random.seed(1)\ndf = pd.DataFrame({\n          'A' : ['one', 'one', 'two', 'three'] * 6,\n          'B' : ['A', 'B', 'C'] * 8,\n          'C' : ['foo', 'foo', 'foo', 'bar', 'bar', 'bar'] * 4,\n          'D' : np.random.randn(24),\n          'E' : np.random.randn(24)\n})\n# [Begin of Missing Code]\nresult = pd.pivot_table(df, values=['D','E'], index=['B'], aggfunc={'D':np.sum, 'E':np.mean})\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\nnp.random.seed(1)\ndf = pd.DataFrame({\n'A' : ['abc', 'def', 'xyz', 'abc'] * 3,\n'B' : ['A', 'B', 'C'] * 4,\n'D' : np.random.randn(12),\n'E' : np.random.randn(12)\n})\n# [Begin of Missing Code]\nresult = pd.pivot_table(df, values=['D','E'], index=['B'], aggfunc={'D': np.sum, 'E': np.mean})\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nresult = pd.pivot_table(df, values=['D','E'], index=['B'], aggfunc={'D': np.max, 'E': np.min})\n```",
        "[Solution Code]\n```python\nimport dask.dataframe as dd\n\n\ndf = dd.from_pandas(pd.DataFrame([[\"A\", \"Z,Y\"], [\"B\", \"X\"], [\"C\", \"W,U,V\"]], index=[1,2,3], columns=['var1', 'var2']), npartitions=2)\nresult = df.assign(var2=df.var2.str.split(',')).compute().explode('var2')\n# [Begin of Missing Code]\nresult = result.reset_index(drop=True)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport dask.dataframe as dd\n\n\ndf = dd.from_pandas(pd.DataFrame([[\"A\", \"Z,Y\"], [\"B\", \"X\"], [\"C\", \"W,U,V\"]], index=[1,2,3], columns=['var1', 'var2']), npartitions=2)\nresult = df.assign(var2=df.var2.str.split(',')).compute().explode('var2')\n```\n",
        "[Solution Code]\n```python\nimport dask.dataframe as dd\n\n\ndf = dd.from_pandas(pd.DataFrame([[\"A\", \"Z-Y\"], [\"B\", \"X\"], [\"C\", \"W-U-V\"]], index=[1,2,3], columns=['var1', 'var2']), npartitions=2)\nresult = df.assign(var2=df.var2.str.split('-')).compute().explode('var2')\n```\n",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'str': ['Aa', 'Bb', '?? ?', '###', '{}xxa;']})\n\n# [Begin of Missing Code]\ndef count_special_char(string):\n    special_char = 0\n    for i in range(len(string)):\n        if not string[i].isalpha() and not string[i].isspace():\n            special_char += 1\n    return special_char\n\ndf[\"new\"] = df[\"str\"].apply(count_special_char)\n# [End of Missing Code]\n\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'str': ['Aa', 'Bb', '?? ?', '###', '{}xxa;']})\n# [Begin of Missing Code]\ndef count_special_char(string):\n    special_char = 0\n    for i in range(len(string)):\n        if(string[i].isalpha()):\n            continue\n        else:\n            special_char = special_char + 1\n    return special_char\n\ndf[\"new\"]=df[\"str\"].apply(count_special_char)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'row': ['00000 UNITED STATES', '01000 ALABAMA',\n                           '01001 Autauga County, AL', '01003 Baldwin County, AL',\n                           '01005 Barbour County, AL']})\n# [Begin of Missing Code]\ndf[['fips', 'row']] = df['row'].str.split(' ', 1, expand=True)\n# [End of Missing Code]\nresult = df\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'row': ['114 AAAAAA', '514 ENENEN',\n                           '1926 HAHAHA', '0817 O-O,O-O',\n                           '998244353 TTTTTT']})\n# [Begin of Missing Code]\ndf[['fips', 'row']] = df['row'].str.split(' ', expand=True)\n# [End of Missing Code]\nresult = df\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'row': ['00000 UNITED STATES', '01000 ALAB AMA',\n                           '01001 Autauga County, AL', '01003 Baldwin County, AL',\n                           '01005 Barbour County, AL']})\n# [Begin of Missing Code]\ndf[['fips', 'medi', 'row']] = df['row'].str.split(' ', n=2, expand=True)\n# [End of Missing Code]\nresult = df\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Name': ['Name1', 'Name2', 'Name3'],\n                   '2001': [2, 1, 0],\n                   '2002': [5, 4, 5],\n                   '2003': [0, 2, 0],\n                   '2004': [0, 0, 0],\n                   '2005': [4, 4, 0],\n                   '2006': [6, 0, 2]})\n# [Begin of Missing Code]\ndf = df.set_index('Name')\ndf = df.apply(lambda x: x[x!=0].expanding().mean(), axis=1).fillna(0)\ndf = df.reset_index()\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Name': ['Name1', 'Name2', 'Name3'],\n                   '2001': [2, 1, 0],\n                   '2002': [5, 4, 5],\n                   '2003': [0, 2, 0],\n                   '2004': [0, 0, 0],\n                   '2005': [4, 4, 0],\n                   '2006': [6, 0, 2]})\n# [Begin of Missing Code]\ndf = df.set_index('Name')\ndf = df.iloc[:, ::-1]\ndf = df.cumsum(axis=1)\ndf = df.iloc[:, ::-1]\ndf = df.replace(0, pd.np.nan)\ndf = df.apply(lambda x: x.ffill().bfill())\ndf = df.fillna(0)\ndf = df.div(df.count(axis=1), axis=0)\ndf = df.round(2)\n# [End of Missing Code]\nresult = df.reset_index()\nprint(result)\n```",
        "```python\nimport pandas as pd\n\nexample_df = pd.DataFrame({'Name': ['Name1', 'Name2', 'Name3'],\n                   '2001': [2, 1, 0],\n                   '2002': [5, 4, 5],\n                   '2003': [0, 2, 0],\n                   '2004': [0, 0, 0],\n                   '2005': [4, 4, 0],\n                   '2006': [6, 0, 2]})\ndef f(df=example_df):\n    # [Begin of Missing Code]\n    result = df.copy()\n    for i in range(len(df)):\n        row = df.iloc[i, 1:]\n        row = row[row != 0]\n        cum_avg = row.expanding().mean()\n        result.iloc[i, 1:] = cum_avg\n    # [End of Missing Code]\n    return result\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Name': ['Name1', 'Name2', 'Name3'],\n                   '2001': [2, 1, 0],\n                   '2002': [5, 4, 5],\n                   '2003': [0, 2, 0],\n                   '2004': [0, 0, 0],\n                   '2005': [4, 4, 0],\n                   '2006': [6, 0, 2]})\n# [Begin of Missing Code]\ndf = df.set_index('Name')\ndf = df.iloc[:, ::-1]\ndf = df.cumsum(axis=1)\ndf = df.iloc[:, ::-1]\ndf = df.replace(0, pd.np.nan)\ndf = df.apply(lambda x: x.dropna().reset_index(drop=True).fillna(method='ffill'), axis=1)\ndf = df.fillna(0)\ndf = df.iloc[:, ::-1]\ndf = df.cumsum(axis=1)\ndf = df.iloc[:, ::-1]\ndf = df.div(df.count(axis=1), axis=0)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'DateTime': ['2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07'],\n                   'Close': [1460, 1470, 1480, 1450]})\n# [Begin of Missing Code]\ndf['Label'] = 0\ndf.loc[0, 'Label'] = 1\ndf['Label'] = (df['Close'] - df['Close'].shift(1) > 0).astype(int)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'DateTime': ['2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07', '2000-01-08'],\n                   'Close': [1460, 1470, 1480, 1480, 1450]})\n# [Begin of Missing Code]\ndf['label'] = df['Close'].diff().apply(lambda x: 1 if x > 0 else (-1 if x < 0 else 0))\ndf.loc[0, 'label'] = 1\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'DateTime': ['2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07', '2000-01-08'],\n                   'Close': [1460, 1470, 1480, 1480, 1450]})\ndf['DateTime'] = pd.to_datetime(df['DateTime'])\n# [Begin of Missing Code]\ndf['label'] = df['Close'].diff().fillna(0)\ndf['label'] = df['label'].apply(lambda x: 1 if x > 0 else (-1 if x < 0 else 0))\ndf['label'][0] = 1\ndf['DateTime'] = df['DateTime'].dt.strftime('%d-%b-%Y')\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\nid=[\"Train A\",\"Train A\",\"Train A\",\"Train B\",\"Train B\",\"Train B\"]\narrival_time = [\"0\",\" 2016-05-19 13:50:00\",\"2016-05-19 21:25:00\",\"0\",\"2016-05-24 18:30:00\",\"2016-05-26 12:15:00\"]\ndeparture_time = [\"2016-05-19 08:25:00\",\"2016-05-19 16:00:00\",\"2016-05-20 07:45:00\",\"2016-05-24 12:50:00\",\"2016-05-25 23:00:00\",\"2016-05-26 19:45:00\"]\ndf = pd.DataFrame({'id': id, 'arrival_time':arrival_time, 'departure_time':departure_time})\n# [Begin of Missing Code]\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'], errors='coerce')\ndf['departure_time'] = pd.to_datetime(df['departure_time'], errors='coerce')\ndf['Duration'] = df['departure_time'].shift(-1) - df['arrival_time']\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\nid=[\"Train A\",\"Train A\",\"Train A\",\"Train B\",\"Train B\",\"Train B\"]\narrival_time = [\"0\",\" 2016-05-19 13:50:00\",\"2016-05-19 21:25:00\",\"0\",\"2016-05-24 18:30:00\",\"2016-05-26 12:15:00\"]\ndeparture_time = [\"2016-05-19 08:25:00\",\"2016-05-19 16:00:00\",\"2016-05-20 07:45:00\",\"2016-05-24 12:50:00\",\"2016-05-25 23:00:00\",\"2016-05-26 19:45:00\"]\ndf = pd.DataFrame({'id': id, 'arrival_time':arrival_time, 'departure_time':departure_time})\n# [Begin of Missing Code]\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'], errors='coerce')\ndf['departure_time'] = pd.to_datetime(df['departure_time'], errors='coerce')\ndf['Duration'] = df['departure_time'].shift(-1) - df['arrival_time']\ndf['Duration'] = df['Duration'].dt.total_seconds()\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\nid=[\"Train A\",\"Train A\",\"Train A\",\"Train B\",\"Train B\",\"Train B\"]\narrival_time = [\"0\",\" 2016-05-19 13:50:00\",\"2016-05-19 21:25:00\",\"0\",\"2016-05-24 18:30:00\",\"2016-05-26 12:15:00\"]\ndeparture_time = [\"2016-05-19 08:25:00\",\"2016-05-19 16:00:00\",\"2016-05-20 07:45:00\",\"2016-05-24 12:50:00\",\"2016-05-25 23:00:00\",\"2016-05-26 19:45:00\"]\ndf = pd.DataFrame({'id': id, 'arrival_time':arrival_time, 'departure_time':departure_time})\n# [Begin of Missing Code]\ndf['arrival_time'] = pd.to_datetime(df['arrival_time'], errors='coerce')\ndf['departure_time'] = pd.to_datetime(df['departure_time'], errors='coerce')\ndf['Duration'] = df['departure_time'].shift(-1) - df['arrival_time']\ndf['arrival_time'] = df['arrival_time'].dt.strftime('%d-%b-%Y %H:%M:%S')\ndf['departure_time'] = df['departure_time'].dt.strftime('%d-%b-%Y %H:%M:%S')\ndf['Duration'] = df['Duration'].dt.total_seconds()\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'key1': ['a', 'a', 'b', 'b', 'a', 'c'],\n                   'key2': ['one', 'two', 'one', 'two', 'one', 'two']})\n# [Begin of Missing Code]\nresult = df[df['key2'] == 'one'].groupby(['key1']).size().reset_index(name='count').fillna(0)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'key1': ['a', 'a', 'b', 'b', 'a', 'c'],\n                   'key2': ['one', 'two', 'one', 'two', 'one', 'two']})\n# [Begin of Missing Code]\nresult = df[df['key2'] == 'two'].groupby(['key1']).size().reset_index(name='count')\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'key1': ['a', 'a', 'b', 'b', 'a', 'c'],\n                   'key2': ['one', 'two', 'gee', 'two', 'three', 'two']})\n# [Begin of Missing Code]\nresult = df[df['key2'].str.endswith('e')].groupby('key1').size().reset_index(name='count')\nresult['count'] = result['count'].apply(lambda x: x if x > 0 else 0)\nresult = result[['key1', 'count']]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'value':[10000,2000,2000,200,5,70,200,5,25,0.02,12,0.022]},\n                  index=['2014-03-13','2014-03-21','2014-03-27','2014-03-17','2014-03-17','2014-03-17','2014-03-21','2014-03-27','2014-03-27','2014-03-31','2014-03-31','2014-03-31'])\n# [Begin of Missing Code]\nmax_result = max(df.index)\nmin_result = min(df.index)\n# [End of Missing Code]\nprint(max_result,min_result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'value':[10000,2000,2000,200,5,70,200,5,25,0.02,12,11,0.022]},\n                  index=['2014-03-13','2014-03-21','2014-03-27','2014-03-17','2014-03-17','2014-03-17','2014-03-21','2014-03-27','2014-03-27','2014-03-27','2014-03-31','2014-03-31','2014-03-31'])\n# [Begin of Missing Code]\nmode_result = df.index.mode()[0]\nmedian_result = df.index.median()\n# [End of Missing Code]\nprint(mode_result,median_result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport numpy as np\n\n\nnp.random.seed(2)\ndf = pd.DataFrame({'closing_price': np.random.randint(95, 105, 10)})\n# [Begin of Missing Code]\nresult = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport numpy as np\n\n\nnp.random.seed(2)\ndf = pd.DataFrame({'closing_price': np.random.randint(95, 105, 10)})\n# [Begin of Missing Code]\nresult = df[~((df['closing_price'] >= 99) & (df['closing_price'] <= 101))]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({\"item\": [1, 1, 1, 2, 2, 2, 2, 3, 3],\n                   \"diff\": [2, 1, 3, -1, 1, 4, -6, 0, 2],\n                   \"otherstuff\": [1, 2, 7, 0, 3, 9, 2, 0, 9]})\n# [Begin of Missing Code]\ndf1 = df.loc[df.groupby(\"item\")[\"diff\"].idxmin()]\nresult = df1.sort_values(\"item\")[[\"item\", \"diff\", \"otherstuff\"]]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\nstrs = ['Stackoverflow_1234',\n        'Stack_Over_Flow_1234',\n        'Stackoverflow',\n        'Stack_Overflow_1234']\ndf = pd.DataFrame(data={'SOURCE_NAME': strs})\n# [Begin of Missing Code]\ndf['SOURCE_NAME'] = df['SOURCE_NAME'].apply(lambda x: x.rsplit('_', 1)[0] if '_' in x else x)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\nstrs = ['Stackoverflow_1234',\n        'Stack_Over_Flow_1234',\n        'Stackoverflow',\n        'Stack_Overflow_1234']\ndf = pd.DataFrame(data={'SOURCE_NAME': strs})\n# [Begin of Missing Code]\ndf['SOURCE_NAME'] = df['SOURCE_NAME'].apply(lambda x: x.split('_')[-1] if '_' in x else x)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\nstrs = ['Stackoverflow_1234',\n        'Stack_Over_Flow_1234',\n        'Stackoverflow',\n        'Stack_Overflow_1234']\nexample_df = pd.DataFrame(data={'SOURCE_NAME': strs})\ndef f(df=example_df):\n    # [Begin of Missing Code]\n    df['SOURCE_NAME'] = df['SOURCE_NAME'].apply(lambda x: x.rsplit('_', 1)[0] if '_' in x else x)\n    result = df['SOURCE_NAME']\n    # [End of Missing Code]\n    return result\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\ndf = pd.DataFrame({'Column_x': [0,0,0,0,0,0,1,1,1,1,1,1,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan]})\n# [Begin of Missing Code]\nnum_nan = df['Column_x'].isna().sum()\nnum_fill_0 = num_nan // 2\nnum_fill_1 = num_nan - num_fill_0\ndf.loc[df['Column_x'].isna()[:num_fill_0], 'Column_x'] = 0\ndf.loc[df['Column_x'].isna()[-num_fill_1:], 'Column_x'] = 1\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\ndf = pd.DataFrame({'Column_x': [0,0,0,0,0,0,1,1,1,1,1,1,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan]})\n# [Begin of Missing Code]\nn = len(df['Column_x'])\nfirst_third = int(n * 0.3)\nsecond_third = int(n * 0.6)\ndf['Column_x'].fillna(value={i: 0 for i in range(first_third)})\ndf['Column_x'].fillna(value={i: 0.5 for i in range(first_third, second_third)})\ndf['Column_x'].fillna(value={i: 1 for i in range(second_third, n)})\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\ndf = pd.DataFrame({'Column_x': [0,0,0,0,1,1,1,1,1,1,1,1,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan]})\n# [Begin of Missing Code]\nnum_zeros = df['Column_x'].isna().sum() // 2\nnum_ones = df['Column_x'].isna().sum() - num_zeros\ndf['Column_x'].fillna(0, limit=num_zeros, inplace=True)\ndf['Column_x'].fillna(1, limit=num_ones, inplace=True)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport numpy as np\n\na = pd.DataFrame(np.array([[1, 2],[3, 4]]), columns=['one', 'two'])\nb = pd.DataFrame(np.array([[5, 6],[7, 8]]), columns=['one', 'two'])\n\n# [Begin of Missing Code]\nresult = pd.concat([a, b], axis=1)\nresult = pd.DataFrame(result.values.reshape(-1, len(a.columns)), columns=['one', 'two'])\nresult = pd.DataFrame(result.apply(tuple, axis=1), columns=['one', 'two'])\n# [End of Missing Code]\n\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport numpy as np\n\na = pd.DataFrame(np.array([[1, 2],[3, 4]]), columns=['one', 'two'])\nb = pd.DataFrame(np.array([[5, 6],[7, 8]]), columns=['one', 'two'])\nc = pd.DataFrame(np.array([[9, 10],[11, 12]]), columns=['one', 'two'])\n\n# [Begin of Missing Code]\ndfs = [a, b, c]\nresult = pd.concat([df.stack() for df in dfs], axis=1)\nresult.columns = [f\"{col}_{i}\" for i, df in enumerate(dfs) for col in df.columns]\nresult = result.groupby(level=0, axis=1).apply(lambda x: tuple(x.values.tolist())).reset_index(drop=True)\n# [End of Missing Code]\n\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport numpy as np\n\na = pd.DataFrame(np.array([[1, 2],[3, 4]]), columns=['one', 'two'])\nb = pd.DataFrame(np.array([[5, 6],[7, 8],[9, 10]]), columns=['one', 'two'])\n\n# [Begin of Missing Code]\ndfs = [a, b]\nmax_len = max([len(df) for df in dfs])\nresult = pd.DataFrame(index=range(max_len), columns=[col for df in dfs for col in df.columns])\nfor df in dfs:\n    result.loc[:len(df)-1, df.columns] = df.values\n# [End of Missing Code]\n\nprint(result)\n```",
        "```python\nimport pandas as pd\n\ndf = pd.DataFrame({'username': ['john', 'john', 'john', 'john', 'jane', 'jane', 'jane', 'jane'],\n                   'post_id': [1, 2, 3, 4, 7, 8, 9, 10],\n                   'views': [3, 23, 44, 82, 5, 25,46, 56]})\nbins = [1, 10, 25, 50, 100]\n# [Begin of Missing Code]\nresult = df.groupby(['username', pd.cut(df.views, bins)]).size().unstack(fill_value=0)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\ndf = pd.DataFrame({'username': ['john', 'john', 'john', 'john', 'jane', 'jane', 'jane', 'jane'],\n                   'post_id': [1, 2, 3, 4, 7, 8, 9, 10],\n                   'views': [3, 23, 44, 82, 5, 25,46, 56]})\nbins = [1, 10, 25, 50, 100]\n# [Begin of Missing Code]\nresult = df.groupby(['username', pd.cut(df.views, bins)]).size().unstack(fill_value=0)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\ndf = pd.DataFrame({'username': ['tom', 'tom', 'tom', 'tom', 'jack', 'jack', 'jack', 'jack'],\n                   'post_id': [10, 8, 7, 6, 5, 4, 3, 2],\n                   'views': [3, 23, 44, 82, 5, 25,46, 56]})\nbins = [1, 10, 25, 50, 100]\n# [Begin of Missing Code]\nresult = pd.crosstab(df['username'], pd.cut(df['views'], bins))\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'text': ['abc', 'def', 'ghi', 'jkl']})\n# [Begin of Missing Code]\nresult = pd.DataFrame({'text': [', '.join(df['text'].tolist())]})\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'text': ['abc', 'def', 'ghi', 'jkl']})\n# [Begin of Missing Code]\nresult = pd.DataFrame({'text': ['-'.join(df['text'].tolist())]})\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'text': ['abc', 'def', 'ghi', 'jkl']})\n# [Begin of Missing Code]\nresult = pd.DataFrame({'text': [', '.join(df['text'].tolist()[::-1])]})\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'text': ['abc', 'def', 'ghi', 'jkl']})\n# [Begin of Missing Code]\nresult = pd.Series(df['text'].str.cat(sep=', '))\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'text': ['abc', 'def', 'ghi', 'jkl']})\n# [Begin of Missing Code]\nresult = pd.Series('-'.join(df['text'][::-1]))\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nresult = pd.concat([df1.set_index('id'), df2.set_index('id')], axis=0, sort=True).reset_index()\nresult = result.groupby('id').apply(lambda x: x.ffill().bfill()).reset_index(drop=True)\nresult[['city', 'district']] = result.groupby('id')[['city', 'district']].apply(lambda x: x.ffill().bfill())\nresult = result[['id', 'city', 'district', 'date', 'value']]\n```",
        "```python\nresult = pd.concat([df1, df2], axis=0)\nresult['date'] = pd.to_datetime(result['date'])\nresult['date'] = result['date'].dt.strftime('%d-%b-%Y')\nresult = result.sort_values(['id', 'date'])\nresult = result.fillna(method='ffill')\nresult = result.drop_duplicates(subset=['id', 'city', 'district', 'date'], keep='first')\n```",
        "```python\nresult = pd.concat([df1[['id', 'city', 'district']], df2[['id', 'date', 'value']]], axis=0)\nresult = result.sort_values(['id', 'date'])\nresult = result.fillna(method='ffill')\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\nC = pd.DataFrame({\"A\": [\"AB\", \"CD\", \"EF\"], \"B\": [1, 2, 3]})\nD = pd.DataFrame({\"A\": [\"CD\", \"GH\"], \"B\": [4, 5]})\n# [Begin of Missing Code]\nresult = pd.merge(C, D, how='outer', on='A')\nresult['B_x'].update(result['B_y'])\nresult = result.drop(columns=['B_y'])\nresult = result.rename(columns={'B_x': 'B'})\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\nC = pd.DataFrame({\"A\": [\"AB\", \"CD\", \"EF\"], \"B\": [1, 2, 3]})\nD = pd.DataFrame({\"A\": [\"CD\", \"GH\"], \"B\": [4, 5]})\n# [Begin of Missing Code]\nresult = pd.merge(C, D, how='outer', on='A')\nresult['B_x'].fillna(result['B_y'], inplace=True)\nresult.drop(columns=['B_y'], inplace=True)\nresult.rename(columns={'B_x': 'B'}, inplace=True)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\nC = pd.DataFrame({\"A\": [\"AB\", \"CD\", \"EF\"], \"B\": [1, 2, 3]})\nD = pd.DataFrame({\"A\": [\"CD\", \"GH\"], \"B\": [4, 5]})\n# [Begin of Missing Code]\nresult = pd.merge(C, D, how='outer', on='A', suffixes=('_x', '_y'))\nresult['B_x'] = result['B_y'].fillna(result['B_x'])\nresult.drop('B_y', axis=1, inplace=True)\nresult['dulplicated'] = result.duplicated(subset=['A'], keep=False)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'user':[1,1,2,2,3], 'time':[20,10,11,18, 15], 'amount':[10.99, 4.99, 2.99, 1.99, 10.99]})\n### Output your answer into variable 'result'\n# [Begin of Missing Code]\nresult = df.groupby('user').apply(lambda x: x[['time', 'amount']].values.tolist()).rename('transactions')\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'user':[1,1,2,2,3], 'time':[20,10,11,18, 15], 'amount':[10.99, 4.99, 2.99, 1.99, 10.99]})\n### Output your answer into variable 'result'\n# [Begin of Missing Code]\nresult = df.groupby('user').apply(lambda x: x[['time', 'amount']].values.tolist())\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'user':[1,1,2,2,3], 'time':[20,10,11,18, 15], 'amount':[10.99, 4.99, 2.99, 1.99, 10.99]})\n### Output your answer into variable 'result'\n# [Begin of Missing Code]\nresult = df.groupby('user').apply(lambda x: x[['amount', 'time']].values.tolist()[::-1])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\nseries = pd.Series([np.array([1,2,3,4]), np.array([5,6,7,8]), np.array([9,10,11,12])], index=['file1', 'file2', 'file3'])\n# [Begin of Missing Code]\ndf = pd.DataFrame(series.tolist(), index=series.index)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\nseries = pd.Series([np.array([1,2,3,4]), np.array([5,6,7,8]), np.array([9,10,11,12])], index=['file1', 'file2', 'file3'])\n# [Begin of Missing Code]\ndf = pd.DataFrame(series.values.tolist(), index=series.index, columns=['0', '1', '2', '3'])\ndf.reset_index(inplace=True)\ndf.rename(columns={'index': 'name'}, inplace=True)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndata = {'spike-2': [1,2,3], 'hey spke': [4,5,6], 'spiked-in': [7,8,9], 'no': [10,11,12]}\ndf = pd.DataFrame(data)\ns = 'spike'\n# [Begin of Missing Code]\nresult = [col for col in df.columns if s in col and not col == s]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndata = {'spike-2': [1,2,3], 'hey spke': [4,5,6], 'spiked-in': [7,8,9], 'no': [10,11,12]}\ndf = pd.DataFrame(data)\ns = 'spike'\n# [Begin of Missing Code]\nresult = df.loc[:, df.columns.str.contains(s) & ~df.columns.str.match(s)]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndata = {'spike-2': [1,2,3], 'hey spke': [4,5,6], 'spiked-in': [7,8,9], 'no': [10,11,12]}\ndf = pd.DataFrame(data)\ns = 'spike'\n# [Begin of Missing Code]\nresult = [col for col in df.columns if s in col]\nresult = {col: f\"{s}{i+1}\" for i, col in enumerate(result)}\ndf = df.rename(columns=result)\n# [End of Missing Code]\nprint(df[['spike1', 'spike2']])\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'codes':[[71020], [77085], [36415], [99213, 99287], [99233, 99233, 99233]]})\n# [Begin of Missing Code]\nresult = pd.DataFrame(df['codes'].values.tolist()).add_prefix('code_')\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'codes':[[71020], [77085], [36415], [99213, 99287], [99233, 99233, 99233]]})\n# [Begin of Missing Code]\nresult = pd.DataFrame(df['codes'].values.tolist()).add_prefix('code_')\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'codes':[[71020], [77085], [36415], [99213, 99287], [99234, 99233, 99233]]})\n# [Begin of Missing Code]\nresult = pd.DataFrame(df['codes'].values.tolist()).add_prefix('code_')\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport ast\n\ndf = pd.DataFrame(dict(col1=[[1, 2, 3]] * 2))\n\n# [Begin of Missing Code]\nresult = []\nfor lst in df['col1']:\n    result += lst\n# [End of Missing Code]\n\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\ndf = pd.DataFrame(dict(col1=[[1, 2, 3],[4,5]]))\n# [Begin of Missing Code]\nresult = df['col1'].apply(lambda x: ','.join(map(str, reversed(x)))).str.cat(sep=',')\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame(dict(col1=[[1, 2, 3]] * 2))\n# [Begin of Missing Code]\nresult = ','.join([','.join(map(str, lst)) for lst in df['col1']])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nresult = df.set_index('Time').resample('2T').mean().interpolate()\nresult = result.reset_index()\nresult['Time'] = result['Time'].dt.strftime('%Y-%m-%d %H:%M:%S')\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'Time': ['2015-04-24 06:38:49', '2015-04-24 06:39:19', '2015-04-24 06:43:49', '2015-04-24 06:44:18',\n                            '2015-04-24 06:44:48', '2015-04-24 06:45:18', '2015-04-24 06:47:48', '2015-04-24 06:48:18',\n                            '2015-04-24 06:50:48', '2015-04-24 06:51:18', '2015-04-24 06:51:48', '2015-04-24 06:52:18',\n                            '2015-04-24 06:52:48', '2015-04-24 06:53:48', '2015-04-24 06:55:18', '2015-04-24 07:00:47',\n                            '2015-04-24 07:01:17', '2015-04-24 07:01:47'],\n                   'Value': [0.023844, 0.019075, 0.023844, 0.019075, 0.023844, 0.019075,\n                             0.023844, 0.019075, 0.023844, 0.019075, 0.023844, 0.019075,\n                             0.023844, 0.019075, 0.023844, 0.019075, 0.023844, 0.019075]})\ndf['Time'] = pd.to_datetime(df['Time'])\n# [Begin of Missing Code]\ndf = df.set_index('Time')\ndf = df.resample('3T').sum()\ndf = df.reset_index()\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'ID': ['01', '01', '01', '02', '02'],\n                   'TIME': ['2018-07-11 11:12:20', '2018-07-12 12:00:23', '2018-07-13 12:00:00', '2019-09-11 11:00:00', '2019-09-12 12:00:00']})\n# [Begin of Missing Code]\ndf['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=True)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'ID': ['01', '01', '01', '02', '02'],\n                   'TIME': ['2018-07-11 11:12:20', '2018-07-12 12:00:23', '2018-07-13 12:00:00', '2019-09-11 11:00:00', '2019-09-12 12:00:00']})\n# [Begin of Missing Code]\ndf['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=False)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'ID': ['01', '01', '01', '02', '02'],\n                   'TIME': ['2018-07-11 11:12:20', '2018-07-12 12:00:23', '2018-07-13 12:00:00', '2019-09-11 11:00:00', '2019-09-12 12:00:00']})\n# [Begin of Missing Code]\ndf['TIME'] = pd.to_datetime(df['TIME'])\ndf['RANK'] = df.groupby('ID')['TIME'].rank(ascending=False)\ndf['TIME'] = df['TIME'].dt.strftime('%d-%b-%Y %a %H:%M:%S')\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'a': [1,1,1,2,2,2,3,3,3],\n                    'b': [1,2,3,1,2,3,1,2,3],\n                    'c': range(9)}).set_index(['a', 'b'])\nfilt = pd.Series({1:True, 2:False, 3:True})\n# [Begin of Missing Code]\nresult = df[filt[df.index.get_level_values('a')].values]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'a': [1,1,1,2,2,2,3,3,3],\n                    'b': [1,2,3,1,2,3,1,2,3],\n                    'c': range(9)}).set_index(['a', 'b'])\nfilt = pd.Series({1:True, 2:False, 3:True})\n# [Begin of Missing Code]\nresult = df[filt[df.index.get_level_values('a')].values]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\nnp.random.seed(10)\ndf = pd.DataFrame(np.random.randint(0, 20, (10, 10)).astype(float), columns=[\"c%d\"%d for d in range(10)])\ndf.where(np.random.randint(0,2, df.shape).astype(bool), np.nan, inplace=True)\n# [Begin of Missing Code]\nresult = df.loc[[0, 8]].isnull().eq(df.loc[[0, 8]].isnull().all()).all().loc[0]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\nnp.random.seed(10)\ndf = pd.DataFrame(np.random.randint(0, 20, (10, 10)).astype(float), columns=[\"c%d\"%d for d in range(10)])\ndf.where(np.random.randint(0,2, df.shape).astype(bool), np.nan, inplace=True)\n# [Begin of Missing Code]\nresult = df.loc[[0, 8]].T.apply(lambda x: x[0] == x[1] or (pd.isna(x[0]) and pd.isna(x[1]))).loc[lambda x: x].index\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\nnp.random.seed(10)\ndf = pd.DataFrame(np.random.randint(0, 20, (10, 10)).astype(float), columns=[\"c%d\"%d for d in range(10)])\ndf.where(np.random.randint(0,2, df.shape).astype(bool), np.nan, inplace=True)\n# [Begin of Missing Code]\nresult = df.loc[[0, 8]].isna().all().reset_index()\nresult = result[result[0]].iloc[:, 0].tolist()\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\nnp.random.seed(10)\ndf = pd.DataFrame(np.random.randint(0, 20, (10, 10)).astype(float), columns=[\"c%d\"%d for d in range(10)])\ndf.where(np.random.randint(0,2, df.shape).astype(bool), np.nan, inplace=True)\n# [Begin of Missing Code]\nresult = []\nfor col in df.columns:\n    if df.loc[0, col] != df.loc[8, col]:\n        result.append((df.loc[0, col], df.loc[8, col]))\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndates = ['2016-1-{}'.format(i)for i in range(1,21)]\nvalues = [i for i in range(20)]\ndata = {'Date': dates, 'Value': values}\ndf = pd.DataFrame(data)\ndf['Date'] = pd.to_datetime(df['Date'])\n# [Begin of Missing Code]\nts = df.set_index('Date')['Value']\n# [End of Missing Code]\nresult = ts\nprint(result)\n```",
        "```python\nimport pandas as pd\n\ndf = pd.DataFrame([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]],columns=['A','B','C','D','E'])\n# [Begin of Missing Code]\nresult = pd.DataFrame(df.values.reshape(1, -1), columns=[f\"{col}_{i}\" for i in range(1, len(df.columns)+1) for col in df.columns])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]],columns=['A','B','C','D','E'])\n# [Begin of Missing Code]\nresult = pd.DataFrame(df.values.reshape(1,-1), columns=[f\"{col}_{i}\" for i in range(df.shape[0]) for col in df.columns])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame([(.21, .3212), (.01, .61237), (.66123, .03), (.21, .18),(pd.NA, .18)],\n                  columns=['dogs', 'cats'])\n# [Begin of Missing Code]\ndf['dogs'] = df['dogs'].round(2).fillna(pd.NA)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame([(.21, .3212), (.01, .61237), (.66123, pd.NA), (.21, .18),(pd.NA, .188)],\n                  columns=['dogs', 'cats'])\n# [Begin of Missing Code]\ndf['dogs'] = df['dogs'].round(2)\ndf['cats'] = df['cats'].round(2).astype('Float64')\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\n\nnp.random.seed(10)\ndata = {}\nfor i in [chr(x) for x in range(65,91)]:\n    data['Col '+i] = np.random.randint(1,100,10)\ndf = pd.DataFrame(data)\nlist_of_my_columns = ['Col A', 'Col E', 'Col Z']\n# [Begin of Missing Code]\ndf['Sum'] = df[list_of_my_columns].sum(axis=1)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport numpy as np\n\n\nnp.random.seed(10)\ndata = {}\nfor i in [chr(x) for x in range(65,91)]:\n    data['Col '+i] = np.random.randint(1,100,10)\ndf = pd.DataFrame(data)\nlist_of_my_columns = ['Col A', 'Col E', 'Col Z']\n# [Begin of Missing Code]\ndf['Avg'] = df[list_of_my_columns].mean(axis=1)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport numpy as np\n\n\nnp.random.seed(10)\ndata = {}\nfor i in [chr(x) for x in range(65,91)]:\n    data['Col '+i] = np.random.randint(1,100,10)\ndf = pd.DataFrame(data)\nlist_of_my_columns = ['Col A', 'Col E', 'Col Z']\n# [Begin of Missing Code]\ndf['Avg'] = df[list_of_my_columns].mean(axis=1)\ndf['Min'] = df[list_of_my_columns].min(axis=1)\ndf['Max'] = df[list_of_my_columns].max(axis=1)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nresult = df.reset_index().sort_values(['time','index']).set_index(['treatment','dose','time'])['VIM']\n```",
        "```python\nresult = df.sort_values(['VIM', 'time'])\n```",
        "# [Begin of Missing Code]\ndf = df[~df.index.isin(['2020-02-17', '2020-02-18'])]\n# [End of Missing Code]\nresult = df.to_string()\n",
        "[Begin of Missing Code]\ndf = df[~df.index.isin(['2020-02-17', '2020-02-18'])]\nresult = df.index.strftime('%d-%b-%Y %A')\n[End of Missing Code]",
        "```python\nimport pandas as pd\nimport numpy as np\n\nnp.random.seed(10)\ndf = pd.DataFrame(np.random.rand(10,5))\ncorr = df.corr()\n# [Begin of Missing Code]\nresult = corr[corr > 0.3].stack().reset_index()\nresult.columns = ['Col1', 'Col2', 'Pearson Correlation Coefficient']\nresult = result[result['Pearson Correlation Coefficient'].notnull()]\nresult = result[result['Col1'] != result['Col2']]\nresult = result.set_index(['Col1', 'Col2'])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nresult = corr[corr > 0.3].stack().reset_index()\nresult = result[result['level_0'] != result['level_1']]\nresult = result[[0, 'level_1']]\nresult.set_index([result['level_0'], 'level_1'], inplace=True)\nresult = result[0]\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=list('ABA'))\n# [Begin of Missing Code]\ndf.rename(columns={df.columns[-1]: 'Test'}, inplace=True)\n# [End of Missing Code]\nprint(df)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=list('ABA'))\n# [Begin of Missing Code]\ndf.rename(columns={df.columns[0]: 'Test'}, inplace=True)\nresult = df\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'bit1': [0, 1, 1],\n                   'bit2': [0, 1, 0],\n                   'bit3': [1, 0, 1],\n                   'bit4': [1, 0, 1],\n                   'bit5': [0, 1, 1]})\n# [Begin of Missing Code]\ndf['frequent'] = df.mode(axis=1)[0]\ndf['freq_count'] = df.apply(lambda x: x.value_counts().max(), axis=1)\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'bit1': [0, 2, 4],\n                   'bit2': [0, 2, 0],\n                   'bit3': [3, 0, 4],\n                   'bit4': [3, 0, 4],\n                   'bit5': [0, 2, 4]})\n# [Begin of Missing Code]\nfrequent = df.mode(axis=1)\nfreq_count = df.apply(lambda x: x.value_counts().max(), axis=1)\ndf['frequent'] = frequent\ndf['freq_count'] = freq_count\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({'bit1': [0, 2, 4],\n                   'bit2': [0, 2, 0],\n                   'bit3': [3, 0, 4],\n                   'bit4': [3, 0, 4],\n                   'bit5': [0, 2, 4],\n                   'bit6': [3, 0, 5]})\n# [Begin of Missing Code]\nfrequent = []\nfreq_count = []\nfor index, row in df.iterrows():\n    counts = row.value_counts()\n    max_count = max(counts)\n    freq = counts[counts == max_count].index.tolist()\n    frequent.append(freq)\n    freq_count.append(max_count)\ndf['frequent'] = frequent\ndf['freq_count'] = freq_count\n# [End of Missing Code]\nresult = df\nprint(result)\n```",
        "```python\nimport pandas as pd\n\n\ndf = pd.DataFrame({\"foo\":[8,5,3,4,7,9,5,7], \n                   \"id1\":[1,1,1,1,1,1,1,1], \n                   \"bar\":['NULL','NULL','NULL',1,3,4,2,3], \n                   \"id2\":[1,1,1,2,2,3,3,1]})\n# [Begin of Missing Code]\ndf['bar'] = pd.to_numeric(df['bar'], errors='coerce')\nresult = df.groupby([\"id1\",\"id2\"]).mean()\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({\"foo\":[8,5,3,4,7,9,5,7], \n                   \"id1\":[1,1,1,1,1,1,1,1], \n                   \"bar\":['NULL','NULL','NULL',1,3,4,2,3], \n                   \"id2\":[1,1,1,2,2,3,3,1]})\n\ndf['bar'] = pd.to_numeric(df['bar'], errors='coerce').fillna(0)\n\nresult = df.groupby([\"id1\",\"id2\"]).agg({'foo': np.mean, 'bar': np.mean})\n\nprint(result)\n```",
        "```python\nresult = pd.merge(df_a[['EntityNum','foo']], df_b[['EntityNum','a_col']], on='EntityNum')\n```",
        "```python\nresult = pd.merge(df_a, df_b[['EntityNum','b_col']], on='EntityNum')\n```"
    ],
    "Numpy": [
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[1,2],[3,4]])\n# [Begin of Missing Code]\nresult = a.shape\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nx = np.array([1400, 1500, 1600, np.nan, np.nan, np.nan ,1700])\n# [Begin of Missing Code]\nx = x[~np.isnan(x)]\n# [End of Missing Code]\nprint(x)\n```",
        "```python\nimport numpy as np\nx = np.array([1400, 1500, 1600, np.nan, np.nan, np.nan ,1700])\n# [Begin of Missing Code]\nx[np.isnan(x)] = np.inf\n# [End of Missing Code]\nprint(x)\n```",
        "```python\nimport numpy as np\nx = np.array([[1400, 1500, 1600, np.nan], [1800, np.nan, np.nan ,1700]])\n# [Begin of Missing Code]\nresult = []\nfor row in x:\n    new_row = []\n    for val in row:\n        if not np.isnan(val):\n            new_row.append(val)\n    result.append(new_row)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([1, 0, 3])\n# [Begin of Missing Code]\nb = np.zeros((a.size, a.max()+1))\nb[np.arange(a.size), a] = 1\n# [End of Missing Code]\nprint(b)\n```",
        "```python\nimport numpy as np\na = np.array([1, 0, 3])\n# [Begin of Missing Code]\nb = np.zeros((a.size, a.max()+1))\nb[np.arange(a.size), a] = 1\n# [End of Missing Code]\nprint(b)\n```",
        "```python\nimport numpy as np\na = np.array([-1, 0, 3])\n# [Begin of Missing Code]\nb = np.zeros((a.size, a.max() - a.min() + 1), dtype=int)\nb[np.arange(a.size), a-a.min()] = 1\n# [End of Missing Code]\nprint(b)\n```",
        "```python\nimport numpy as np\na = np.array([1.5, -0.4, 1.3])\n# [Begin of Missing Code]\nunique_a = np.unique(a)\nn_unique_a = len(unique_a)\nb = np.zeros((len(a), n_unique_a))\nfor i, val in enumerate(unique_a):\n    b[:, i] = (a == val).astype(int)\n# [End of Missing Code]\nprint(b)\n```",
        "```python\nimport numpy as np\na = np.array([[1,0,3], [2,4,1]])\n# [Begin of Missing Code]\nb = np.zeros((a.size, a.max()+1))\nb[np.arange(a.size), a.ravel()] = 1\nb = b.reshape(*a.shape, -1)\n# [End of Missing Code]\nprint(b)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([1,2,3,4,5])\np = 25\n# [Begin of Missing Code]\nresult = np.percentile(a, p)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nA = np.array([1,2,3,4,5,6])\nncol = 2\n# [Begin of Missing Code]\nB = A.reshape(-1, ncol)\n# [End of Missing Code]\nprint(B)\n```",
        "```python\nimport numpy as np\nA = np.array([1,2,3,4,5,6])\nnrow = 3\n# [Begin of Missing Code]\nB = np.reshape(A, (nrow, -1))\n# [End of Missing Code]\nprint(B)\n```",
        "```python\nimport numpy as np\nA = np.array([1,2,3,4,5,6,7])\nncol = 2\n# [Begin of Missing Code]\nB = A[:len(A)//ncol*ncol].reshape(-1, ncol)\n# [End of Missing Code]\nprint(B)\n```",
        "```python\nimport numpy as np\nA = np.array([1,2,3,4,5,6,7])\nncol = 2\n# [Begin of Missing Code]\nnrow = -(-len(A) // ncol) # calculate number of rows needed\nA = A[-nrow*ncol:] # discard elements at the beginning if necessary\nB = A.reshape(nrow, ncol)[::-1] # reshape and reverse the array\n# [End of Missing Code]\nprint(B)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.])\nshift = 3\n# [Begin of Missing Code]\nresult = np.roll(a, shift)\nif shift > 0:\n    result[:shift] = np.nan\nelse:\n    result[shift:] = np.nan\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.],\n\t\t[1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.]])\nshift = 3\n# [Begin of Missing Code]\nresult = np.roll(a, shift, axis=1)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.],\n\t\t[1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.]])\nshift = [-2, 3]\n# [Begin of Missing Code]\nresult = np.zeros_like(a)\nfor i, s in enumerate(shift):\n    if s > 0:\n        result[i, s:] = a[i, :-s]\n    elif s < 0:\n        result[i, :s] = a[i, -s:]\n    else:\n        result[i] = a[i]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nnp.random.seed(42)\nr_old = np.random.randint(3, size=(100, 2000)) - 1\nnp.random.seed(42)\nr_new = np.random.randint(3, size=(100, 2000)) - 1\nprint(r_old, r_new)\n```\n\nExplanation:\nTo generate the same random array each time, we need to set a seed for the random number generator. In this case, we can use the `np.random.seed()` function to set the seed to a fixed value (in this case, 42). Then we can generate the random arrays `r_old` and `r_new` using the same seed to ensure that they are the same each time. Finally, we print out the arrays to verify that they are the same.",
        "```python\nimport numpy as np\na = np.array([[10,50,30],[60,20,40]])\n# [Begin of Missing Code]\nresult = np.argmax(a.ravel())\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.array([[10,50,30],[60,20,40]])\n# [Begin of Missing Code]\nresult = np.unravel_index(np.argmin(a), a.shape)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.array([[10,50,30],[60,20,40]])\n# [Begin of Missing Code]\nresult = np.unravel_index(np.argmax(a, axis=None), a.shape, order='F')\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.array([[10,50,30],[60,20,40]])\n# [Begin of Missing Code]\nresult = np.unravel_index(np.argmax(a), a.shape)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nexample_a = np.array([[10,50,30],[60,20,40]])\ndef f(a = example_a):\n    # [Begin of Missing Code]\n    result = np.unravel_index(np.argmax(a), a.shape)\n    # [End of Missing Code]\n    return result\n```",
        "```python\nimport numpy as np\na = np.array([[10,50,30],[60,20,40]])\n# [Begin of Missing Code]\nmax_val = np.max(a)\na[a == max_val] = -np.inf\nsecond_max_val = np.max(a)\nresult = np.unravel_index(np.argmax(a), a.shape)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.array([[np.nan, 2., 3., np.nan],\n\t\t[1., 2., 3., 9]])\n# [Begin of Missing Code]\na = a[:, ~np.any(np.isnan(a), axis=0)]\n# [End of Missing Code]\nprint(a)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[np.nan, 2., 3., np.nan],\n\t\t[1., 2., 3., 9]])\n# [Begin of Missing Code]\na = a[~np.isnan(a).any(axis=1)]\n# [End of Missing Code]\nprint(a)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \n# [Begin of Missing Code]\nresult = np.array(a)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.array([[10, 20, 30, 40, 50],\n       [ 6,  7,  8,  9, 10]])\npermutation = [0, 4, 1, 3, 2]\n# [Begin of Missing Code]\na = a[:, permutation]\n# [End of Missing Code]\nprint(a)\n```",
        "```python\nimport numpy as np\na = np.array([[[10, 20],\n        [30, 40]],\n       [[6,  7],\n        [8,  9]],\n\t[[10, 11],\n\t [12, 13]]])\npermutation = [1, 0, 2]\n# [Begin of Missing Code]\nresult = a[permutation]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[1, 2], [3, 0]])\n# [Begin of Missing Code]\nresult = np.unravel_index(np.argmin(a), a.shape)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[1, 2], [3, 0]])\n# [Begin of Missing Code]\nresult = np.unravel_index(np.argmax(a), a.shape)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[1, 0], [0, 2]])\n# [Begin of Missing Code]\nresult = np.argwhere(a == np.min(a))\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\ndegree = 90\n# [Begin of Missing Code]\nresult = np.sin(np.deg2rad(degree))\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\ndegree = 90\n# [Begin of Missing Code]\nresult = np.cos(np.deg2rad(degree))\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nnumber = np.random.randint(0, 360)\n# [Begin of Missing Code]\nsine_degree = np.sin(np.deg2rad(number))\nsine_radian = np.sin(number)\nif sine_degree > sine_radian:\n    result = 0\nelse:\n    result = 1\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nvalue = 1.0\n# [Begin of Missing Code]\nresult = np.arcsin(value) * 180 / np.pi\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nA = np.array([1,2,3,4,5])\nlength = 8\n# [Begin of Missing Code]\nresult = np.pad(A, (0, length - len(A)), 'constant')\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nA = np.array([1,2,3,4,5])\nlength = 8\n# [Begin of Missing Code]\nresult = np.pad(A, (0, length - len(A)), 'constant')\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.arange(4).reshape(2, 2)\npower = 5\n# [Begin of Missing Code]\na_power = np.power(a, power)\n# [End of Missing Code]\nprint(a_power)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nexample_a = np.arange(4).reshape(2, 2)\ndef f(a = example_a, power = 5):\n    # [Begin of Missing Code]\n    result = np.power(a, power)\n    # [End of Missing Code]\n    return result\n```",
        "[Solution Code]\n```python\nimport numpy as np\nfrom fractions import Fraction\nnumerator = 98\ndenominator = 42\n# [Begin of Missing Code]\nresult = Fraction(numerator, denominator)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\ndef f(numerator = 98, denominator = 42):\n    # [Begin of Missing Code]\n    from fractions import Fraction\n    result = Fraction(numerator, denominator)\n    # [End of Missing Code]\n    return result\n```",
        "[Solution Code]\n```python\nimport numpy as np\nfrom fractions import Fraction\nnumerator = 98\ndenominator = 42\n# [Begin of Missing Code]\nresult = Fraction(numerator, denominator)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([10, 20, 30])\nb = np.array([30, 20, 20])\nc = np.array([50, 20, 40])\n# [Begin of Missing Code]\nresult = (a + b + c) / 3\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.array([10, 20, 30])\nb = np.array([30, 20, 20])\nc = np.array([50, 20, 40])\n# [Begin of Missing Code]\nresult = np.maximum(a, b, c)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[ 0,  1,  2,  3,  4],\n   [ 5,  6,  7,  8,  9],\n   [10, 11, 12, 13, 14],\n   [15, 16, 17, 18, 19],\n   [20, 21, 22, 23, 24]])\n# [Begin of Missing Code]\nresult = np.diag(np.fliplr(a))\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[ 0,  1,  2,  3,  4, 5],\n   [ 5,  6,  7,  8,  9, 10],\n   [10, 11, 12, 13, 14, 15],\n   [15, 16, 17, 18, 19, 20],\n   [20, 21, 22, 23, 24, 25]])\n# [Begin of Missing Code]\nresult = np.diag(np.fliplr(a), k=1)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[ 0,  1,  2,  3,  4],\n   [ 5,  6,  7,  8,  9],\n   [10, 11, 12, 13, 14],\n   [15, 16, 17, 18, 19],\n   [20, 21, 22, 23, 24]])\n# [Begin of Missing Code]\nresult = np.diag(np.fliplr(a))\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[ 0,  1,  2,  3,  4, 5],\n   [ 5,  6,  7,  8,  9, 10],\n   [10, 11, 12, 13, 14, 15],\n   [15, 16, 17, 18, 19, 20],\n   [20, 21, 22, 23, 24, 25]])\n# [Begin of Missing Code]\ndiagonal = np.arange(a.shape[1]-1, -1, -1)\nresult = a[diagonal, diagonal[::-1]]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nX = np.random.randint(2, 10, (5, 6))\n# [Begin of Missing Code]\nresult = []\nfor row in X:\n    for element in row:\n        result.append(element)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nX = np.random.randint(2, 10, (5, 6))\n# [Begin of Missing Code]\nresult = X.flatten(order='C').tolist()\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nexample_X = np.random.randint(2, 10, (5, 6))\ndef f(X = example_X):\n    result = []\n    # [Begin of Missing Code]\n    for row in X:\n        for element in row:\n            result.append(element)\n    # [End of Missing Code]\n    return result\n```",
        "[Solution Code]\n```python\nimport numpy as np\nX = np.random.randint(2, 10, (5, 6))\n# [Begin of Missing Code]\nresult = []\nfor x in np.nditer(X, order='F'):\n    result.append(x)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nmystr = \"100110\"\n# [Begin of Missing Code]\nresult = np.array([int(i) for i in mystr])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.random.rand(8, 5)\ncol = 2\nmultiply_number = 5.2\n# [Begin of Missing Code]\nresult = np.cumsum(a[:, col] * multiply_number)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.random.rand(8, 5)\nrow = 2\nmultiply_number = 5.2\n# [Begin of Missing Code]\nresult = np.cumsum(a[row] * multiply_number)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.random.rand(8, 5)\nrow = 2\ndivide_number = 5.2\n# [Begin of Missing Code]\nresult = np.prod(a[row]/divide_number)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[0,1,0,0], [0,0,1,0], [0,1,1,0], [1,0,0,1]])\n# [Begin of Missing Code]\nresult = np.linalg.matrix_rank(a, tol=None)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.random.rand(np.random.randint(5, 10), np.random.randint(6, 10))\n# [Begin of Missing Code]\nresult = a.shape[1]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nimport scipy.stats\na = np.random.randn(40)\nb = 4*np.random.randn(50)\n# [Begin of Missing Code]\nt, p_value = scipy.stats.ttest_ind(a, b, equal_var=False)\n# [End of Missing Code]\nprint(p_value)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport scipy.stats\na = np.random.randn(40)\nb = 4*np.random.randn(50)\n# [Begin of Missing Code]\na = a[~np.isnan(a)]\nb = b[~np.isnan(b)]\nt, p_value = scipy.stats.ttest_ind(a, b, equal_var=False)\n# [End of Missing Code]\nprint(p_value)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport scipy.stats\namean = -0.0896\navar = 0.954\nanobs = 40\nbmean = 0.719\nbvar = 11.87\nbnobs = 50\n# [Begin of Missing Code]\ndf = anobs + bnobs - 2\ns_p = np.sqrt(((anobs - 1) * avar + (bnobs - 1) * bvar) / df)\nt = (amean - bmean) / (s_p * np.sqrt(1 / anobs + 1 / bnobs))\np_value = 2 * (1 - scipy.stats.t.cdf(abs(t), df))\n# [End of Missing Code]\nprint(p_value)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nA=np.asarray([[1,1,1], [1,1,2], [1,1,3], [1,1,4]])\nB=np.asarray([[0,0,0], [1,0,2], [1,0,3], [1,0,4], [1,1,0], [1,1,1], [1,1,4]])\n# [Begin of Missing Code]\noutput = np.array([x for x in A if not any(np.array_equal(x, y) for y in B)])\n# [End of Missing Code]\nprint(output)\n```",
        "```python\nimport numpy as np\nA=np.asarray([[1,1,1], [1,1,2], [1,1,3], [1,1,4]])\nB=np.asarray([[0,0,0], [1,0,2], [1,0,3], [1,0,4], [1,1,0], [1,1,1], [1,1,4]])\n# [Begin of Missing Code]\nset_A = set(map(tuple, A))\nset_B = set(map(tuple, B))\ndiff = np.array(list(set_A.symmetric_difference(set_B)))\noutput = np.array([list(x) for x in diff])\n# [End of Missing Code]\nprint(output)\n```",
        "```python\nimport numpy as np\na = np.random.rand(3, 3, 3)\nb = np.arange(3*3*3).reshape((3, 3, 3))\n# [Begin of Missing Code]\nsort_indices = np.argsort(a, axis=0)\nc = np.take_along_axis(b, sort_indices, axis=0)\n# [End of Missing Code]\nprint(c)\n```",
        "```python\nimport numpy as np\na = np.random.rand(3, 3, 3)\nb = np.arange(3*3*3).reshape((3, 3, 3))\n# [Begin of Missing Code]\nsort_indices = np.argsort(a, axis=0)\nc = np.take_along_axis(b, sort_indices, axis=0)\n# [End of Missing Code]\nprint(c)\n```",
        "```python\nimport numpy as np\na = np.random.rand(3, 3, 3)\nb = np.arange(3*3*3).reshape((3, 3, 3))\n# [Begin of Missing Code]\nsort_indices = np.argsort(a, axis=0)[::-1,:,:]\nc = b[sort_indices]\n# [End of Missing Code]\nprint(c)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.random.rand(3, 3, 3)\nb = np.arange(3*3*3).reshape((3, 3, 3))\n# [Begin of Missing Code]\nsums = np.sum(a, axis=(1,2))\nsorted_indices = np.argsort(sums)\nresult = b[sorted_indices]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])\n# [Begin of Missing Code]\na = np.delete(a, 2, axis=1)\n# [End of Missing Code]\nprint(a)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])\n# [Begin of Missing Code]\na = np.delete(a, 2, axis=0)\n# [End of Missing Code]\nprint(a)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])\n# [Begin of Missing Code]\na = np.delete(a, [0,2], axis=1)\n# [End of Missing Code]\nprint(a)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])\ndel_col = np.array([1, 2, 4, 5])\n# [Begin of Missing Code]\nresult = np.delete(a, del_col, axis=1)\nresult = result[:, 1:2]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.asarray([1,2,3,4])\npos = 2\nelement = 66\n# [Begin of Missing Code]\na = np.insert(a, pos, element)\n# [End of Missing Code]\nprint(a)\n```",
        "```python\nimport numpy as np\na = np.array([[1,2],[3,4]])\n\npos = 1\nelement = [3,5]\n# [Begin of Missing Code]\na = np.insert(a, pos, element, axis=0)\n# [End of Missing Code]\nprint(a)\n```",
        "```python\nimport numpy as np\nexample_a = np.asarray([1,2,3,4])\ndef f(a = example_a, pos=2, element = 66):\n    # [Begin of Missing Code]\n    a = np.insert(a, pos, element)\n    # [End of Missing Code]\n    return a\n```",
        "```python\nimport numpy as np\na = np.array([[1,2],[3,4]])\npos = [1, 2]\nelement = np.array([[3, 5], [6, 6]])\n# [Begin of Missing Code]\na = np.insert(a, pos, element, axis=0)\n# [End of Missing Code]\nprint(a)\n```",
        "[Solution Code]\n```python\nimport numpy as np\npairs = [(2, 3), (3, 4), (4, 5)]\narray_of_arrays = np.array([np.arange(a*b).reshape(a,b) for (a, b) in pairs])\n# [Begin of Missing Code]\nresult = np.array([np.copy(arr) for arr in array_of_arrays])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nresult = np.all(a == a[0,:], axis=0)\n```\n",
        "```python\nresult = np.all(a == a[:,0][:,None], axis=0)\n```",
        "```python\nimport numpy as np\nexample_a = np.repeat(np.arange(1, 6).reshape(1, -1), 3, axis = 0)\ndef f(a = example_a):\n    # [Begin of Missing Code]\n    result = np.all(a[1:] == a[:-1], axis=0)\n    # [End of Missing Code]\n    return result\n```",
        "[Solution Code]\n```python\nimport numpy as np\nfrom scipy.integrate import dblquad\n\ndef integrand(x, y):\n    return np.cos(x)**4 + np.sin(y)**2\n\nx = np.linspace(0, 1, 20)\ny = np.linspace(0, 1, 30)\n\n# [Begin of Missing Code]\nresult, _ = dblquad(integrand, y[0], y[-1], lambda x: x[0], lambda x: x[-1])\n# [End of Missing Code]\n\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nfrom scipy.integrate import simps\nexample_x = np.linspace(0, 1, 20)\nexample_y = np.linspace(0, 1, 30)\ndef f(x = example_x, y = example_y):\n    X, Y = np.meshgrid(x, y)\n    Z = np.cos(X)**4 + np.sin(Y)**2\n    result = simps(simps(Z, y), x)\n    return result\n```",
        "```python\nimport numpy as np\nfrom scipy.stats import percentileofscore\n\ngrades = np.array((93.5,93,60.8,94.5,82,87.5,91.5,99.5,86,93.5,92.5,78,76,69,94.5,\n          89.5,92.8,78,65.5,98,98.5,92.3,95.5,76,91,95,61))\n\n# [Begin of Missing Code]\ndef ecdf(x):\n    # normalize X to sum to 1\n    x = x / np.sum(x)\n    return np.cumsum(x)\n\nresult = ecdf(grades)(grades)\n# [End of Missing Code]\n\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nfrom scipy import stats\ngrades = np.array((93.5,93,60.8,94.5,82,87.5,91.5,99.5,86,93.5,92.5,78,76,69,94.5,\n          89.5,92.8,78,65.5,98,98.5,92.3,95.5,76,91,95,61))\neval = np.array([88, 87, 62])\n# [Begin of Missing Code]\nresult = stats.cumfreq(grades, numbins=len(grades))\nresult = result.cumcount / len(grades)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nfrom scipy.interpolate import interp1d\ngrades = np.array((93.5,93,60.8,94.5,82,87.5,91.5,99.5,86,93.5,92.5,78,76,69,94.5,\n          89.5,92.8,78,65.5,98,98.5,92.3,95.5,76,91,95,61))\nthreshold = 0.5\n# [Begin of Missing Code]\necdf = interp1d(np.sort(grades), np.linspace(0, 1, len(grades)), kind='previous')\nlow = grades.min()\nhigh = grades.max()\nwhile ecdf(high) >= threshold:\n    high -= 0.1\nwhile ecdf(low) < threshold:\n    low += 0.1\n# [End of Missing Code]\nprint(low, high)\n```",
        "[Solution Code]\n```python\nimport numpy as np\none_ratio = 0.9\nsize = 1000\n# [Begin of Missing Code]\nnums = np.random.choice([0, 1], size=size, p=[1-one_ratio, one_ratio])\n# [End of Missing Code]\nprint(nums)\n```",
        "[Solution Code]\n```python\nimport torch\nimport numpy as np\na = torch.ones(5)\n# [Begin of Missing Code]\na_np = a.numpy()\n# [End of Missing Code]\nprint(a_np)\n```",
        "[Solution Code]\n```python\nimport torch\nimport numpy as np\na = np.ones(5)\n# [Begin of Missing Code]\na_pt = torch.from_numpy(a)\n# [End of Missing Code]\nprint(a_pt)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\nimport numpy as np\na = tf.ones([2,3,4])\n# [Begin of Missing Code]\nsess = tf.compat.v1.Session()\na_np = sess.run(a)\n# [End of Missing Code]\nprint(a_np)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\nimport numpy as np\na = np.ones([2,3,4])\n# [Begin of Missing Code]\na_tf = tf.convert_to_tensor(a)\n# [End of Missing Code]\nprint(a_tf)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([4, 1, 0, 8, 5, 2])\n# [Begin of Missing Code]\nresult = np.argsort(a)[::-1]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([4, 1, 0, 8, 5, 2])\n# [Begin of Missing Code]\nresult = np.argsort(a)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.array([4, 1, 0, 8, 5, 2])\nN = 3\n# [Begin of Missing Code]\nresult = np.argsort(a)[::-1][:N]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nA = np.arange(16).reshape(4, 4)\nn = 5\n# [Begin of Missing Code]\nresult = np.linalg.matrix_power(A, n)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.array([[1,5,9,13],\n              [2,6,10,14],\n              [3,7,11,15],\n              [4,8,12,16]])\n# [Begin of Missing Code]\nresult = np.empty((a.shape[0]//2 * a.shape[1]//2, 2, 2), dtype=a.dtype)\nfor i in range(a.shape[0]//2):\n    for j in range(a.shape[1]//2):\n        result[i*a.shape[1]//2+j] = a[2*i:2*i+2, 2*j:2*j+2]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.array([[1,5,9,13],\n              [2,6,10,14],\n              [3,7,11,15],\n              [4,8,12,16]])\n# [Begin of Missing Code]\nresult = []\nfor i in range(a.shape[0]-1):\n    for j in range(a.shape[1]-1):\n        patch = a[i:i+2, j:j+2]\n        result.append(patch.tolist())\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[1,5,9,13],\n              [2,6,10,14],\n              [3,7,11,15],\n              [4,8,12,16]])\n# [Begin of Missing Code]\nresult = np.zeros((a.shape[0]//2, a.shape[1]//2, 2, 2))\nfor i in range(result.shape[0]):\n    for j in range(result.shape[1]):\n        result[i,j] = a[i*2:i*2+2, j*2:j*2+2]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.array([[1,5,9,13,17],\n              [2,6,10,14,18],\n              [3,7,11,15,19],\n              [4,8,12,16,20]])\npatch_size = 2\n# [Begin of Missing Code]\nresult = np.array([a[i:i+patch_size, j:j+patch_size] for i in range(0, a.shape[0]-patch_size+1, patch_size) for j in range(0, a.shape[1]-patch_size+1, patch_size)])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.array([[[ 0,  1,  2],\n        [ 6,  7,  8]],    \n       [[ 3,  4,  5],\n        [ 9, 10, 11]], \n       [[12, 13, 14],\n        [18, 19, 20]],    \n       [[15, 16, 17],\n        [21, 22, 23]]])\nh = 4\nw = 6\n# [Begin of Missing Code]\nresult = np.zeros((h, w))\nfor i in range(h):\n    for j in range(w):\n        result[i][j] = a[i//2, j//2, i%2, j%2]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.array([[1,5,9,13,17],\n              [2,6,10,14,18],\n              [3,7,11,15,19],\n              [4,8,12,16,20]])\npatch_size = 2\n# [Begin of Missing Code]\nresult = np.array([a[i:i+patch_size, j:j+patch_size] for i in range(0, a.shape[0]-patch_size+1, patch_size) for j in range(0, a.shape[1]-patch_size+1, patch_size)])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.array([[ 0,  1,  2,  3, 5, 6, 7, 8],\n              [ 4,  5,  6,  7, 5, 3, 2, 5],\n              [ 8,  9, 10, 11, 4, 5, 3, 5]])\nlow = 1\nhigh = 5\n# [Begin of Missing Code]\nresult = a[:, low:high+1]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.array([[ 0,  1,  2,  3, 5, 6, 7, 8],\n              [ 4,  5,  6,  7, 5, 3, 2, 5],\n              [ 8,  9, 10, 11, 4, 5, 3, 5]])\nlow = 0\nhigh = 2\n# [Begin of Missing Code]\nresult = a[low:high+1,:]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.array([[ 0,  1,  2,  3, 5, 6, 7, 8],\n              [ 4,  5,  6,  7, 5, 3, 2, 5],\n              [ 8,  9, 10, 11, 4, 5, 3, 5]])\nlow = 1\nhigh = 10\n# [Begin of Missing Code]\nresult = a[:, max(low, 0):min(high, a.shape[1])]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nstring = \"[[ 0.5544  0.4456], [ 0.8811  0.1189]]\"\n# [Begin of Missing Code]\na = np.array(eval(string))\n# [End of Missing Code]\nprint(a)\n```",
        "[Solution Code]\n```python\nimport numpy as np\n\nmin = 1\nmax = np.e\nn = 10000\n# [Begin of Missing Code]\nresult = np.exp(np.random.uniform(low=np.log(min), high=np.log(max), size=n))\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\n\nmin = 0\nmax = 1\nn = 10000\n# [Begin of Missing Code]\nresult = np.exp(np.random.uniform(low=np.log(min), high=np.log(max), size=n))\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\ndef f(min=1, max=np.e, n=10000):\n    # [Begin of Missing Code]\n    result = np.exp(np.random.uniform(low=np.log(min), high=np.log(max), size=n))\n    # [End of Missing Code]\n    return result\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nA = pd.Series(np.random.randn(10,))\na = 2\nb = 3\n# [Begin of Missing Code]\nB = pd.Series(index=A.index)\nB[0] = a * A[0]\nfor t in range(1, len(A)):\n    B[t] = a * A[t] + b * B[t-1]\n# [End of Missing Code]\nprint(B)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nA = pd.Series(np.random.randn(10,))\na = 2\nb = 3\nc = 4\n# [Begin of Missing Code]\nB = pd.Series(index=A.index)\nB[0] = a*A[0]\nB[1] = a*A[1]+b*B[0]\nfor t in range(2, len(A)):\n    B[t] = a * A[t] + b * B[t-1] + c * B[t-2]\n# [End of Missing Code]\nprint(B)\n```",
        "```python\nimport numpy as np\n# [Begin of Missing Code]\nresult = np.empty((0,))\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\n# [Begin of Missing Code]\nresult = np.empty((3,0))\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\ndims = (3, 4, 2)\na = np.random.rand(*dims)\nindex = (1, 0, 1)\n# [Begin of Missing Code]\nresult = np.ravel_multi_index(index, dims, order='F') + 1\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\ndims = (3, 4, 2)\na = np.random.rand(*dims)\nindex = (1, 0, 1)\n# [Begin of Missing Code]\nresult = np.ravel_multi_index(index, dims, order='C')\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nindex = ['x', 'y']\ncolumns = ['a','b','c']\n# [Begin of Missing Code]\nvalues = np.zeros((2,), dtype=[('a', 'i4'), ('b', 'f4'), ('c', 'f4')])\n# [End of Missing Code]\ndf = pd.DataFrame(data=values, index=index, columns=columns)\nprint(df)\n```",
        "```python\nimport numpy as np\na = np.arange(1,11)\naccmap = np.array([0,1,0,0,0,1,1,2,2,1])\n# [Begin of Missing Code]\nresult = np.bincount(accmap, weights=a)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.arange(1,11)\nindex = np.array([0,1,0,0,0,1,1,2,2,1])\n# [Begin of Missing Code]\nresult = np.zeros(np.max(index)+1)\nfor i in range(len(a)):\n    if a[i] > result[index[i]]:\n        result[index[i]] = a[i]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.arange(1,11)\naccmap = np.array([0,1,0,0,0,-1,-1,2,2,1])\n# [Begin of Missing Code]\nresult = np.zeros(np.max(accmap)+1)\nfor i in range(len(a)):\n    result[accmap[i]] += a[i]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.arange(1,11)\nindex = np.array([0,1,0,0,0,-1,-1,2,2,1])\n# [Begin of Missing Code]\nresult = np.zeros(np.max(index)+1)\nfor i in range(len(index)):\n    if index[i] >= 0:\n        if result[index[i]] == 0:\n            result[index[i]] = a[i]\n        else:\n            result[index[i]] = min(result[index[i]], a[i])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nx = [[2, 2, 2],\n     [2, 2, 2],\n     [2, 2, 2]]\ny = [[3, 3, 3],\n     [3, 3, 3],\n     [3, 3, 1]]\n# [Begin of Missing Code]\nz = np.vectorize(elementwise_function)(x, y)\n# [End of Missing Code]\nprint(z)\n```",
        "```python\nimport numpy as np\nprobabilit = [0.333, 0.334, 0.333]\nlista_elegir = [(3, 3), (3, 4), (3, 5)]\nsamples = 1000\n# [Begin of Missing Code]\nresult = np.random.choice(lista_elegir, samples, p=probabilit)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.ones((3, 3))\nlow_index = -1\nhigh_index = 2\n# [Begin of Missing Code]\nresult = np.zeros((high_index-low_index, high_index-low_index))\nresult[max(0, -low_index):min(high_index, a.shape[0]), max(0, -low_index):min(high_index, a.shape[1])] = a[max(0, low_index):min(high_index, a.shape[0]), max(0, low_index):min(high_index, a.shape[1])]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nx = np.array([-2, -1.4, -1.1, 0, 1.2, 2.2, 3.1, 4.4, 8.3, 9.9, 10, 14, 16.2])\n# [Begin of Missing Code]\nresult = x[x >= 0]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nx = np.array([-2+1j, -1.4, -1.1, 0, 1.2, 2.2+2j, 3.1, 4.4, 8.3, 9.9, 10+0j, 14, 16.2])\n# [Begin of Missing Code]\nresult = x[np.iscomplex(x)]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\ndata = np.array([4, 2, 5, 6, 7, 5, 4, 3, 5, 7])\nbin_size = 3\n# [Begin of Missing Code]\nnum_bins = len(data) // bin_size\ndata = data[:num_bins*bin_size]\nbin_data = data.reshape((num_bins, bin_size))\nbin_data_mean = np.mean(bin_data, axis=1)\n# [End of Missing Code]\nprint(bin_data_mean)\n```",
        "```python\nimport numpy as np\ndata = np.array([4, 2, 5, 6, 7, 5, 4, 3, 5, 7])\nbin_size = 3\n# [Begin of Missing Code]\nbin_data = np.array([data[i:i+bin_size] for i in range(0, len(data), bin_size)])\nbin_data_max = np.max(bin_data, axis=1)\n# [End of Missing Code]\nprint(bin_data_max)\n```",
        "```python\nimport numpy as np\ndata = np.array([[4, 2, 5, 6, 7],\n[ 5, 4, 3, 5, 7]])\nbin_size = 3\n# [Begin of Missing Code]\nn_bins = data.shape[1] // bin_size\nbin_data = data[:, :n_bins*bin_size].reshape(data.shape[0], n_bins, bin_size)\nbin_data_mean = np.mean(bin_data, axis=2)\n# [End of Missing Code]\nprint(bin_data_mean)\n```",
        "```python\nimport numpy as np\ndata = np.array([4, 2, 5, 6, 7, 5, 4, 3, 5, 7])\nbin_size = 3\n# [Begin of Missing Code]\nn = len(data)\nnum_bins = n // bin_size\nbin_data = np.zeros((num_bins, bin_size))\nfor i in range(num_bins):\n    bin_data[i] = data[n - (i+1)*bin_size : n - i*bin_size]\nbin_data_mean = np.mean(bin_data, axis=1)\n# [End of Missing Code]\nprint(bin_data_mean)\n```",
        "[Solution Code]\n```python\nimport numpy as np\ndata = np.array([[4, 2, 5, 6, 7],\n[ 5, 4, 3, 5, 7]])\nbin_size = 3\n# [Begin of Missing Code]\nn = data.shape[1]\nnum_bins = n // bin_size\nif n % bin_size != 0:\n    num_bins -= 1\nbin_data = np.array([data[:, i*bin_size:(i+1)*bin_size] for i in range(num_bins-1, -1, -1)])\nbin_data_mean = np.mean(bin_data, axis=1)\n# [End of Missing Code]\nprint(bin_data_mean)\n```",
        "[Solution Code]\n```python\nimport numpy as np\ndata = np.array([[4, 2, 5, 6, 7],\n[ 5, 4, 3, 5, 7]])\nbin_size = 3\n# [Begin of Missing Code]\nn_rows, n_cols = data.shape\nn_bins = n_cols // bin_size\nbin_data = np.zeros((n_rows, n_bins, bin_size))\nfor i in range(n_bins):\n    bin_data[:, i, :] = data[:, -bin_size*(i+1):-bin_size*i]\nbin_data_mean = np.mean(bin_data, axis=2)\n# [End of Missing Code]\nprint(bin_data_mean)\n```",
        "[Solution Code]\n```python\nimport numpy as np\n\ndef smoothclamp(x):\n    return 3*x**2 - 2*x**3\n\nx = 0.25\nx_min = 0\nx_max = 1\n\n# [Begin of Missing Code]\ndef clamp(x, x_min, x_max):\n    if x < x_min:\n        return smoothclamp(0)\n    elif x > x_max:\n        return smoothclamp(1)\n    else:\n        return smoothclamp((x-x_min)/(x_max-x_min))\n# [End of Missing Code]\n\nresult = clamp(x, x_min, x_max)\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nx = 0.25\nx_min = 0\nx_max = 1\nN = 5\n# [Begin of Missing Code]\ndef smoothstep(x, N):\n    return np.power(x, N) * np.power((1 - x), N) * (N * x + 1 - N * (1 - x))\n\ndef smoothclamp(x, N):\n    return x_min + (x_max - x_min) * smoothstep((x - x_min) / (x_max - x_min), N)\n# [End of Missing Code]\nresult = smoothclamp(x, N=N)\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nfrom scipy.signal import correlate\n\na = np.array([1,2,3,4])\nb = np.array([5, 4, 3, 2])\n\n# [Begin of Missing Code]\nresult = correlate(a, np.roll(b[::-1], 1), mode='valid')\n# [End of Missing Code]\n\nprint(result)\n```",
        "```python\nresult = df.values.reshape(4, 15, 5)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nnames = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen']\ntimes = [pd.Timestamp('2019-01-22 18:12:00'), pd.Timestamp('2019-01-22 18:13:00'), pd.Timestamp('2019-01-22 18:14:00'), pd.Timestamp('2019-01-22 18:15:00'), pd.Timestamp('2019-01-22 18:16:00')]\ndf = pd.DataFrame(np.random.randint(10, size=(15*5, 4)), index=pd.MultiIndex.from_product([names, times], names=['major','timestamp']), columns=list('colu'))\n# [Begin of Missing Code]\nresult = df.values.reshape((15, 4, 5))\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.array([1, 2, 3, 4, 5])\nm = 8\n# [Begin of Missing Code]\nresult = np.zeros((len(a), m), dtype=int)\nfor i in range(len(a)):\n    binary = bin(a[i])[2:].zfill(m)\n    result[i] = [int(x) for x in binary]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.array([1, 2, 3, 4, 5])\nm = 6\n# [Begin of Missing Code]\nresult = np.zeros((len(a), m), dtype=int)\nfor i, num in enumerate(a):\n    if num < 0:\n        num = 2**32 + num\n    binary = np.binary_repr(num, width=m)\n    result[i] = [int(digit) for digit in binary]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.array([1, 2, 3, 4, 5])\nm = 6\n# [Begin of Missing Code]\nresult = np.zeros((len(a), m), dtype=int)\nfor i in range(len(a)):\n    binary = np.binary_repr(a[i], width=m)\n    result[i] = [int(x) for x in binary]\nresult = np.bitwise_xor.reduce(result)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([0, 1, 2, 5, 6, 7, 8, 8, 8, 10, 29, 32, 45])\n# [Begin of Missing Code]\nmean = np.mean(a)\nstd = np.std(a)\nresult = (mean - 3*std, mean + 3*std)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([0, 1, 2, 5, 6, 7, 8, 8, 8, 10, 29, 32, 45])\n# [Begin of Missing Code]\nmean = np.mean(a)\nstd = np.std(a)\nresult = (mean - 2*std, mean + 2*std)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nexample_a = np.array([0, 1, 2, 5, 6, 7, 8, 8, 8, 10, 29, 32, 45])\ndef f(a = example_a):\n    # [Begin of Missing Code]\n    mean = np.mean(a)\n    std = np.std(a)\n    result = (mean - 3*std, mean + 3*std)\n    # [End of Missing Code]\n    return result\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([0, 1, 2, 5, 6, 7, 8, 8, 8, 10, 29, 32, 45])\n# [Begin of Missing Code]\nmean = np.mean(a)\nstd = np.std(a)\nsecond_std = 2 * std\nupper_bound = mean + second_std\nlower_bound = mean - second_std\nresult = np.logical_or(a > upper_bound, a < lower_bound)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nDataArray = np.arange(-5.5, 10.5)\npercentile = 50\n# [Begin of Missing Code]\nmasked_data = ma.masked_where(DataArray < 0, DataArray)\nprob = np.ma.percentile(masked_data, percentile)\n# [End of Missing Code]\nprint(prob)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[0, 3, 1, 3], [3, 0, 0, 0], [1, 0, 0, 0], [3, 0, 0, 0]])\nzero_rows = 0\nzero_cols = 0\n# [Begin of Missing Code]\na[zero_rows,:] = 0\na[:,zero_cols] = 0\n# [End of Missing Code]\nprint(a)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[0, 3, 1, 3], [3, 0, 0, 0], [1, 0, 0, 0], [3, 0, 0, 0]])\nzero_rows = [1, 3]\nzero_cols = [1, 2]\n# [Begin of Missing Code]\na[zero_rows, :] = 0\na[:, zero_cols] = 0\n# [End of Missing Code]\nprint(a)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[0, 3, 1, 3], [3, 0, 0, 0], [1, 0, 0, 0], [3, 0, 0, 0]])\n# [Begin of Missing Code]\na[1,:] = 0\na[:,0] = 0\n# [End of Missing Code]\nprint(a)\n```",
        "```python\nimport numpy as np\na = np.array([[0, 1], [2, 1], [4, 8]])\n# [Begin of Missing Code]\nmask = (a == np.amax(a, axis=1)[:, None])\n# [End of Missing Code]\nprint(mask)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[0, 1], [2, 1], [4, 8]])\n# [Begin of Missing Code]\nmin_values = np.min(a, axis=1)\nmask = (a == min_values[:, None])\n# [End of Missing Code]\nprint(mask)\n```",
        "[Solution Code]\n```python\nimport numpy as np\npost = [2, 5, 6, 10]\ndistance = [50, 100, 500, 1000]\n# [Begin of Missing Code]\nresult = np.corrcoef(post, distance)[0, 1]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nX = np.random.randint(2, 10, (5, 6))\n# [Begin of Missing Code]\nresult = np.einsum('ij,ik->jik', X, X)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nY = np.array([[[81, 63, 63],\n        [63, 49, 49],\n        [63, 49, 49]],\n\n       [[ 4, 12,  8],\n        [12, 36, 24],\n        [ 8, 24, 16]],\n\n       [[25, 35, 25],\n        [35, 49, 35],\n        [25, 35, 25]],\n\n       [[25, 30, 10],\n        [30, 36, 12],\n        [10, 12,  4]]])\n# [Begin of Missing Code]\nX = np.zeros((Y.shape[1], Y.shape[0]))\nfor i in range(Y.shape[0]):\n    X[:, i] = np.linalg.cholesky(Y[i])\n# [End of Missing Code]\nprint(X)\n```",
        "```python\nimport numpy as np\na = np.array([9, 2, 7, 0])\nnumber = 0\n# [Begin of Missing Code]\nis_contained = np.isin(a, number)\n# [End of Missing Code]\nprint(is_contained)\n```",
        "```python\nimport numpy as np\nA = np.array([1,1,2,3,3,3,4,5,6,7,8,8])\nB = np.array([1,2,8])\n# [Begin of Missing Code]\nmask = np.isin(A, B, invert=True)\nC = A[mask]\n# [End of Missing Code]\nprint(C)\n```",
        "```python\nimport numpy as np\nA = np.array([1,1,2,3,3,3,4,5,6,7,8,8])\nB = np.array([1,2,8])\n# [Begin of Missing Code]\nC = np.intersect1d(A, B, assume_unique=True)\n# [End of Missing Code]\nprint(C)\n```",
        "```python\nimport numpy as np\nA = np.array([1,1,2,3,3,3,4,5,6,7,8,8])\nB = np.array([1,4,8])\n# [Begin of Missing Code]\nC = np.extract(np.logical_or.reduce([np.logical_and(A>=B[i], A<B[i+1]) for i in range(len(B)-1)]), A)\n# [End of Missing Code]\nprint(C)\n```",
        "```python\nimport numpy as np\nfrom scipy.stats import rankdata\na = [1,2,3,4,3,2,3,4]\n# [Begin of Missing Code]\nresult = len(a) + 1 - rankdata(a).astype(int)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nfrom scipy.stats import rankdata\na = [1,2,3,4,3,2,3,4]\n# [Begin of Missing Code]\nunique_a = np.unique(a)[::-1]\nresult = np.zeros(len(a), dtype=int)\nfor i, val in enumerate(unique_a):\n    idx = np.where(a == val)[0]\n    result[idx] = i + 1\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nfrom scipy.stats import rankdata\nexample_a = [1,2,3,4,3,2,3,4]\ndef f(a = example_a):\n    # [Begin of Missing Code]\n    result = len(a) + 1 - rankdata(a).astype(int)\n    # [End of Missing Code]\n    return result\n```",
        "```python\nimport numpy as np\nx_dists = np.array([[ 0, -1, -2],\n                 [ 1,  0, -1],\n                 [ 2,  1,  0]])\n\ny_dists = np.array([[ 0, 1, -2],\n                 [ -1,  0, 1],\n                 [ -2,  1,  0]])\n# [Begin of Missing Code]\ndists = np.stack((x_dists, y_dists), axis=-1)\n# [End of Missing Code]\nprint(dists)\n```",
        "```python\nimport numpy as np\nx_dists = np.array([[ 0, -1, -2],\n                 [ 1,  0, -1],\n                 [ 2,  1,  0]])\n\ny_dists = np.array([[ 0, -1, -2],\n                 [ 1,  0, -1],\n                 [ 2,  1,  0]])\n# [Begin of Missing Code]\ndists = np.stack((x_dists, y_dists), axis=2)\n# [End of Missing Code]\nprint(dists)\n```",
        "```python\nimport numpy as np\na = np.random.rand(5, 5, 5)\nsecond = [1, 2]\nthird = [3, 4]\n# [Begin of Missing Code]\nresult = a[:, second, third]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\n# [Begin of Missing Code]\narr = np.zeros((20,10,10,2))\n# [End of Missing Code]\nprint(arr)\n```",
        "[Solution Code]\n```python\nfrom numpy import linalg as LA\nimport numpy as np\nX = np.array([[1, -2, 3, 6],\n              [4, 5, -6, 5],\n              [-1, 2, 5, 5],\n              [4, 5,10,-25],\n              [5, -2,10,25]])\n# [Begin of Missing Code]\nl1 = LA.norm(X, ord=1, axis=1)\nresult = X / l1.reshape(-1, 1)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nfrom numpy import linalg as LA\nimport numpy as np\nX = np.array([[1, -2, 3, 6],\n              [4, 5, -6, 5],\n              [-1, 2, 5, 5],\n              [4, 5,10,-25],\n              [5, -2,10,25]])\n# [Begin of Missing Code]\nresult = X / LA.norm(X, axis=1, keepdims=True)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nfrom numpy import linalg as LA\nimport numpy as np\nX = np.array([[1, -2, 3, 6],\n              [4, 5, -6, 5],\n              [-1, 2, 5, 5],\n              [4, 5,10,-25],\n              [5, -2,10,25]])\n# [Begin of Missing Code]\nresult = X / np.max(np.abs(X), axis=1, keepdims=True)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\ndf = pd.DataFrame({'a': [1, 'foo', 'bar']})\ntarget = 'f'\nchoices = ['XX']\n# [Begin of Missing Code]\nconditions = df['a'].astype(str).str.contains(target)\nresult = np.select(conditions, choices, default=np.nan)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nfrom scipy.spatial.distance import cdist\na = np.array([[1,2,8],\n     [7,4,2],\n     [9,1,7],\n     [0,1,5],\n     [6,4,3]])\n# [Begin of Missing Code]\nresult = cdist(a, a)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\ndim = np.random.randint(4, 8)\na = np.random.rand(np.random.randint(5, 10),dim)\n# [Begin of Missing Code]\nfrom scipy.spatial.distance import cdist\nresult = cdist(a, a)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\ndim = np.random.randint(4, 8)\na = np.random.rand(np.random.randint(5, 10),dim)\n# [Begin of Missing Code]\nfrom scipy.spatial.distance import pdist, squareform\nresult = squareform(pdist(a))\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nA = ['33.33', '33.33', '33.33', '33.37']\nNA = np.asarray(A, dtype=np.float32)\nAVG = np.mean(NA, axis=0)\nprint(AVG)\n```\n",
        "```python\nimport numpy as np\nA = ['inf', '33.33', '33.33', '33.37']\nNA = np.asarray(A, dtype=np.float)\nAVG = np.mean(NA, axis=0)\nprint(AVG)\n```\nNote: The missing code is `dtype=np.float`. This converts the elements of the list A to float type, which is necessary for the mean calculation.",
        "```python\nimport numpy as np\nA = ['np.inf', '33.33', '33.33', '33.37']\nNA = np.asarray(A)\n# [Begin of Missing Code]\nA = [float(i) if i != 'np.inf' else np.inf for i in A]\nNA = np.asarray(A)\nAVG = np.mean(NA, axis=0)\n# [End of Missing Code]\nprint(AVG)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([0, 0, 1, 1, 1, 2, 2, 0, 1, 3, 3, 3])\n# [Begin of Missing Code]\nresult = []\nprev = None\nfor i in a:\n    if i != 0 and i != prev:\n        result.append(i)\n        prev = i\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([0, 0, 1, 1, 1, 2, 2, 0, 1, 3, 3, 3]).reshape(-1, 1)\n# [Begin of Missing Code]\nresult = []\nprev = None\nfor i in a:\n    if i != 0 and i != prev:\n        result.append(i)\n        prev = i\nresult = np.array(result).reshape(-1, 1)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nlat=np.array([[10, 20, 30],\n              [20, 11, 33],\n              [21, 20, 10]])\n\nlon=np.array([[100, 102, 103],\n              [105, 101, 102],\n              [100, 102, 103]])\n\nval=np.array([[17, 2, 11],\n              [86, 84, 1],\n              [9, 5, 10]])\n# [Begin of Missing Code]\ndf = pd.DataFrame({'lat': lat.flatten(), 'lon': lon.flatten(), 'val': val.flatten()})\n# [End of Missing Code]\nprint(df)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nexample_lat=np.array([[10, 20, 30],\n              [20, 11, 33],\n              [21, 20, 10]])\n\nexample_lon=np.array([[100, 102, 103],\n              [105, 101, 102],\n              [100, 102, 103]])\n\nexample_val=np.array([[17, 2, 11],\n              [86, 84, 1],\n              [9, 5, 10]])\ndef f(lat = example_lat, lon = example_lon, val = example_val):\n    # [Begin of Missing Code]\n    df = pd.DataFrame({'lat': lat.flatten(), 'lon': lon.flatten(), 'val': val.flatten()})\n    # [End of Missing Code]\n    return df\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nlat=np.array([[10, 20, 30],\n              [20, 11, 33],\n              [21, 20, 10]])\n\nlon=np.array([[100, 102, 103],\n              [105, 101, 102],\n              [100, 102, 103]])\n\nval=np.array([[17, 2, 11],\n              [86, 84, 1],\n              [9, 5, 10]])\n\n# [Begin of Missing Code]\ndf = pd.DataFrame({'lat': lat.flatten(),\n                   'lon': lon.flatten(),\n                   'val': val.flatten()})\ndf['maximum'] = df[['lat', 'lon', 'val']].max(axis=1)\n# [End of Missing Code]\n\nprint(df)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\na = np.array([[1,2,3,4],\n       [2,3,4,5],\n       [3,4,5,6],\n       [4,5,6,7]])\nsize = (3, 3)\n\n# [Begin of Missing Code]\nheight, width = a.shape\nh, w = size\nshape = (height - h + 1, width - w + 1, h, w)\nstrides = a.strides + a.strides\nresult = as_strided(a, shape=shape, strides=strides)\n# [End of Missing Code]\n\nprint(result)\n```",
        "```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\na = np.array([[1,2,3,4],\n       [2,3,4,5],\n       [3,4,5,6],\n       [4,5,6,7]])\nsize = (3, 3)\n\n# [Begin of Missing Code]\nheight, width = a.shape\nh, w = size\nshape = (height - h + 1, width - w + 1, h, w)\nstrides = a.strides + a.strides\nresult = as_strided(a, shape=shape, strides=strides)\n# [End of Missing Code]\n\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([1 + 0j, 2 + 0j, np.inf + 0j])\n# [Begin of Missing Code]\nresult = np.nanmean(a)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\ndef f(a = np.array([1 + 0j, 2 + 3j, np.inf + 0j])):\n    # [Begin of Missing Code]\n    real_mean = np.mean(a.real)\n    imag_mean = np.mean(a.imag)\n    result = real_mean + imag_mean * 1j\n    # [End of Missing Code]\n    return result\n```",
        "[Solution Code]\n```python\nimport numpy as np\nZ = np.random.rand(*np.random.randint(2, 10, (np.random.randint(2, 10))))\n# [Begin of Missing Code]\nresult = Z[..., -1:]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.random.rand(*np.random.randint(2, 10, (np.random.randint(2, 10))))\n# [Begin of Missing Code]\nresult = a[np.index_exp[-1:] + (slice(None),) * (a.ndim - 1)]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nc = np.array([[[ 75, 763]],\n              [[ 57, 763]],\n              [[ 57, 749]],\n              [[ 75, 749]]])\nCNTS = [np.array([[[  78, 1202]],\n                  [[  63, 1202]],\n                  [[  63, 1187]],\n                  [[  78, 1187]]]),\n        np.array([[[ 75, 763]],\n                  [[ 57, 763]],\n                  [[ 57, 749]],\n                  [[ 75, 749]]]),\n        np.array([[[ 72, 742]],\n                  [[ 58, 742]],\n                  [[ 57, 741]],\n                  [[ 57, 727]],\n                  [[ 58, 726]],\n                  [[ 72, 726]]]),\n        np.array([[[ 66, 194]],\n                  [[ 51, 194]],\n                  [[ 51, 179]],\n                  [[ 66, 179]]])]\n# [Begin of Missing Code]\nresult = any(np.array_equal(c, x) for x in CNTS)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nresult = False\nfor cnt in CNTS:\n    if np.array_equal(c, cnt):\n        result = True\n        break\nprint(result)\n```",
        "```python\nimport numpy as np\nfrom scipy import interpolate as intp\na = np.arange(0, 4, 1).reshape(2, 2)\na = a.repeat(2, axis=0).repeat(2, axis=1)\nx_new = np.linspace(0, 2, 4)\ny_new = np.linspace(0, 2, 4)\n# [Begin of Missing Code]\nf = intp.interp2d(np.arange(0, 4, 1), np.arange(0, 4, 1), a, kind='linear')\nresult = f(x_new, y_new)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\ndata = {'D':[2015,2015,2015,2015,2016,2016,2016,2017,2017,2017], 'Q':np.arange(10)}\nname= 'Q_cum'\n# [Begin of Missing Code]\ndf['Q_cum'] = df.groupby('D')['Q'].cumsum()\n# [End of Missing Code]\nprint(df)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.matrix([[3, 4, 3, 1],[1,3,2,6],[2,4,1,5],[3,3,5,2]])\nU, i, V = np.linalg.svd(a,full_matrices=True)\n# [Begin of Missing Code]\ni = np.diag(i)\n# [End of Missing Code]\nprint(i)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([[1,0,2,3],[0,5,3,4],[2,3,2,10],[3,4, 10, 7]])\n# [Begin of Missing Code]\na[~np.eye(a.shape[0], dtype=bool)] = 0\n# [End of Missing Code]\nprint(a)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta\n\nstart = \"23-FEB-2015 23:09:19.445506\"\nend = \"24-FEB-2015 01:09:22.404973\"\nn = 50\n\n# [Begin of Missing Code]\nstart_dt = datetime.strptime(start, '%d-%b-%Y %H:%M:%S.%f')\nend_dt = datetime.strptime(end, '%d-%b-%Y %H:%M:%S.%f')\ndelta = (end_dt - start_dt) / (n-1)\nresult = pd.date_range(start=start_dt, end=end_dt, periods=n)\nresult = [str(x) for x in result]\n# [End of Missing Code]\n\nprint(result)\n```",
        "```python\nimport numpy as np\nx = np.array([0, 1, 1, 1, 3, 1, 5, 5, 5])\ny = np.array([0, 2, 3, 4, 2, 4, 3, 4, 5])\na = 1\nb = 4\n# [Begin of Missing Code]\nresult = np.where((x == a) & (y == b))[0]\nif len(result) > 0:\n    result = result[0]\nelse:\n    result = -1\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nx = np.array([0, 1, 1, 1, 3, 1, 5, 5, 5])\ny = np.array([0, 2, 3, 4, 2, 4, 3, 4, 5])\na = 1\nb = 4\n# [Begin of Missing Code]\nresult = np.where((x == a) & (y == b))[0]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nx = [-1, 2, 5, 100]\ny = [123, 456, 789, 1255]\n# [Begin of Missing Code]\nA = np.vstack([x**2, x, np.ones(len(x))]).T\nresult = np.linalg.lstsq(A, y, rcond=None)[0]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nx = [-1, 2, 5, 100]\ny = [123, 456, 789, 1255]\ndegree = 3\n# [Begin of Missing Code]\nresult = np.polyfit(x, y, degree)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\na = np.arange(4)\ndf = pd.DataFrame(np.repeat([1, 2, 3, 4], 4).reshape(4, -1))\n# [Begin of Missing Code]\ndf = df.apply(lambda x: x - a)\n# [End of Missing Code]\nprint(df)\n```",
        "```python\nimport numpy as np\nA = np.random.rand(5, 6, 3)\nB = np.random.rand(3, 3)\n# [Begin of Missing Code]\nresult = np.matmul(A, B.T)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\na = np.array([[-1, 2], [-0.5, 6]])\n# [Begin of Missing Code]\nscaler = MinMaxScaler()\nresult = scaler.fit_transform(a.reshape(-1,1)).reshape(a.shape)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\narr = np.array([[1.0,2.0,3.0],[0.1, 5.1, 100.1],[0.01, 20.1, 1000.1]])\n# [Begin of Missing Code]\nscaler = MinMaxScaler()\nresult = []\nfor row in arr:\n    X_max = np.max(row)\n    X_min = np.min(row)\n    row_rescaled = [(X - X_min)/(X_max - X_min) for X in row]\n    result.append(row_rescaled)\nresult = np.array(result)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\na = np.array([[[1, 0.5, -2], [-0.5,1, 6], [1,1,1]], [[-2, -3, 1], [-0.5, 10, 6], [1,1,1]]])\n# [Begin of Missing Code]\nscaler = MinMaxScaler()\nresult = np.array([scaler.fit_transform(matrix) for matrix in a])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\narr = (np.random.rand(100, 50)-0.5) * 50\n# [Begin of Missing Code]\narr_temp = arr.copy()\nmask = arr_temp < -10\nmask2 = arr_temp >= 15\narr[mask] = 0\narr[mask2] = 30\narr[~(mask | mask2)] += 5\n# [End of Missing Code]\nprint(arr)\n```",
        "```python\nimport numpy as np\narr = (np.random.rand(5, 50)-0.5) * 50\nn1 = [1,2,3,4,5]\nn2 = [6,7,8,9,10]\n# [Begin of Missing Code]\nfor i in range(arr.shape[0]):\n    mask1 = arr[i] < n1[i]\n    mask2 = arr[i] >= n2[i]\n    mask3 = ~(mask1 | mask2)\n    arr[i][mask1] = 0\n    arr[i][mask2] = 30\n    arr[i][mask3] += 5\n# [End of Missing Code]\nprint(arr)\n```",
        "```python\nimport numpy as np\nn = 20\nm = 10\ntag = np.random.rand(n, m)\ns1 = np.sum(tag, axis=1)\ns2 = np.sum(tag[:, ::-1], axis=1)\n# [Begin of Missing Code]\nresult = np.count_nonzero(np.isclose(s1, s2))\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nn = 20\nm = 10\ntag = np.random.rand(n, m)\ns1 = np.sum(tag, axis=1)\ns2 = np.sum(tag[:, ::-1], axis=1)\ns1 = np.append(s1, np.nan)\ns2 = np.append(s2, np.nan)\n# [Begin of Missing Code]\ns1[np.isnan(s1)] = 0\ns2[np.isnan(s2)] = 0\nresult = np.count_nonzero(np.abs(s1 - s2) > np.finfo(float).eps)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = [np.array([1,2,3]),np.array([1,2,3]),np.array([1,2,3])]\n# [Begin of Missing Code]\nresult = all(np.array_equal(a[i], a[i+1]) for i in range(len(a)-1))\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = [np.array([np.nan,2,3]),np.array([1,np.nan,3]),np.array([1,2,np.nan])]\n# [Begin of Missing Code]\nresult = all(np.isnan(x).all() for x in a)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.ones((41, 13))\nshape = (93, 13)\n# [Begin of Missing Code]\nresult = np.zeros(shape)\nresult[:a.shape[0], :a.shape[1]] = a\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.ones((41, 12))\nshape = (93, 13)\n# [Begin of Missing Code]\nresult = np.zeros(shape)\nresult[:a.shape[0], :a.shape[1]] = a\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.ones((41, 12))\nshape = (93, 13)\nelement = 5\n# [Begin of Missing Code]\nresult = np.zeros(shape)\nresult[:a.shape[0], :a.shape[1]] = a\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nexample_arr = np.ones((41, 13))\ndef f(arr = example_arr, shape=(93,13)):\n    # [Begin of Missing Code]\n    result = np.zeros(shape)\n    result[:arr.shape[0], :arr.shape[1]] = arr\n    # [End of Missing Code]\n    return result\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.ones((41, 12))\nshape = (93, 13)\n# [Begin of Missing Code]\nresult = np.zeros(shape)\nresult[:a.shape[0], :a.shape[1]] = a\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.arange(12)\n# [Begin of Missing Code]\na = a.reshape(int(a.shape[0]/3), 3)\n# [End of Missing Code]\nprint(a)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array( \n    [[[ 0,  1],\n     [ 2,  3],\n     [ 4,  5]],\n    [[ 6,  7],\n     [ 8,  9],\n     [10, 11]],\n    [[12, 13],\n     [14, 15],\n     [16, 17]]]\n)\nb = np.array( \n    [[0, 1, 1],\n    [1, 0, 1],\n    [1, 1, 0]]\n)\n# [Begin of Missing Code]\nresult = np.choose(b, a.transpose(2, 0, 1)).T\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array( # dims: 3x3x2\n    [[[ 0,  1],\n     [ 2,  3],\n     [ 4,  5]],\n    [[ 6,  7],\n     [ 8,  9],\n     [10, 11]],\n    [[12, 13],\n     [14, 15],\n     [16, 17]]]\n)\nb = np.array( # dims: 3x3\n    [[1, 1, 1],\n    [1, 1, 1],\n    [1, 1, 1]]\n)\n# [Begin of Missing Code]\nresult = a[:,:,1] * b\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array( \n    [[[ 0,  1, 2, 3],\n     [ 2,  3, 4, 5],\n     [ 4,  5, 6, 7]],\n    [[ 6,  7, 8, 9],\n     [ 8,  9, 10, 11],\n     [10, 11, 12, 13]],\n    [[12, 13, 14, 15],\n     [14, 15, 16, 17],\n     [16, 17, 18, 19]]]\n)\nb = np.array( \n    [[0, 1, 2],\n    [2, 1, 3],\n[1, 0, 3]]\n)\n# [Begin of Missing Code]\nresult = a[np.arange(a.shape[0])[:,None], np.arange(a.shape[1]), b]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array( \n    [[[ 0,  1, 2, 3],\n     [ 2,  3, 4, 5],\n     [ 4,  5, 6, 7]],\n    [[ 6,  7, 8, 9],\n     [ 8,  9, 10, 11],\n     [10, 11, 12, 13]],\n    [[12, 13, 14, 15],\n     [14, 15, 16, 17],\n     [16, 17, 18, 19]]]\n)\nb = np.array( \n    [[0, 1, 2],\n    [2, 1, 3],\n[1, 0, 3]]\n)\n# [Begin of Missing Code]\nresult = np.sum(a[np.arange(a.shape[0])[:,None,None], np.arange(a.shape[1])[None,:,None], b], axis=2).sum()\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\na = np.array( \n    [[[ 0,  1, 2, 3],\n     [ 2,  3, 4, 5],\n     [ 4,  5, 6, 7]],\n    [[ 6,  7, 8, 9],\n     [ 8,  9, 10, 11],\n     [10, 11, 12, 13]],\n    [[12, 13, 14, 15],\n     [14, 15, 16, 17],\n     [16, 17, 18, 19]]]\n)\nb = np.array( \n    [[0, 1, 2],\n    [2, 1, 3],\n[1, 0, 3]]\n)\n# [Begin of Missing Code]\nresult = np.sum(a[np.arange(a.shape[0])[:,None,None], np.arange(a.shape[1])[None,:,None], b] )\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\ndata = {'a': [1, 2, 3, 4, 5], 'b': [2, -6, 0, -4, 100]}\ndf = pd.DataFrame(data)\n# [Begin of Missing Code]\nresult = np.where((df['a'] > 1) & (df['a'] <= 4), df['b'], np.nan)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nim = np.array([[0,0,0,0,0,0],\n               [0,0,1,1,1,0],\n               [0,1,1,0,1,0],\n               [0,0,0,1,1,0],\n               [0,0,0,0,0,0]])\n# [Begin of Missing Code]\nresult = im[(im != 0).any(axis=1)][:, (im != 0).any(axis=0)]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nA = np.array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 0, 0, 0],\n           [0, 0, 1, 1, 0, 0, 0],\n           [0, 0, 0, 0, 1, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n# [Begin of Missing Code]\nnonzero_rows, nonzero_cols = np.nonzero(A)\nresult = A[min(nonzero_rows):max(nonzero_rows)+1, min(nonzero_cols):max(nonzero_cols)+1]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nim = np.array([[1,1,1,1,1,5],\n               [1,0,0,1,2,0],\n               [2,1,0,0,1,0],\n               [1,0,0,7,1,0],\n               [1,0,0,0,0,0]])\n# [Begin of Missing Code]\nresult = im.copy()\nwhile np.sum(result[0]) == 0:\n    result = result[1:]\nwhile np.sum(result[-1]) == 0:\n    result = result[:-1]\nwhile np.sum(result[:,0]) == 0:\n    result = result[:,1:]\nwhile np.sum(result[:,-1]) == 0:\n    result = result[:,:-1]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nim = np.array([[0,0,0,0,0,0],\n               [0,0,5,1,2,0],\n               [0,1,8,0,1,0],\n               [0,0,0,7,1,0],\n               [0,0,0,0,0,0]])\n# [Begin of Missing Code]\nresult = im[~np.all(im == 0, axis=1)]\nresult = result[:, ~np.all(result == 0, axis=0)]\n# [End of Missing Code]\nprint(result)\n```"
    ],
    "Matplotlib": [
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = 10 * np.random.randn(10)\ny = x\n\n# plot x vs y, label them using \"x-y\" in the legend\n# SOLUTION START\nplt.plot(x, y, label=\"x-y\")\nplt.legend()\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nplt.scatter(x, y)\n\n# how to turn on minor ticks on y axis only\n# SOLUTION START\nplt.minorticks_on()\nplt.gca().yaxis.set_minor_locator(plt.MultipleLocator(0.1))\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nplt.scatter(x, y)\n\n# how to turn on minor ticks\n# SOLUTION START\nplt.minorticks_on()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nplt.scatter(x, y)\n\n# how to turn on minor ticks on x axis only\n# SOLUTION START\nplt.minorticks_on()\nplt.gca().xaxis.set_minor_locator(plt.MultipleLocator(0.1))\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.arange(10)\n\n# draw a line (with random y) for each different line style\n# SOLUTION START\nstyles = ['-', '--', '-.', ':']\nfor i, style in enumerate(styles):\n    y = np.random.rand(10)\n    plt.plot(x, y, linestyle=style, label=f'Line {i+1}')\nplt.legend()\nplt.show()\n# SOLUTION END\n```\n\nThe code above generates a plot with 4 lines, each with a different line style (`-`, `--`, `-.`, `:`). The y values for each line are generated randomly using `np.random.rand(10)`. The `enumerate` function is used to keep track of the line number and add a label to each line. Finally, `plt.legend()` is used to add a legend to the plot.",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.arange(10)\n\n# draw a line (with random y) for each different line style\n# SOLUTION START\nstyles = ['-', '--', '-.', ':']\nfor i, style in enumerate(styles):\n    y = np.random.rand(10)\n    plt.plot(x, y, linestyle=style, label=f'Line {i+1}')\nplt.legend()\nplt.show()\n# SOLUTION END\n```\n\nThe code above generates a plot with 4 lines, each with a different line style (`-`, `--`, `-.`, `:`). The y values for each line are generated randomly using `np.random.rand(10)`. The `enumerate` function is used to keep track of the line number and add a label to each line. Finally, `plt.legend()` is used to add a legend to the plot.",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.arange(10)\ny = np.random.randn(10)\n\n# line plot x and y with a thin diamond marker\n# SOLUTION START\nplt.plot(x, y, '-D', linewidth=1, markersize=4)\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.arange(10)\ny = np.random.randn(10)\n\n# line plot x and y with a thick diamond marker\n# SOLUTION START\nplt.plot(x, y, '-D', linewidth=2, markersize=10)\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_style(\"whitegrid\")\ntips = sns.load_dataset(\"tips\")\nax = sns.boxplot(x=\"day\", y=\"total_bill\", data=tips)\n\n# set the y axis limit to be 0 to 40\n# SOLUTION START\nax.set_ylim(0, 40)\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = 10 * np.random.randn(10)\n\nplt.plot(x)\n\n# highlight in red the x range 2 to 4\n# SOLUTION START\nplt.axvspan(2, 4, facecolor='r', alpha=0.5)\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# draw a full line from (0,0) to (1,2)\n# SOLUTION START\nx = np.array([0, 1])\ny = np.array([0, 2])\nplt.plot(x, y)\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# draw a line segment from (0,0) to (1,2)\n# SOLUTION START\nplt.plot([0,1],[0,2])\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy\nimport pandas\nimport matplotlib.pyplot as plt\nimport seaborn\n\nseaborn.set(style=\"ticks\")\n\nnumpy.random.seed(0)\nN = 37\n_genders = [\"Female\", \"Male\", \"Non-binary\", \"No Response\"]\ndf = pandas.DataFrame(\n    {\n        \"Height (cm)\": numpy.random.uniform(low=130, high=200, size=N),\n        \"Weight (kg)\": numpy.random.uniform(low=30, high=100, size=N),\n        \"Gender\": numpy.random.choice(_genders, size=N),\n    }\n)\n\n# make seaborn relation plot and color by the gender field of the dataframe df\n# SOLUTION START\nseaborn.relplot(x=\"Height (cm)\", y=\"Weight (kg)\", hue=\"Gender\", data=df)\nplt.show()\n# SOLUTION END\n```\n\nThe code generates a scatter plot of height and weight, with the points colored by gender.",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.arange(10)\ny = 2 * np.random.rand(10)\n\n# draw a regular matplotlib style plot using seaborn\n# SOLUTION START\nsns.set_style(\"whitegrid\")\nplt.plot(x, y)\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.sin(x)\n\n# draw a line plot of x vs y using seaborn and pandas\n# SOLUTION START\ndf = pd.DataFrame({'x': x, 'y': y})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n# SOLUTION END\n```\n\nThe code creates a pandas DataFrame with `x` and `y` as columns, and then uses seaborn's `lineplot` function to draw a line plot of `x` vs `y`. Finally, `plt.show()` is used to display the plot.",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n# in plt.plot(x, y), use a plus marker and give it a thickness of 7\n# SOLUTION START\nplt.plot(x, y, marker='+', markersize=7)\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\n\nplt.plot(x, y, label=\"sin\")\n\n# show legend and set the font to size 20\n# SOLUTION START\nplt.legend(fontsize=20)\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\n\n# set legend title to xyz and set the title font to size 20\n# SOLUTION START\nplt.plot(x, y, label='cos(x)')\nplt.legend(title='xyz', title_fontsize=20)\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n(l,) = plt.plot(range(10), \"o-\", lw=5, markersize=30)\n\n# set the face color of the markers to have an alpha (transparency) of 0.2\n# SOLUTION START\nl.set_markerfacecolor((0, 0, 1, 0.2))\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n(l,) = plt.plot(range(10), \"o-\", lw=5, markersize=30)\n\n# make the border of the markers solid black\n# SOLUTION START\nl.set_markeredgecolor(\"black\")\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n(l,) = plt.plot(range(10), \"o-\", lw=5, markersize=30)\n\n# set both line and marker colors to be solid red\n# SOLUTION START\nl.set_color('red')\nl.set_markerfacecolor('red')\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\nplt.plot(x, y, label=\"sin\")\n\n# rotate the x axis labels clockwise by 45 degrees\n# SOLUTION START\nplt.xticks(rotation=45)\n# SOLUTION END\n\nplt.legend()\nplt.show()\n```\n\nThe solution is to use the `xticks` function from matplotlib to rotate the x axis labels by 45 degrees.",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\nplt.plot(x, y, label=\"sin\")\n\n# rotate the x axis labels counter clockwise by 45 degrees\n# SOLUTION START\nplt.xticks(rotation=45)\n# SOLUTION END\n\nplt.legend()\nplt.show()\n```\n\nThe solution is to use the `xticks` function from matplotlib to rotate the x axis labels by 45 degrees. We pass the `rotation` parameter with a value of 45 to rotate the labels counter clockwise.",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\nplt.plot(x, y, label=\"sin\")\n\n# put a x axis ticklabels at 0, 2, 4...\nplt.xticks(np.arange(0, 2*np.pi+0.1, 2*np.pi/5), ['0', '2', '4', '6', '8'])\n\nplt.show()\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.random.randn(10)\ny = np.random.randn(10)\nsns.distplot(x, label=\"a\", color=\"0.25\")\nsns.distplot(y, label=\"b\", color=\"0.25\")\n\n# add legends\nplt.legend()\n\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\nH = np.random.randn(10, 10)\n\n# color plot of the 2d array H\n# SOLUTION START\nplt.imshow(H, cmap='viridis')\nplt.colorbar()\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nH = np.random.randn(10, 10)\n\n# show the 2d array H in black and white\n# SOLUTION START\nplt.imshow(H, cmap='gray')\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.linspace(0, 2 * np.pi, 10)\ny = np.cos(x)\n\n# set xlabel as \"X\"\n# put the x label at the right end of the x axis\n# SOLUTION START\nplt.xlabel(\"X\", ha=\"right\", x=1.0)\n# SOLUTION END\n\nplt.plot(x, y)\nplt.show()\n```\n\nNote: `ha` stands for horizontal alignment and `x` is the position of the label relative to the x axis. A value of 1.0 means the label is at the right end of the axis.",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = sns.load_dataset(\"planets\")\ng = sns.boxplot(x=\"method\", y=\"orbital_period\", data=df)\n\n# rotate the x axis labels by 90 degrees\n# SOLUTION START\ng.set_xticklabels(g.get_xticklabels(), rotation=90)\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ny = 2 * np.random.rand(10)\nx = np.arange(10)\nplt.plot(x, y)\nmyTitle = \"Some really really long long long title I really really need - and just can't - just can't - make it any - simply any - shorter - at all.\"\n\n# fit a very long title myTitle into multiple lines\nplt.title('\\n'.join(myTitle.split(' - ')))\n\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ny = 2 * np.random.rand(10)\nx = np.arange(10)\n\n# make the y axis go upside down\n# SOLUTION START\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.invert_yaxis()\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.random.randn(10)\ny = x\nplt.scatter(x, y)\n\n# put x ticks at 0 and 1.5 only\n# SOLUTION START\nplt.xticks([0, 1.5])\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.random.randn(10)\ny = x\nplt.scatter(x, y)\n\n# put y ticks at -1 and 1 only\n# SOLUTION START\nplt.yticks([-1, 1])\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\n\n# plot x, then y then z, but so that x covers y and y covers z\n# SOLUTION START\nplt.plot(x, color='blue')\nplt.plot(y, color='orange', alpha=0.7)\nplt.plot(z, color='green', alpha=0.5)\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.random.randn(10)\ny = np.random.randn(10)\n\n# in a scatter plot of x, y, make the points have black borders and blue face\n# SOLUTION START\nplt.scatter(x, y, edgecolors='black', facecolors='blue')\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ny = 2 * np.random.rand(10)\nx = np.arange(10)\n\n# make all axes ticks integers\n# SOLUTION START\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.xaxis.set_major_locator(plt.MaxNLocator(integer=True))\nax.yaxis.set_major_locator(plt.MaxNLocator(integer=True))\n# SOLUTION END\n\nplt.show()\n```\n\nThe solution sets the `x` and `y` axes to use integer ticks using `plt.MaxNLocator(integer=True)`.",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndata = {\n    \"reports\": [4, 24, 31, 2, 3],\n    \"coverage\": [35050800, 54899767, 57890789, 62890798, 70897871],\n}\ndf = pd.DataFrame(data)\nsns.factorplot(y=\"coverage\", x=\"reports\", kind=\"bar\", data=df, label=\"Total\")\n\n# do not use scientific notation in the y axis ticks labels\n# SOLUTION START\nplt.ticklabel_format(style='plain', axis='y')\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ny = 2 * np.random.rand(10)\nx = np.arange(10)\nax = sns.lineplot(x=x, y=y)\n\n# How to plot a dashed line on seaborn lineplot?\n# SOLUTION START\nax.axhline(y=1, linestyle='--', color='red')\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.linspace(0, 2 * np.pi, 400)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# plot x vs y1 and x vs y2 in two subplots, sharing the x axis\n# SOLUTION START\nfig, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\nax1.plot(x, y1)\nax1.set_ylabel('sin(x)')\nax2.plot(x, y2)\nax2.set_ylabel('cos(x)')\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.linspace(0, 2 * np.pi, 400)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# plot x vs y1 and x vs y2 in two subplots\n# remove the frames from the subplots\n# SOLUTION START\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\nax1.plot(x, y1)\nax2.plot(x, y2)\nax1.spines['top'].set_visible(False)\nax1.spines['right'].set_visible(False)\nax1.spines['bottom'].set_visible(False)\nax1.spines['left'].set_visible(False)\nax2.spines['top'].set_visible(False)\nax2.spines['right'].set_visible(False)\nax2.spines['bottom'].set_visible(False)\nax2.spines['left'].set_visible(False)\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.arange(10)\ny = np.sin(x)\ndf = pd.DataFrame({\"x\": x, \"y\": y})\nsns.lineplot(x=\"x\", y=\"y\", data=df)\n\n# remove x axis label\n# SOLUTION START\nplt.xlabel(\"\")\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.arange(10)\ny = np.sin(x)\ndf = pd.DataFrame({\"x\": x, \"y\": y})\nsns.lineplot(x=\"x\", y=\"y\", data=df)\n\n# remove x tick labels\n# SOLUTION START\nplt.xticks([], [])\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n\n# show xticks and vertical grid at x positions 3 and 4\n# SOLUTION START\nplt.xticks(np.arange(10))\nplt.gca().xaxis.grid(True)\nplt.gca().xaxis.grid(True, which='minor', linestyle='--')\nplt.gca().xaxis.grid(True, which='major', linestyle='-')\nplt.gca().xaxis.grid(True, which='major', linestyle='-', color='red', alpha=0.5, linewidth=2)\nplt.gca().xaxis.grid(True, which='minor', linestyle='--', color='blue', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='major', linestyle='-', color='green', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='minor', linestyle='--', color='orange', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='major', linestyle='-', color='purple', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='minor', linestyle='--', color='black', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='major', linestyle='-', color='brown', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='minor', linestyle='--', color='gray', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='major', linestyle='-', color='pink', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='minor', linestyle='--', color='yellow', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='major', linestyle='-', color='cyan', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='minor', linestyle='--', color='magenta', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='major', linestyle='-', color='olive', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='minor', linestyle='--', color='navy', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='major', linestyle='-', color='teal', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='minor', linestyle='--', color='maroon', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='major', linestyle='-', color='coral', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='minor', linestyle='--', color='indigo', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='major', linestyle='-', color='gold', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='minor', linestyle='--', color='darkgreen', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='major', linestyle='-', color='sienna', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='minor', linestyle='--', color='slategray', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='major', linestyle='-', color='peru', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='minor', linestyle='--', color='darkorange', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='major', linestyle='-', color='darkviolet', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='minor', linestyle='--', color='darkblue', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='major', linestyle='-', color='darkturquoise', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='minor', linestyle='--', color='darkred', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='major', linestyle='-', color='darkslategray', alpha=0.5, linewidth=1)\nplt.gca().xaxis.grid(True, which='minor', linestyle='--', color='darkkhaki', alpha=0.5, linewidth=1)\nplt.gca().x",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n\n# show yticks and horizontal grid at y positions 3 and 4\n# SOLUTION START\nplt.yticks([3, 4])\nplt.grid(axis='y', yticks=[3, 4])\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n\n# show yticks and horizontal grid at y positions 3 and 4\n# show xticks and vertical grid at x positions 1 and 2\n# SOLUTION START\nplt.yticks([3, 4])\nplt.grid(axis='y', ydata=[3, 4])\nplt.xticks([1, 2])\nplt.grid(axis='x', xdata=[1, 2])\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = np.arange(10)\ny = np.random.randn(10)\nplt.scatter(x, y)\n\n# show grids\nplt.grid(True)\n\nplt.show()\n# SOLUTION START\n\n# SOLUTION END\n```\n\nThe code above generates a scatter plot with random data. Add code to show grids on the plot.",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = 10 * np.random.randn(10)\ny = x\nplt.plot(x, y, label=\"x-y\")\n\n# put legend in the lower right\n# SOLUTION START\nplt.legend(loc=\"lower right\")\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\n\nfig, axes = plt.subplots(ncols=2, nrows=2, figsize=(8, 6))\naxes = axes.flatten()\n\nfor ax in axes:\n    ax.set_ylabel(r\"$\\ln\\left(\\frac{x_a-x_b}{x_a-x_c}\\right)$\")\n    ax.set_xlabel(r\"$\\ln\\left(\\frac{x_a-x_d}{x_a-x_e}\\right)$\")\n\nplt.tight_layout()  # Adjust subplot padding\nplt.show()\nplt.clf()\n\n# Copy the previous plot but adjust the subplot padding to have enough space to display axis labels\nfig, axes = plt.subplots(ncols=2, nrows=2, figsize=(8, 6))\naxes = axes.flatten()\n\nfor ax in axes:\n    ax.set_ylabel(r\"$\\ln\\left(\\frac{x_a-x_b}{x_a-x_c}\\right)$\")\n    ax.set_xlabel(r\"$\\ln\\left(\\frac{x_a-x_d}{x_a-x_e}\\right)$\")\n\nplt.tight_layout()  # Adjust subplot padding\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10, 20)\nz = np.arange(10)\n\nimport matplotlib.pyplot as plt\n\nplt.plot(x, y, label='Y')\nplt.plot(x, z, label='Z')\nplt.legend()\n\n# Give names to the lines in the above plot 'Y' and 'Z' and show them in a legend\n# SOLUTION START\n# Added label parameter to the plot function and called legend function to show the legend\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ncolumn_labels = list(\"ABCD\")\nrow_labels = list(\"WXYZ\")\ndata = np.random.rand(4, 4)\nfig, ax = plt.subplots()\nheatmap = ax.pcolor(data, cmap=plt.cm.Blues)\n\n# Move the x-axis of this heatmap to the top of the plot\n# SOLUTION START\nax.xaxis.tick_top()\nax.set_xticklabels(column_labels, minor=False)\nax.set_yticklabels(row_labels, minor=False)\n# SOLUTION END\n\nplt.show()\n```\n\nThe solution involves using the `tick_top()` method of the x-axis to move it to the top of the plot. We also need to set the tick labels for both the x and y axes using the `set_xticklabels()` and `set_yticklabels()` methods, respectively.",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x\n# Label the x-axis as \"X\"\n# Set the space between the x-axis label and the x-axis to be 20\n# SOLUTION START\nplt.plot(x, y)\nplt.xlabel(\"X\", labelpad=20)\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x\n# do not show xticks for the plot\n# SOLUTION START\nplt.plot(x, y)\nplt.xticks([])\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x\n# move the y axis ticks to the right\n# SOLUTION START\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.yaxis.tick_right()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and label y axis \"Y\"\n# Show y axis ticks on the left and y axis label on the right\n# SOLUTION START\nplt.plot(x, y)\nplt.ylabel(\"Y\")\nplt.tick_params(axis='y', labelleft=True, labelright=False, left=True, right=False)\nplt.gca().yaxis.set_label_position(\"right\")\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\nimport numpy as np, pandas as pd\nimport seaborn as sns\n\ntips = sns.load_dataset(\"tips\")\n\n# Make a seaborn joint regression plot (kind='reg') of 'total_bill' and 'tip' in the tips dataframe\n# change the line and scatter plot color to green but keep the distribution plot in blue\n# SOLUTION START\nsns.jointplot(x='total_bill', y='tip', data=tips, kind='reg', color='g')\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\nimport numpy as np, pandas as pd\nimport seaborn as sns\n\ntips = sns.load_dataset(\"tips\")\n\n# Make a seaborn joint regression plot (kind='reg') of 'total_bill' and 'tip' in the tips dataframe\n# change the line color in the regression to green but keep the histograms in blue\n# SOLUTION START\nsns.jointplot(x='total_bill', y='tip', data=tips, kind='reg', color='blue', line_kws={'color': 'green'})\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\nimport numpy as np, pandas as pd\nimport seaborn as sns\n\ntips = sns.load_dataset(\"tips\")\n\n# Make a seaborn joint regression plot (kind='reg') of 'total_bill' and 'tip' in the tips dataframe\n# do not use scatterplot for the joint plot\n# SOLUTION START\nsns.jointplot(x='total_bill', y='tip', data=tips, kind='reg')\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndf = pd.DataFrame(\n    {\n        \"celltype\": [\"foo\", \"bar\", \"qux\", \"woz\"],\n        \"s1\": [5, 9, 1, 7],\n        \"s2\": [12, 90, 13, 87],\n    }\n)\n\n# For data in df, make a bar plot of s1 and s1 and use celltype as the xlabel\n# Make the x-axis tick labels horizontal\n# SOLUTION START\nplt.bar(df[\"celltype\"], df[\"s1\"], label=\"s1\")\nplt.bar(df[\"celltype\"], df[\"s2\"], label=\"s2\")\nplt.xticks(rotation=0)\nplt.xlabel(\"celltype\")\nplt.legend()\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndf = pd.DataFrame(\n    {\n        \"celltype\": [\"foo\", \"bar\", \"qux\", \"woz\"],\n        \"s1\": [5, 9, 1, 7],\n        \"s2\": [12, 90, 13, 87],\n    }\n)\n\n# For data in df, make a bar plot of s1 and s1 and use celltype as the xlabel\n# Make the x-axis tick labels rotate 45 degrees\n# SOLUTION START\nfig, ax = plt.subplots()\nax.bar(df[\"celltype\"], df[\"s1\"], label=\"s1\")\nax.bar(df[\"celltype\"], df[\"s2\"], label=\"s2\")\nax.set_xlabel(\"celltype\")\nax.set_ylabel(\"value\")\nax.set_xticklabels(df[\"celltype\"], rotation=45)\nax.legend()\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and label the x axis as \"X\"\n# Make both the x axis ticks and the axis label red\n# SOLUTION START\nplt.plot(x, y)\nplt.xlabel(\"X\", color=\"red\")\nplt.tick_params(axis=\"x\", colors=\"red\")\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and label the x axis as \"X\"\n# Make the line of the x axis red\n# SOLUTION START\nplt.plot(x, y)\nplt.xlabel(\"X\")\nplt.axhline(y=0, color='r')\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x with tick font size 10 and make the x tick labels vertical\n# SOLUTION START\nplt.plot(x, y)\nplt.xticks(fontsize=10, rotation=90)\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\n\n# draw vertical lines at [0.22058956, 0.33088437, 2.20589566]\n# SOLUTION START\nplt.axvline(x=0.22058956, color='r')\nplt.axvline(x=0.33088437, color='r')\nplt.axvline(x=2.20589566, color='r')\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\nimport numpy\n\nxlabels = list(\"ABCD\")\nylabels = list(\"CDEF\")\nrand_mat = numpy.random.rand(4, 4)\n\n# Plot of heatmap with data in rand_mat and use xlabels for x-axis labels and ylabels as the y-axis labels\n# Make the x-axis tick labels appear on top of the heatmap and invert the order or the y-axis labels (C to F from top to bottom)\n# SOLUTION START\nfig, ax = plt.subplots()\nim = ax.imshow(rand_mat)\n\nax.set_xticks(numpy.arange(len(xlabels)))\nax.set_yticks(numpy.arange(len(ylabels)))\nax.set_xticklabels(xlabels)\nax.set_yticklabels(ylabels[::-1])\n\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"left\", rotation_mode=\"anchor\")\n\nfor i in range(len(ylabels)):\n    for j in range(len(xlabels)):\n        text = ax.text(j, i, round(rand_mat[i, j], 2), ha=\"center\", va=\"center\", color=\"w\")\n\nax.set_title(\"Heatmap\")\nfig.tight_layout()\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\n\nrc(\"mathtext\", default=\"regular\")\n\ntime = np.arange(10)\ntemp = np.random.random(10) * 30\nSwdown = np.random.random(10) * 100 - 10\nRn = np.random.random(10) * 100 - 10\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(time, Swdown, \"-\", label=\"Swdown\")\nax.plot(time, Rn, \"-\", label=\"Rn\")\nax2 = ax.twinx()\nax2.plot(time, temp, \"-r\", label=\"temp\")\nax.legend(loc=0)\nax.grid()\nax.set_xlabel(\"Time (h)\")\nax.set_ylabel(r\"Radiation ($MJ\\,m^{-2}\\,d^{-1}$)\")\nax2.set_ylabel(r\"Temperature ($^\\circ$C)\")\nax2.set_ylim(0, 35)\nax.set_ylim(-20, 100)\n\n# add legend for all three curves in the two subplots\nlines, labels = ax.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax2.legend(lines + lines2, labels + labels2, loc=0)\n\nplt.show()\nplt.clf()\n```\n\nNote: The solution adds the legend for all three curves in the two subplots by getting the handles and labels of the legends from both subplots and combining them into a single legend using the `legend()` method of the first subplot.",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# make two side-by-side subplots and and in each subplot, plot y over x\n# Title each subplot as \"Y\"\n# SOLUTION START\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\naxs[0].plot(x, y)\naxs[0].set_title('Y')\naxs[1].plot(x, y)\naxs[1].set_title('Y')\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n]\n\n# make a seaborn scatter plot of bill_length_mm and bill_depth_mm\n# use markersize 30 for all data points in the scatter plot\n# SOLUTION START\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=df, s=30)\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\na = [2.56422, 3.77284, 3.52623]\nb = [0.15, 0.3, 0.45]\nc = [58, 651, 393]\n\n# make scatter plot of a over b and annotate each data point with correspond numbers in c\n# SOLUTION START\nfig, ax = plt.subplots()\nax.scatter(b, a)\nfor i, txt in enumerate(c):\n    ax.annotate(txt, (b[i], a[i]))\nplt.show()\n# SOLUTION END\n```\n",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart and label the line \"y over x\"\n# Show legend of the plot and give the legend box a title\n# SOLUTION START\nplt.plot(x, y, label='y over x')\nplt.legend(title='Legend')\n# SOLUTION END\n\nplt.show()\n```\n\nOutput:\n\n![line chart with legend](https://i.imgur.com/5JZJZJL.png)",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart and label the line \"y over x\"\n# Show legend of the plot and give the legend box a title  \"Legend\"\n# Bold the legend title\n# SOLUTION START\nplt.plot(x, y, label=\"y over x\")\nplt.legend(title=\"Legend\", title_fontweight=\"bold\")\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.random.rand(10)\ny = np.random.rand(10)\n\n# Make a histogram of x and show outline of each bar in the histogram\n# Make the outline of each bar has a line width of 1.2\n# SOLUTION START\nplt.hist(x, edgecolor='black', linewidth=1.2)\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make two subplots. Make the first subplot three times wider than the second subplot but they should have the same height.\n# SOLUTION START\nfig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(12, 4))\n\nax1.plot(x, y)\nax2.plot(x, y)\n\nax1.set_aspect('equal')\nax2.set_aspect('equal')\n\nax1.set_xlim(0, 9)\nax2.set_xlim(0, 9)\n\nax1.set_ylim(0, 9)\nax2.set_ylim(0, 9)\n\nax1.set_title('First subplot')\nax2.set_title('Second subplot')\n\nax1.set_xlabel('X label')\nax2.set_xlabel('X label')\n\nax1.set_ylabel('Y label')\nax2.set_ylabel('Y label')\n\nax1.set_xticks(np.arange(0, 10, 2))\nax2.set_xticks(np.arange(0, 10, 2))\n\nax1.set_yticks(np.arange(0, 10, 2))\nax2.set_yticks(np.arange(0, 10, 2))\n\nax1.grid(True)\nax2.grid(True)\n\nplt.tight_layout()\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.random.rand(10)\ny = np.random.rand(10)\nbins = np.linspace(-1, 1, 100)\n\n# Plot two histograms of x and y on a single chart with matplotlib\n# Set the transparency of the histograms to be 0.5\n# SOLUTION START\nplt.hist(x, bins=bins, alpha=0.5, label='x')\nplt.hist(y, bins=bins, alpha=0.5, label='y')\nplt.legend()\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.random.rand(10)\ny = np.random.rand(10)\n\n# Plot a grouped histograms of x and y on a single chart with matplotlib\n# Use grouped histograms so that the histograms don't overlap with each other\n# SOLUTION START\nplt.hist([x, y], bins=10, alpha=0.5, label=['x', 'y'])\nplt.legend(loc='upper right')\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\n\na, b = 1, 1\nc, d = 3, 4\n\n# draw a line that pass through (a, b) and (c, d)\n# do not just draw a line segment\n# set the xlim and ylim to be between 0 and 5\n# SOLUTION START\nx = [0, 5]\ny = [(d-b)/(c-a)*(i-a)+b for i in x]\nplt.plot(x, y)\nplt.xlim(0, 5)\nplt.ylim(0, 5)\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.random.random((10, 10))\ny = np.random.random((10, 10))\n\n# make two colormaps with x and y and put them into different subplots\n# use a single colorbar for these two subplots\n# SOLUTION START\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nim1 = ax1.imshow(x, cmap='viridis')\nim2 = ax2.imshow(y, cmap='plasma')\n\nfig.colorbar(im1, ax=[ax1, ax2])\n\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.random.random((10, 2))\n\n# Plot each column in x as an individual line and label them as \"a\" and \"b\"\n# SOLUTION START\nplt.plot(x[:,0], label='a')\nplt.plot(x[:,1], label='b')\nplt.legend()\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\nz = np.arange(10)\na = np.arange(10)\n\n# plot y over x and z over a in two different subplots\n# Set \"Y and Z\" as a main title above the two subplots\n# SOLUTION START\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\nax1.plot(x, y)\nax1.set_title('Y')\nax2.plot(a, z)\nax2.set_title('Z')\nfig.suptitle('Y and Z')\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\npoints = [(3, 5), (5, 10), (10, 150)]\n\n# plot a line plot for points in points.\n# Make the y-axis log scale\n# SOLUTION START\nx = [p[0] for p in points]\ny = [p[1] for p in points]\nplt.plot(x, y)\nplt.yscale('log')\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x\n# use font size 20 for title, font size 18 for xlabel and font size 16 for ylabel\n# SOLUTION START\nplt.plot(x, y)\nplt.title(\"Plot of y over x\", fontsize=20)\nplt.xlabel(\"x\", fontsize=18)\nplt.ylabel(\"y\", fontsize=16)\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\ny = np.arange(10)\n\nf = plt.figure()\nax = f.add_subplot(111)\n\n# plot y over x, show tick labels (from 1 to 10)\n# use the `ax` object to set the tick labels\n# SOLUTION START\nax.plot(x, y)\nax.set_xticks(x)\nax.set_xticklabels([str(i+1) for i in x])\n# SOLUTION END\n\nplt.show()\n```\n\nThe code above generates a simple line plot of `y` over `x`. The goal is to set the tick labels of the x-axis to show the numbers from 1 to 10 (instead of the default 0 to 9). To achieve this, we use the `set_xticks` method of the `ax` object to set the tick positions to `x`, and then use the `set_xticklabels` method to set the tick labels to a list of strings representing the numbers from 1 to 10.",
        "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nlines = [[(0, 1), (1, 1)], [(2, 3), (3, 3)], [(1, 2), (1, 3)]]\nc = np.array([(1, 0, 0, 1), (0, 1, 0, 1), (0, 0, 1, 1)])\n\n# Plot line segments according to the positions specified in lines\n# Use the colors specified in c to color each line segment\n# SOLUTION START\nfor i in range(len(lines)):\n    plt.plot([lines[i][0][0], lines[i][1][0]], [lines[i][0][1], lines[i][1][1]], color=c[i])\nplt.show()\n# SOLUTION END\n```\nOutput: \n\n![image.png](attachment:image.png)",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(0, 1000, 50)\ny = np.arange(0, 1000, 50)\n\n# plot y over x on a log-log plot\n# mark the axes with numbers like 1, 10, 100. do not use scientific notation\n# SOLUTION START\nplt.loglog(x, y)\nplt.xticks([1, 10, 100, 1000])\nplt.yticks([1, 10, 100, 1000])\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(\n    np.random.randn(50, 4),\n    index=pd.date_range(\"1/1/2000\", periods=50),\n    columns=list(\"ABCD\"),\n)\ndf = df.cumsum()\n\n# make four line plots of data in the data frame\n# show the data points  on the line plot\n# SOLUTION START\nfig, ax = plt.subplots()\ndf.plot(ax=ax, style='.-')\nax.legend(loc='upper left')\nplt.show()\n# SOLUTION END\n```\n",
        "```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata = [1000, 1000, 5000, 3000, 4000, 16000, 2000]\n\n# Make a histogram of data and renormalize the data to sum up to 1\n# Format the y tick labels into percentage and set y tick labels as 10%, 20%, etc.\n# SOLUTION START\nplt.hist(data, weights=np.ones(len(data)) / len(data))\nplt.gca().yaxis.set_major_formatter(plt.PercentFormatter(1))\nplt.yticks(np.arange(0, 1.1, 0.1))\n# SOLUTION END\n\nplt.show()\n```\n\nOutput:\n\n![histogram](histogram.png)",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line plot\n# Show marker on the line plot. Make the marker have a 0.5 transparency but keep the lines solid.\n# SOLUTION START\nplt.plot(x, y, marker='o', alpha=0.5, linestyle='-')\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\na = np.arange(10)\nz = np.arange(10)\n\n# Plot y over x and a over z in two side-by-side subplots.\n# Label them \"y\" and \"a\" and make a single figure-level legend using the figlegend function\n# SOLUTION START\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nax1.plot(x, y, label='y')\nax1.set_xlabel('x')\nax1.set_ylabel('y')\n\nax2.plot(z, a, label='a')\nax2.set_xlabel('z')\nax2.set_ylabel('a')\n\nfig.legend(loc='center', bbox_to_anchor=(0.5, 0.1), ncol=2)\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n]\n\n# Make 2 subplots.\n# In the first subplot, plot a seaborn regression plot of \"bill_depth_mm\" over \"bill_length_mm\"\n# In the second subplot, plot a seaborn regression plot of \"flipper_length_mm\" over \"bill_length_mm\"\n# Do not share y axix for the subplots\n# SOLUTION START\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\nsns.regplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=df, ax=ax1)\nsns.regplot(x=\"bill_length_mm\", y=\"flipper_length_mm\", data=df, ax=ax2)\nax1.set(title=\"Bill Depth vs Bill Length\", xlabel=\"Bill Length (mm)\", ylabel=\"Bill Depth (mm)\")\nax2.set(title=\"Flipper Length vs Bill Length\", xlabel=\"Bill Length (mm)\", ylabel=\"Flipper Length (mm)\")\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\nfig, ax = plt.subplots(1, 1)\nplt.xlim(1, 10)\nplt.xticks(range(1, 10), ['1', 'second', '3', '4', '5', '6', '7', '8', '9'])\nax.plot(y, x)\n\n# change the second x axis tick label to \"second\" but keep other labels in numerical\n# SOLUTION START\nplt.xticks([2], ['second'])\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x\n# Show legend and use the greek letter lambda as the legend label\n# SOLUTION START\nplt.plot(x, y, label=r'$\\lambda$')\nplt.legend()\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(y, x)\nplt.xticks(range(0, 10, 2))\n\n# Add extra ticks [2.1, 3, 7.6] to existing xticks\n# SOLUTION START\nextra_ticks = [2.1, 3, 7.6]\nplt.xticks(list(plt.xticks()[0]) + extra_ticks)\n# SOLUTION END\n\nplt.show()\n```\n\nThe solution adds the extra ticks to the existing xticks by getting the current xticks using `plt.xticks()[0]`, converting it to a list, concatenating it with the extra ticks, and setting the new xticks using `plt.xticks()`.",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(2010, 2020)\ny = np.arange(10)\nplt.plot(x, y)\n\n# Rotate the xticklabels to -60 degree. Set the xticks horizontal alignment to left.\n# SOLUTION START\nplt.xticks(rotation=-60, ha='left')\n# SOLUTION END\n\nplt.show()\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(2010, 2020)\ny = np.arange(10)\nplt.plot(x, y)\n\n# Rotate the yticklabels to -60 degree. Set the xticks vertical alignment to top.\n# SOLUTION START\nplt.xticks(rotation=-60, va='top')\n# SOLUTION END\n\nplt.show()\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(2010, 2020)\ny = np.arange(10)\nplt.plot(x, y)\n\n# Set the transparency of xtick labels to be 0.5\n# SOLUTION START\nplt.xticks(alpha=0.5)\n# SOLUTION END\n\nplt.show()\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(x, y)\n\n# Remove the margin before the first xtick but use greater than zero margin for the yaxis\n# SOLUTION START\nplt.margins(x=0, y=0.1)\n# SOLUTION END\n\nplt.show()\n```\n\nThe `margins` function is used to set the margins of the plot. By default, it sets the margins to 0.05 for both x and y axes. We can use the `x` and `y` parameters to set the margins for each axis separately. In this case, we set the x margin to 0 to remove the margin before the first xtick, and set the y margin to 0.1 to have a greater than zero margin for the yaxis.",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(x, y)\n\n# Remove the margin before the first ytick but use greater than zero margin for the xaxis\n# SOLUTION START\nplt.margins(x=0.05, y=-0.1)\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# make a two columns and one row subplots. Plot y over x in each subplot.\n# Give the plot a global title \"Figure\"\n# SOLUTION START\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\nfig.suptitle('Figure')\naxs[0].plot(x, y)\naxs[0].set_title('Subplot 1')\naxs[1].plot(x, y)\naxs[1].set_title('Subplot 2')\n# SOLUTION END\n```",
        "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nvalues = [[1, 2], [3, 4]]\ndf = pd.DataFrame(values, columns=[\"Type A\", \"Type B\"], index=[\"Index 1\", \"Index 2\"])\n\n# Plot values in df with line chart\n# label the x axis and y axis in this plot as \"X\" and \"Y\"\n# SOLUTION START\ndf.plot(kind=\"line\")\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make a scatter plot with x and y\n# Use vertical line hatch for the marker and make the hatch dense\n# SOLUTION START\nplt.scatter(x, y, marker='|', s=100, linewidths=2, edgecolors='black', hatch='|', alpha=0.8)\n# SOLUTION END\n\nplt.show()\n```\n\nThe code above will produce a scatter plot with vertical line hatch for the marker and make the hatch dense.",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make a scatter plot with x and y and remove the edge of the marker\n# Use vertical line hatch for the marker\n# SOLUTION START\nplt.scatter(x, y, edgecolors='none', marker='|', hatch='|')\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make a scatter plot with x and y\n# Use star hatch for the marker\n# SOLUTION START\nplt.scatter(x, y, marker='*', edgecolors='black', facecolors='none', linewidths=1.5, hatch='*')\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Make a scatter plot with x and y and set marker size to be 100\n# Combine star hatch and vertical line hatch together for the marker\n# SOLUTION START\nplt.scatter(x, y, s=100, marker='*', hatch='|')\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.random((10, 10))\n\n# Set xlim and ylim to be between 0 and 10\n# Plot a heatmap of data in the rectangle where right is 5, left is 1, bottom is 1, and top is 4.\n# SOLUTION START\nplt.xlim(0, 10)\nplt.ylim(0, 10)\nplt.imshow(data, cmap='hot', extent=[1, 5, 1, 4])\nplt.colorbar()\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0.1, 2 * np.pi, 41)\ny = np.exp(np.sin(x))\n\n# make a stem plot of y over x and set the orientation to be horizontal\n# SOLUTION START\nplt.stem(x, y, orientation='horizontal')\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\n\nd = {\"a\": 4, \"b\": 5, \"c\": 7}\nc = {\"a\": \"red\", \"c\": \"green\", \"b\": \"blue\"}\n\n# Make a bar plot using data in `d`. Use the keys as x axis labels and the values as the bar heights.\n# Color each bar in the plot by looking up the color in colors\n# SOLUTION START\nplt.bar(d.keys(), d.values(), color=[c[key] for key in d.keys()])\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\n\n# Make a solid vertical line at x=3 and label it \"cutoff\". Show legend of this plot.\n# SOLUTION START\nplt.axvline(x=3, color='r', linestyle='--', label='cutoff')\nplt.legend()\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\n\nlabels = [\"a\", \"b\"]\nheight = [3, 4]\n\n# Use polar projection for the figure and make a bar plot with labels in `labels` and bar height in `height`\n# SOLUTION START\nfig = plt.figure(figsize=(6, 6))\nax = fig.add_subplot(111, polar=True)\ntheta = [0, 1]\nbars = ax.bar(theta, height, width=0.4)\nax.set_xticklabels(labels)\nplt.show()\n# SOLUTION END\n```\n\nThe code above creates a polar bar plot with two bars, labeled \"a\" and \"b\", with heights of 3 and 4, respectively. The `figsize` parameter sets the size of the figure, and `ax = fig.add_subplot(111, polar=True)` creates a polar subplot. The `theta` variable sets the angle of the bars, and `bars = ax.bar(theta, height, width=0.4)` creates the bars with the specified heights. Finally, `ax.set_xticklabels(labels)` sets the labels for the x-axis, and `plt.show()` displays the plot.",
        "```python\nimport matplotlib.pyplot as plt\n\nl = [\"a\", \"b\", \"c\"]\ndata = [225, 90, 50]\n\n# Make a donut plot of using `data` and use `l` for the pie labels\n# Set the wedge width to be 0.4\n# SOLUTION START\nfig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect=\"equal\"))\n\nwedges, texts = ax.pie(data, wedgeprops=dict(width=0.4), startangle=-40)\n\nbbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"w\", ec=\"k\", lw=0.72)\nkw = dict(xycoords='data', textcoords='data', arrowprops=dict(arrowstyle=\"-\"),\n          bbox=bbox_props, zorder=0, va=\"center\")\n\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1) / 2. + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    horizontalalignment = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n    connectionstyle = \"angle,angleA=0,angleB={}\".format(ang)\n    kw[\"arrowprops\"].update({\"connectionstyle\": connectionstyle})\n    ax.annotate(l[i], xy=(x, y), xytext=(1.35*np.sign(x), 1.4*y),\n                horizontalalignment=horizontalalignment, **kw)\n\nax.set_title(\"Donut plot\")\n\nplt.show()\n# SOLUTION END\n```\n\nOutput:\n\n![donut_plot.png](attachment:donut_plot.png)",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and show blue dashed grid lines\n# SOLUTION START\nplt.plot(x, y)\nplt.grid(True, linestyle='--', color='blue')\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x\n# Turn minor ticks on and show gray dashed minor grid lines\n# Do not show any major grid lines\n# SOLUTION START\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.minorticks_on()\nax.grid(which='minor', linestyle='--', color='gray', alpha=0.4)\nax.grid(which='major', visible=False)\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\n\nlabels = [\"Walking\", \"Talking\", \"Sleeping\", \"Working\"]\nsizes = [23, 45, 12, 20]\ncolors = [\"red\", \"blue\", \"green\", \"yellow\"]\n\n# Make a pie chart with data in `sizes` and use `labels` as the pie labels and `colors` as the pie color.\n# Bold the pie labels\n# SOLUTION START\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90, textprops={'weight': 'bold'})\nplt.axis('equal')\nplt.show()\n# SOLUTION END\n```\n",
        "```python\nimport matplotlib.pyplot as plt\n\nlabels = [\"Walking\", \"Talking\", \"Sleeping\", \"Working\"]\nsizes = [23, 45, 12, 20]\ncolors = [\"red\", \"blue\", \"green\", \"yellow\"]\n\n# Make a pie chart with data in `sizes` and use `labels` as the pie labels and `colors` as the pie color.\n# Bold the pie labels\n# SOLUTION START\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90, textprops={'weight': 'bold'})\nplt.axis('equal')\nplt.show()\n# SOLUTION END\n```\n",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart but use transparent marker with non-transparent edge\n# SOLUTION START\nplt.plot(x, y, marker='o', markerfacecolor='none', markeredgecolor='blue', markersize=10, linewidth=2)\n# SOLUTION END\n\nplt.show()\n```\n\nOutput:\n\n![image.png](attachment:image.png)",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n]\nsns.distplot(df[\"bill_length_mm\"], color=\"blue\")\n\n# Plot a vertical line at 55 with green color\n# SOLUTION START\nplt.axvline(x=55, color='green')\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Specify the values of blue bars (height)\nblue_bar = (23, 25, 17)\n# Specify the values of orange bars (height)\norange_bar = (19, 18, 14)\n\n# Plot the blue bar and the orange bar side-by-side in the same bar plot.\n# Make  sure the bars don't overlap with each other.\n# SOLUTION START\nbar_width = 0.35\nx = np.arange(len(blue_bar))\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - bar_width/2, blue_bar, bar_width, label='Blue')\nrects2 = ax.bar(x + bar_width/2, orange_bar, bar_width, label='Orange')\nax.set_xticks(x)\nax.set_xticklabels(['A', 'B', 'C'])\nax.legend()\nplt.show()\n# SOLUTION END\n```\n\nThe code above should produce a bar plot with two sets of bars, one in blue and one in orange, side-by-side. The blue bars should be positioned to the left of the orange bars, and there should be no overlap between the bars. The x-axis should be labeled with the categories 'A', 'B', and 'C', and there should be a legend indicating which color corresponds to which set of bars.",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.random.rand(10)\nz = np.random.rand(10)\na = np.arange(10)\n\n# Make two subplots\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\n# Plot y over x in the first subplot and plot z over a in the second subplot\nax1.plot(x, y, label='y over x')\nax2.plot(a, z, label='z over a')\n\n# Label each line chart and put them into a single legend on the first subplot\nax1.set_xlabel('x')\nax1.set_ylabel('y')\nax1.set_title('y over x')\nax1.legend()\n\nax2.set_xlabel('a')\nax2.set_ylabel('z')\nax2.set_title('z over a')\nax2.legend()\n\nplt.show()\n# SOLUTION END\n```\n\nThe code creates two subplots side by side, plots `y` over `x` in the first subplot and `z` over `a` in the second subplot, labels each line chart, and puts them into a single legend on the first subplot. The resulting plot is displayed using `plt.show()`.",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib\n\nx = np.arange(10)\ny = np.linspace(0, 1, 10)\n\n# Plot y over x with a scatter plot\n# Use the \"Spectral\" colormap and color each data point based on the y-value\n# SOLUTION START\nplt.scatter(x, y, c=y, cmap='Spectral')\nplt.colorbar()\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x\n# use a tick interval of 1 on the a-axis\n# SOLUTION START\nplt.plot(x, y)\nplt.xticks(np.arange(0, 10, 1))\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = sns.load_dataset(\"penguins\")[[\"bill_length_mm\", \"species\", \"sex\"]]\n\n# Use seaborn factorpot to plot multiple barplots of \"bill_length_mm\" over \"sex\" and separate into different subplot columns by \"species\"\n# Do not share y axis across subplots\n# SOLUTION START\ng = sns.factorplot(x=\"sex\", y=\"bill_length_mm\", col=\"species\", data=df, kind=\"bar\", sharey=False)\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# draw a circle centered at (0.5, 0.5) with radius 0.2\n# SOLUTION START\nfig, ax = plt.subplots()\ncircle = plt.Circle((0.5, 0.5), 0.2, color='r')\nax.add_artist(circle)\nplt.xlim(0, 1)\nplt.ylim(0, 1)\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and use the greek letter phi for title. Bold the title and make sure phi is bold.\n# SOLUTION START\nplt.plot(x, y)\nplt.title(r\"$\\mathbf{\\phi}$\", fontsize=16)\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x with a legend of \"Line\"\n# Adjust the spacing between legend markers and labels to be 0.1\n# SOLUTION START\nplt.plot(x, y, label=\"Line\")\nplt.legend(markerscale=0.1)\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x with a legend of \"Line\"\n# Adjust the length of the legend handle to be 0.3\n# SOLUTION START\nplt.plot(x, y, label=\"Line\")\nplt.legend(handlelength=0.3)\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(x, y, label=\"Line\")\nplt.plot(y, x, label=\"Flipped\")\n\n# Show a two columns legend of this plot\n# SOLUTION START\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2)\n# SOLUTION END\n\nplt.show()\n```\n\nExplanation:\n- `plt.legend()` is used to create a legend for the plot.\n- `loc='upper center'` specifies the location of the legend to be at the upper center of the plot.\n- `bbox_to_anchor=(0.5, -0.1)` specifies the position of the legend box relative to the plot. In this case, the legend box is placed at the center of the plot horizontally and 0.1 units below the plot vertically.\n- `ncol=2` specifies the number of columns in the legend to be 2.",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\nplt.plot(x, y, marker=\"*\", label=\"Line\")\n\n# Show a legend of this plot and show two markers on the line\n# SOLUTION START\nplt.legend()\nplt.plot([3, 7], [3, 7], marker=\"o\", linestyle=\"\", color=\"red\")\n# SOLUTION END\n\nplt.show()\n```\n\nThe solution adds `plt.legend()` to show the legend of the plot and `plt.plot([3, 7], [3, 7], marker=\"o\", linestyle=\"\", color=\"red\")` to add two red circles as markers on the line.",
        "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.random((10, 10))\n\n# plot the 2d matrix data with a colorbar\n# SOLUTION START\nplt.imshow(data, cmap='viridis')\nplt.colorbar()\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x. Give the plot a title \"Figure 1\". bold the word \"Figure\" in the title but do not bold \"1\"\n# SOLUTION START\nplt.plot(x, y)\nplt.title(r\"$\\bf{Figure}\\ 1$: Plot of y over x\")\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\ndf = pd.DataFrame(\n    {\n        \"id\": [\"1\", \"2\", \"1\", \"2\", \"2\"],\n        \"x\": [123, 22, 356, 412, 54],\n        \"y\": [120, 12, 35, 41, 45],\n    }\n)\n\n# Use seaborn to make a pairplot of data in `df` using `x` for x_vars, `y` for y_vars, and `id` for hue\n# Hide the legend in the output figure\n# SOLUTION START\nsns.pairplot(df, x_vars=[\"x\"], y_vars=[\"y\"], hue=\"id\")\nplt.legend().remove()\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x and invert the x axis\n# SOLUTION START\nplt.plot(x, y)\nplt.gca().invert_xaxis()\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(11)\ny = np.arange(11)\nplt.xlim(0, 10)\nplt.ylim(0, 10)\n\n# Plot a scatter plot x over y and set both the x limit and y limit to be between 0 and 10\n# Turn off axis clipping so data points can go beyond the axes\n# SOLUTION START\nplt.scatter(x, y)\nplt.axis('scaled')\nplt.axis('off')\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot a scatter plot with values in x and y\n# Plot the data points to have red inside and have black border\n# SOLUTION START\nplt.scatter(x, y, c='red', edgecolors='black')\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x on a 2 by 2 subplots with a figure size of (15, 15)\n# repeat the plot in each subplot\n# SOLUTION START\nfig, axs = plt.subplots(2, 2, figsize=(15, 15))\nfor ax in axs.flatten():\n    ax.plot(x, y)\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.random.rand(100) * 10\n\n# Make a histogram of x\n# Make the histogram range from 0 to 10\n# Make bar width 2 for each bar in the histogram and have 5 bars in total\n# SOLUTION START\nplt.hist(x, bins=5, range=(0,10), width=2)\nplt.show()\n# SOLUTION END\n```",
        "```python\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\ny = np.arange(1, 11)\nerror = np.random.random(y.shape)\n\n# Plot y over x and show the error according to `error`\n# Plot the error as a shaded region rather than error bars\n# SOLUTION START\nplt.plot(x, y)\nplt.fill_between(x, y-error, y+error, alpha=0.5)\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nxvec = np.linspace(-5.0, 5.0, 100)\nx, y = np.meshgrid(xvec, xvec)\nz = -np.hypot(x, y)\nplt.contourf(x, y, z)\n\n# draw x=0 and y=0 axis in my contour plot with white color\n# SOLUTION START\nplt.axhline(y=0, color='white')\nplt.axvline(x=0, color='white')\n# SOLUTION END\n\nplt.show()\n```\n\nThe solution adds two lines of code that use `plt.axhline` and `plt.axvline` to draw horizontal and vertical lines at `y=0` and `x=0`, respectively. The `color` parameter is set to `'white'` to make the lines visible on the contour plot.",
        "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nbox_position, box_height, box_errors = np.arange(4), np.ones(4), np.arange(1, 5)\nc = [\"r\", \"r\", \"b\", \"b\"]\nfig, ax = plt.subplots()\nax.bar(box_position, box_height, color=\"yellow\")\n\n# Plot error bars with errors specified in box_errors. Use colors in c to color the error bars\n# SOLUTION START\nax.errorbar(box_position, box_height, yerr=box_errors, fmt=\"none\", ecolor=c)\n# SOLUTION END\n\nplt.show()\n```\n\nOutput:\n\n![image.png](attachment:image.png)",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\nz = np.arange(10)\na = np.arange(10)\n\n# Plot y over x and z over a in two side-by-side subplots\n# Make \"Y\" the title of the first subplot and \"Z\" the title of the second subplot\n# Raise the title of the second subplot to be higher than the first one\n# SOLUTION START\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\nax1.plot(x, y)\nax1.set_title('Y')\n\nax2.plot(a, z)\nax2.set_title('Z')\nax2.title.set(y=1.05)\n\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# make 4 by 4 subplots with a figure size (5,5)\n# in each subplot, plot y over x and show axis tick labels\n# give enough spacing between subplots so the tick labels don't overlap\n# SOLUTION START\nfig, axs = plt.subplots(4, 4, figsize=(5, 5))\nfor i in range(4):\n    for j in range(4):\n        axs[i, j].plot(x, y)\n        axs[i, j].tick_params(axis='both', which='both', labelsize=6)\n        axs[i, j].set_xlim([0, 9])\n        axs[i, j].set_ylim([0, 9])\n        plt.subplots_adjust(wspace=0.5, hspace=0.5)\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nd = np.random.random((10, 10))\n\n# Use matshow to plot d and make the figure size (8, 8)\n# SOLUTION START\nplt.figure(figsize=(8,8))\nplt.matshow(d)\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = sns.load_dataset(\"penguins\")[\n    [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n].head(10)\n\n# Plot df as a matplotlib table. Set the bbox of the table to [0, 0, 1, 1]\n# SOLUTION START\nfig, ax = plt.subplots(figsize=(10, 5))\nax.axis('off')\ntable = ax.table(cellText=df.values, colLabels=df.columns, loc='center')\ntable.auto_set_font_size(False)\ntable.set_fontsize(14)\ntable.scale(1, 2)\nplt.subplots_adjust(left=0.2, bottom=0.2)\nplt.show()\n# SOLUTION END\n```\n\nThe solution creates a figure and an axis object using `plt.subplots()`. The `ax.axis('off')` command removes the axis from the plot. The `ax.table()` command creates a table with the data from `df`. The `cellText` parameter takes the values of `df`, while the `colLabels` parameter takes the column names of `df`. The `loc` parameter sets the location of the table to the center of the plot. The `table.auto_set_font_size(False)` command disables the automatic font size adjustment. The `table.set_fontsize(14)` command sets the font size of the table to 14. The `table.scale(1, 2)` command scales the table to be 1 unit wide and 2 units tall. Finally, `plt.subplots_adjust()` is used to adjust the position of the table within the plot.",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart. Show x axis tick labels on both top and bottom of the figure.\n# SOLUTION START\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.xaxis.tick_top()\nax.xaxis.set_label_position('top')\nax.xaxis.set_ticks_position('both')\n# SOLUTION END\n\nplt.show()\n```\n\n![image.png](attachment:image.png)",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart. Show x axis ticks on both top and bottom of the figure.\n# SOLUTION START\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.xaxis.tick_top()\nax.xaxis.set_ticks_position('both')\n# SOLUTION END\n\nplt.show()\n```\n\n![output](https://i.imgur.com/5JZJZJL.png)",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart. Show x axis tick labels but hide the x axis ticks\n# SOLUTION START\nplt.plot(x, y)\nplt.xticks(x)\nplt.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=True)\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = sns.load_dataset(\"exercise\")\n\n# Make catplots of scatter plots by using \"time\" as x, \"pulse\" as y, \"kind\" as hue, and \"diet\" as col\n# Change the subplots titles to \"Group: Fat\" and \"Group: No Fat\"\n# SOLUTION START\ng = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\")\ng.set_titles(\"Group: {col_name}\")\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = sns.load_dataset(\"exercise\")\n\n# Make catplots of scatter plots by using \"time\" as x, \"pulse\" as y, \"kind\" as hue, and \"diet\" as col\n# Change the xlabels to \"Exercise Time\" and \"Exercise Time\"\n# SOLUTION START\ng = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\")\ng.set_xlabels(\"Exercise Time\")\ng.set_ylabels(\"Pulse\")\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = sns.load_dataset(\"exercise\")\n\n# Make catplots of scatter plots by using \"time\" as x, \"pulse\" as y, \"kind\" as hue, and \"diet\" as col\n# Do not show any ylabel on either subplot\n# SOLUTION START\ng = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=df, kind=\"scatter\")\ng.set_axis_labels(\"\", \"\")\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# plot y over x with label \"y\"\n# make the legend fontsize 8\n# SOLUTION START\nplt.plot(x, y, label=\"y\")\nplt.legend(fontsize=8)\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x with figsize (5, 5) and dpi 300\n# SOLUTION START\nplt.figure(figsize=(5,5), dpi=300)\nplt.plot(x, y)\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x with label \"y\" and show legend\n# Remove the border of frame of legend\n# SOLUTION START\nplt.plot(x, y, label=\"y\")\nplt.legend(frameon=False)\n# SOLUTION END\n```",
        "```python\nfrom numpy import *\nimport math\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nt = linspace(0, 2 * math.pi, 400)\na = sin(t)\nb = cos(t)\nc = a + b\n\n# Plot a, b, c in the same figure\n# SOLUTION START\nplt.plot(t, a, label='sin(t)')\nplt.plot(t, b, label='cos(t)')\nplt.plot(t, c, label='sin(t) + cos(t)')\nplt.legend()\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf = sns.load_dataset(\"penguins\")[[\"bill_length_mm\", \"species\", \"sex\"]]\n\n# Make a stripplot for the data in df. Use \"sex\" as x, \"bill_length_mm\" as y, and \"species\" for the color\n# Remove the legend from the stripplot\n# SOLUTION START\nsns.stripplot(x=\"sex\", y=\"bill_length_mm\", hue=\"species\", data=df, jitter=True)\nplt.legend().remove()\nplt.show()\n# SOLUTION END\n```",
        "```python\nimport seaborn as sns\nimport matplotlib.pylab as plt\nimport pandas\nimport numpy as np\n\ndf = pandas.DataFrame(\n    {\n        \"a\": np.arange(1, 31),\n        \"b\": [\"A\",] * 10 + [\"B\",] * 10 + [\"C\",] * 10,\n        \"c\": np.random.rand(30),\n    }\n)\n\n# Use seaborn FaceGrid for rows in \"b\" and plot seaborn pointplots of \"c\" over \"a\"\n# In each subplot, show xticks of intervals of 1 but show xtick labels with intervals of 2\n# SOLUTION START\ng = sns.FacetGrid(df, row=\"b\", height=1.5, aspect=4)\ng.map(sns.pointplot, \"a\", \"c\", order=np.arange(1, 31), color=\"black\")\ng.set(xticks=np.arange(1, 31, 2), xticklabels=np.arange(1, 31, 2))\nplt.show()\n# SOLUTION END\n```\n\nThe code creates a `FacetGrid` object from the `df` DataFrame, with rows defined by the \"b\" column. It then maps a `pointplot` onto each subplot, with \"a\" on the x-axis and \"c\" on the y-axis. The `order` parameter is set to ensure that all x-values are included in the plot. Finally, the xticks are set to intervals of 2, with labels also set to intervals of 2. The resulting plot shows the pointplots for each level of \"b\", with xticks and labels as specified.",
        "```python\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\n\nx = np.random.random(10)\ny = np.random.random(10)\nz = np.random.random(10)\n\n# Make a 3D scatter plot of x,y,z\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x, y, z)\n\n# change the view of the plot to have 100 azimuth and 50 elevation\nax.view_init(azim=100, elev=50)\n\nplt.show()\n# SOLUTION START\n\n# SOLUTION END\n```\n",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.arange(10)\ny = np.arange(10)\n\n# Plot y over x in a line chart and name axis with labels (\"x\" and \"y\")\n# Hide tick labels but keep axis labels\n# SOLUTION START\nplt.plot(x, y)\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.tick_params(axis='both', which='both', labelbottom=False, labelleft=False)\n# SOLUTION END\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nx = np.random.random((10, 10))\nfrom matplotlib import gridspec\n\nnrow = 2\nncol = 2\n\nfig = plt.figure(figsize=(ncol + 1, nrow + 1))\n\n# Make a 2x2 subplots with fig and plot x in each subplot as an image\n# Remove the space between each subplot and make the subplot adjacent to each other\n# Remove the axis ticks from each subplot\n# SOLUTION START\ngs = gridspec.GridSpec(nrow, ncol, wspace=0.0, hspace=0.0)\n\nfor i in range(nrow):\n    for j in range(ncol):\n        ax = fig.add_subplot(gs[i, j])\n        ax.imshow(x, cmap='gray')\n        ax.set_xticks([])\n        ax.set_yticks([])\n# SOLUTION END\n\nplt.show()\n```"
    ],
    "Tensorflow": [
        "[Solution Code]\n```python\nimport tensorflow as tf\n\n\nx = tf.Variable(0)\n# [Begin of Missing Code]\nx.assign(1)\n# [End of Missing Code]\nresult = x.numpy()\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\nx = tf.Variable(0)\n# [Begin of Missing Code]\nx.assign(114514)\n# [End of Missing Code]\nresult = int(x)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\nlabels = [0, 6, 5, 4, 2]\n# [Begin of Missing Code]\nresult = tf.one_hot(labels, depth=10, dtype=tf.int32)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\n\nlabels = [0, 6, 5, 4, 2]\n# [Begin of Missing Code]\nresult = tf.one_hot(labels, depth=10, dtype=tf.int32)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\nlabels = [0, 6, 5, 4, 2]\n# [Begin of Missing Code]\nresult = tf.one_hot(labels, depth=10, dtype=tf.int32)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\nexample_labels = [0, 6, 5, 4, 2]\ndef f(labels=example_labels):\n    # [Begin of Missing Code]\n    result = tf.one_hot(labels, depth=10, dtype=tf.int32)\n    # [End of Missing Code]\n    return result\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\nlabels = [0, 6, 5, 4, 2]\n# [Begin of Missing Code]\nresult = tf.one_hot(labels, depth=10, dtype=tf.int32)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\n\ntf.compat.v1.disable_eager_execution()\ninput = [10, 20, 30]\n# [Begin of Missing Code]\ndef my_map_func(i):\n  return [i, i+1, i+2]\nds = tf.data.Dataset.from_tensor_slices(input)\nds = ds.flat_map(lambda x: tf.data.Dataset.from_tensor_slices(my_map_func(x)))\nresult = list(ds.as_numpy_iterator())\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\ntf.compat.v1.disable_eager_execution()\n\nexample_input = [10, 20, 30]\ndef f(input=example_input):\n    # [Begin of Missing Code]\n    ds = tf.data.Dataset.from_tensor_slices(input)\n    ds = ds.flat_map(lambda x: tf.data.Dataset.from_tensor_slices(tf.compat.v1.py_func(my_map_func, [x], [tf.int64])))\n    result = []\n    iterator = ds.make_one_shot_iterator()\n    next_element = iterator.get_next()\n    with tf.compat.v1.Session() as sess:\n        for i in range(len(input)*3):\n            result.append(sess.run(next_element))\n    result = [item for sublist in result for item in sublist]\n    # [End of Missing Code]\n    return result\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\n\nlengths = [4, 3, 5, 2]\n# [Begin of Missing Code]\nmax_len = 8\nmask = tf.sequence_mask(lengths, maxlen=max_len, dtype=tf.int32)\n# [End of Missing Code]\nprint(mask)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\n\nlengths = [4, 3, 5, 2]\n# [Begin of Missing Code]\nmax_len = 8\nmask = tf.sequence_mask(lengths, maxlen=max_len, dtype=tf.float32)\nresult = 1 - mask\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\n\nlengths = [4, 3, 5, 2]\n# [Begin of Missing Code]\nmax_len = 8\nmask = tf.sequence_mask(lengths, maxlen=max_len, dtype=tf.float32)\n# [End of Missing Code]\nprint(mask)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\nexample_lengths = [4, 3, 5, 2]\ndef f(lengths=example_lengths):\n    max_length = tf.reduce_max(lengths)\n    mask = tf.sequence_mask(lengths, max_length, dtype=tf.int32)\n    padded_mask = tf.pad(mask, [[0,0],[0,8-max_length]])\n    return padded_mask\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\nlengths = [4, 3, 5, 2]\n# [Begin of Missing Code]\nmax_len = tf.reduce_max(lengths)\nmask = tf.sequence_mask(lengths, maxlen=max_len, dtype=tf.float32)\npadded_mask = tf.pad(mask, [[0, 0], [0, 8 - max_len]], constant_values=1)\nresult = padded_mask[:, :8]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\na = tf.constant([1,2,3])\nb = tf.constant([4,5,6,7])\n# [Begin of Missing Code]\nresult = tf.transpose([tf.tile(a, [tf.shape(b)[0]]), tf.repeat(b, tf.shape(a)[0])])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport tensorflow as tf\n\nexample_a = tf.constant([1,2,3])\nexample_b = tf.constant([4,5,6,7])\ndef f(a=example_a,b=example_b):\n    # [Begin of Missing Code]\n    result = tf.transpose([tf.tile(a, [tf.shape(b)[0]]), tf.repeat(b, tf.shape(a)[0])])\n    # [End of Missing Code]\n    return result\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\nimport numpy as np\n\nnp.random.seed(10)\na = tf.constant(np.random.rand(50, 100, 1, 512))\n# [Begin of Missing Code]\nresult = tf.squeeze(a, axis=2)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\nimport numpy as np\n\n\nnp.random.seed(10)\na = tf.constant(np.random.rand(50, 100, 512))\n# [Begin of Missing Code]\nresult = tf.expand_dims(a, axis=2)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\nimport numpy as np\n\n\nnp.random.seed(10)\na = tf.constant(np.random.rand(50, 100, 512))\n# [Begin of Missing Code]\nresult = tf.reshape(a, [1, 50, 100, 1, 512])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport tensorflow as tf\nimport numpy as np\n\nnp.random.seed(10)\nA = tf.constant(np.random.randint(100,size=(5, 3)))\n# [Begin of Missing Code]\nresult = tf.reduce_sum(A, axis=1)\n# [End of Missing Code]\n### output your answer to the variable 'result'\nprint(result)\n```",
        "```python\nimport tensorflow as tf\nimport numpy as np\n\nnp.random.seed(10)\nA = tf.constant(np.random.randint(100,size=(5, 3)))\n# [Begin of Missing Code]\nresult = tf.reduce_prod(A, axis=1)\n# [End of Missing Code]\n### output your answer to the variable 'result'\nprint(result)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\nA = tf.constant([-0.5, -0.1, 0, 0.1, 0.5, 2], dtype=tf.float32)\n# [Begin of Missing Code]\nresult = tf.math.reciprocal(A)\n# [End of Missing Code]\n### output your answer to the variable 'result'\nprint(result)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\n\na = tf.constant([\n  [1,1,1],\n  [1,1,1]\n])\nb = tf.constant([\n  [0,0,0],\n  [1,1,1]\n])\n# [Begin of Missing Code]\nresult = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=1)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\na = tf.constant([\n  [1,1,1],\n  [0,1,1]\n])\nb = tf.constant([\n  [0,0,1],\n  [1,1,1]\n])\n# [Begin of Missing Code]\nresult = tf.reduce_sum(tf.square(tf.subtract(a, b)), axis=0)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport tensorflow as tf\n\nexample_a = tf.constant([\n  [1,1,1],\n  [1,1,1]\n])\nexample_b = tf.constant([\n  [0,0,0],\n  [1,1,1]\n])\ndef f(A=example_a,B=example_b):\n    # [Begin of Missing Code]\n    result = tf.reduce_sum(tf.square(tf.subtract(A, B)), axis=1)\n    # [End of Missing Code]\n    return result\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\n\nx = [[1,2,3],[4,5,6]]\ny = [0,1]\nz = [1,2]\nx = tf.constant(x)\ny = tf.constant(y)\nz = tf.constant(z)\n# [Begin of Missing Code]\nindices = tf.transpose([y, z])\nresult = tf.gather_nd(x, indices)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\nx = [[1,2,3],[4,5,6]]\nrow = [0,0]\ncol = [1,2]\nx = tf.constant(x)\nrow = tf.constant(row)\ncol = tf.constant(col)\n# [Begin of Missing Code]\nindices = tf.transpose([row, col])\nresult = tf.gather_nd(x, indices)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\nexample_x = [[1,2,3],[4,5,6]]\nexample_y = [0,1]\nexample_z = [1,2]\nexample_x = tf.constant(example_x)\nexample_y = tf.constant(example_y)\nexample_z = tf.constant(example_z)\ndef f(x=example_x,y=example_y,z=example_z):\n    # [Begin of Missing Code]\n    m = tf.gather_nd(x,tf.transpose([y,z]))\n    # [End of Missing Code]\n    return m\n```",
        "```python\nimport tensorflow as tf\nimport numpy as np\n\n\nnp.random.seed(10)\nA = tf.constant(np.random.randint(low=0, high=5, size=(10, 20, 30)))\nB = tf.constant(np.random.randint(low=0, high=5, size=(10, 20, 30)))\n# [Begin of Missing Code]\nresult = tf.einsum('ijk, ljk->ilj', A, B)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport tensorflow as tf\nimport numpy as np\n\nnp.random.seed(10)\nA = tf.constant(np.random.randint(low=0, high=5, size=(10, 20, 30)))\nB = tf.constant(np.random.randint(low=0, high=5, size=(10, 20, 30)))\n# [Begin of Missing Code]\nresult = tf.matmul(A, B, transpose_b=True)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\n\nx=[b'\\xd8\\xa8\\xd9\\x85\\xd8\\xb3\\xd8\\xa3\\xd9\\x84\\xd8\\xa9',\n    b'\\xd8\\xa5\\xd9\\x86\\xd8\\xb4\\xd8\\xa7\\xd8\\xa1',\n    b'\\xd9\\x82\\xd8\\xb6\\xd8\\xa7\\xd8\\xa1',\n    b'\\xd8\\xac\\xd9\\x86\\xd8\\xa7\\xd8\\xa6\\xd9\\x8a',\n    b'\\xd8\\xaf\\xd9\\x88\\xd9\\x84\\xd9\\x8a']\n# [Begin of Missing Code]\nresult = [s.decode('utf-8') for s in x]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\nexample_x=[b'\\xd8\\xa8\\xd9\\x85\\xd8\\xb3\\xd8\\xa3\\xd9\\x84\\xd8\\xa9',\n    b'\\xd8\\xa5\\xd9\\x86\\xd8\\xb4\\xd8\\xa7\\xd8\\xa1',\n    b'\\xd9\\x82\\xd8\\xb6\\xd8\\xa7\\xd8\\xa1',\n    b'\\xd8\\xac\\xd9\\x86\\xd8\\xa7\\xd8\\xa6\\xd9\\x8a',\n    b'\\xd8\\xaf\\xd9\\x88\\xd9\\x84\\xd9\\x8a']\ndef f(x=example_x):\n    # [Begin of Missing Code]\n    result = [s.decode('utf-8') for s in x]\n    # [End of Missing Code]\n    return result\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\n\nx = [[[[1, 2, 3], [2, 3, 4], [0, 0, 0]],\n      [[1, 2, 3], [2, 0, 4], [3, 4, 5]],\n      [[1, 2, 3], [0, 0, 0], [0, 0, 0]],\n      [[1, 2, 3], [1, 2, 3], [0, 0, 0]]],\n     [[[1, 2, 3], [0, 1, 0], [0, 0, 0]],\n      [[1, 2, 3], [2, 3, 4], [0, 0, 0]],\n      [[1, 2, 3], [0, 0, 0], [0, 0, 0]],\n      [[1, 2, 3], [1, 2, 3], [1, 2, 3]]]]\nx = tf.convert_to_tensor(x, dtype=tf.float32)\n# [Begin of Missing Code]\nmask = tf.cast(tf.math.not_equal(x, 0), tf.float32)\nsums = tf.reduce_sum(x, axis=-2)\ncounts = tf.reduce_sum(mask, axis=-2)\nresult = tf.math.divide_no_nan(sums, counts)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport tensorflow as tf\n\nx = [[[[1, 2, 3], [2, 3, 4], [0, 0, 0]],\n      [[1, 2, 3], [2, 0, 4], [3, 4, 5]],\n      [[1, 2, 3], [0, 0, 0], [0, 0, 0]],\n      [[1, 2, 3], [1, 2, 3], [0, 0, 0]]],\n     [[[1, 2, 3], [0, 1, 0], [0, 0, 0]],\n      [[1, 2, 3], [2, 3, 4], [0, 0, 0]],\n      [[1, 2, 3], [0, 0, 0], [0, 0, 0]],\n      [[1, 2, 3], [1, 2, 3], [1, 2, 3]]]]\nx = tf.convert_to_tensor(x, dtype=tf.float32)\n\n# [Begin of Missing Code]\nmask = tf.cast(tf.math.not_equal(x, 0), tf.float32)\nmean = tf.reduce_sum(x, axis=-2) / tf.reduce_sum(mask, axis=-2)\nvariance = tf.reduce_sum(tf.square(x - mean) * mask, axis=-2) / tf.reduce_sum(mask, axis=-2)\nresult = tf.math.sqrt(variance)\n# [End of Missing Code]\n\nprint(result)\n```",
        "```python\nimport tensorflow as tf\n\nexample_x = [[[[1, 2, 3], [2, 3, 4], [0, 0, 0]],\n      [[1, 2, 3], [2, 0, 4], [3, 4, 5]],\n      [[1, 2, 3], [0, 0, 0], [0, 0, 0]],\n      [[1, 2, 3], [1, 2, 3], [0, 0, 0]]],\n     [[[1, 2, 3], [0, 1, 0], [0, 0, 0]],\n      [[1, 2, 3], [2, 3, 4], [0, 0, 0]],\n      [[1, 2, 3], [0, 0, 0], [0, 0, 0]],\n      [[1, 2, 3], [1, 2, 3], [1, 2, 3]]]]\nexample_x = tf.convert_to_tensor(example_x, dtype=tf.float32)\n\ndef f(x=example_x):\n    # [Begin of Missing Code]\n    mask = tf.cast(tf.math.not_equal(x, 0), tf.float32)\n    sum_mask = tf.reduce_sum(mask, axis=-2)\n    sum_mask = tf.where(tf.equal(sum_mask, 0), tf.ones_like(sum_mask), sum_mask)\n    result = tf.reduce_sum(x, axis=-2) / sum_mask\n    # [End of Missing Code]\n    return result\n```",
        "```python\nimport tensorflow as tf\n\ntf.random.set_seed(10)\nA = tf.random.normal([100,100])\nB = tf.random.normal([100,100])\nresult = tf.reduce_sum(tf.matmul(A,B)).numpy()\nprint(result)\n```\n\nNote: In Tensorflow 2, eager execution is enabled by default, so there is no need to use the Session class. Instead, we can directly run the operations and get the result using the .numpy() method.",
        "```python\nimport tensorflow as tf\n\n\na = tf.constant(\n    [[0.3232, -0.2321, 0.2332, -0.1231, 0.2435, 0.6728],\n     [0.2323, -0.1231, -0.5321, -0.1452, 0.5435, 0.1722],\n     [0.9823, -0.1321, -0.6433, 0.1231, 0.023, 0.0711]]\n)\n# [Begin of Missing Code]\nresult = tf.argmax(a, axis=1)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport tensorflow as tf\n\n\na = tf.constant(\n    [[0.3232, -0.2321, 0.2332, -0.1231, 0.2435, 0.6728],\n     [0.2323, -0.1231, -0.5321, -0.1452, 0.5435, 0.1722],\n     [0.9823, -0.1321, -0.6433, 0.1231, 0.023, 0.0711]]\n)\n# [Begin of Missing Code]\nresult = tf.argmax(a, axis=1)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport tensorflow as tf\n\nexample_a = tf.constant(\n    [[0.3232, -0.2321, 0.2332, -0.1231, 0.2435, 0.6728],\n     [0.2323, -0.1231, -0.5321, -0.1452, 0.5435, 0.1722],\n     [0.9823, -0.1321, -0.6433, 0.1231, 0.023, 0.0711]]\n)\ndef f(a=example_a):\n    # [Begin of Missing Code]\n    result = tf.argmax(a, axis=1)\n    # [End of Missing Code]\n    return result\n```",
        "```python\nimport tensorflow as tf\n\na = tf.constant(\n    [[0.3232, -0.2321, 0.2332, -0.1231, 0.2435, 0.6728],\n     [0.2323, -0.1231, -0.5321, -0.1452, 0.5435, 0.1722],\n     [0.9823, -0.1321, -0.6433, 0.1231, 0.023, 0.0711]]\n)\n# [Begin of Missing Code]\nresult = tf.math.argmin(a, axis=0)\n# [End of Missing Code]\nprint(result)\n```",
        "#Save the model in \"export/1\"\nmodel.save(\"export/1\", save_format='tf')",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\nseed_x = 10\ntf.random.set_seed(seed_x)\n### return the tensor as variable 'result'\n# [Begin of Missing Code]\nresult = tf.random.uniform(shape=[10], minval=1, maxval=5, dtype=tf.int32)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport tensorflow as tf\n\nseed_x = 10\ntf.random.set_seed(seed_x)\n### return the tensor as variable 'result'\n# [Begin of Missing Code]\nresult = tf.random.uniform(shape=[114], minval=2, maxval=6, dtype=tf.int32)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport tensorflow as tf\n\ndef f(seed_x=10):\n    tf.random.set_seed(seed_x)\n    # [Begin of Missing Code]\n    result = tf.random.uniform(shape=[10], minval=1, maxval=5, dtype=tf.int32)\n    # [End of Missing Code]\n    return result\n```",
        "```python\nimport tensorflow as tf\n\n### output the version of tensorflow into variable 'result'\n# [Begin of Missing Code]\nresult = tf.__version__\n# [End of Missing Code]\nprint(result)\n```"
    ],
    "Scipy": [
        "```python\nimport numpy as np\nimport scipy\nx = np.array([1, 7, 20, 50, 79])\ny = np.array([10, 19, 30, 35, 51])\n# [Begin of Missing Code]\nresult = np.polyfit(np.log(x), y, 1)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nimport scipy\nx = np.array([1, 7, 20, 50, 79])\ny = np.array([10, 19, 30, 35, 51])\n# [Begin of Missing Code]\nresult = np.polyfit(np.log(x), y, 1)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport scipy.optimize\ny = np.array([1, 7, 20, 50, 79])\nx = np.array([10, 19, 30, 35, 51])\np0 = (4, 0.1, 1)\n# [Begin of Missing Code]\ndef func(x, A, B, C):\n    return A * np.exp(B * x) + C\n\nresult, _ = scipy.optimize.curve_fit(func, x, y, p0=p0)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nfrom scipy import stats\nimport numpy as np\nnp.random.seed(42)\nx = np.random.normal(0, 1, 1000)\ny = np.random.normal(0, 1, 1000)\n# [Begin of Missing Code]\nstatistic, p_value = stats.ks_2samp(x, y)\n# [End of Missing Code]\nprint(statistic, p_value)\n```",
        "# [Begin of Missing Code]\ntest_stat, p_value = stats.ks_2samp(x, y)\nresult = p_value < alpha\n# [End of Missing Code]",
        "[Solution Code]\n```python\nimport scipy.optimize as optimize\nfrom math import *\n\ninitial_guess = [-1, 0, -3]\n\ndef f(x):\n    a, b, c = x\n    return ((a+b-c)-2)**2 + ((3*a-b-c))**2 + sin(b) + cos(b) + 4\n\nresult = optimize.minimize(f, initial_guess)\n\nprint(result.x)\n```\n\n[Explanation]\nTo minimize a function with multiple variables, we need to define the function to take in a list of variables and then unpack them inside the function. In this case, we define the function `f(x)` to take in a list `x` and then unpack the variables `a`, `b`, and `c` from `x`. We then return the value of the function using these variables.\n\nWe then use `optimize.minimize` to minimize the function `f` with respect to the initial guess `initial_guess`. The result of the optimization is stored in the variable `result`.\n\nFinally, we print out the values of `a`, `b`, and `c` that minimize the function using `result.x`.",
        "```python\nimport numpy as np\nimport scipy.stats\nz_scores = np.array([-3, -2, 0, 2, 2.5])\n# [Begin of Missing Code]\np_values = scipy.stats.norm.sf(abs(z_scores))\n# [End of Missing Code]\nprint(p_values)\n```",
        "```python\nimport scipy.stats\nimport numpy as np\nz_scores = [-3, -2, 0, 2, 2.5]\nmu = 3\nsigma = 4\n# [Begin of Missing Code]\np_values = scipy.stats.norm(mu, sigma).cdf(z_scores)\n# [End of Missing Code]\nprint(p_values)\n```",
        "```python\nimport numpy as np\nimport scipy.stats\np_values = [0.1, 0.225, 0.5, 0.75, 0.925, 0.95]\n# [Begin of Missing Code]\nz_scores = scipy.stats.norm.ppf(p_values)\n# [End of Missing Code]\nprint(z_scores)\n```",
        "```python\nimport numpy as np\nfrom scipy import stats\nstddev = 2.0785\nmu = 1.744\nx = 25\n# [Begin of Missing Code]\ndist = stats.lognorm(s=stddev, scale=np.exp(mu))\nresult = dist.cdf(x)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nfrom scipy import stats\nstddev = 2.0785\nmu = 1.744\n# [Begin of Missing Code]\ndist = stats.lognorm(s=stddev, scale=np.exp(mu))\nexpected_value = dist.mean()\nmedian = dist.median()\n# [End of Missing Code]\nprint(expected_value, median)\n```",
        "from scipy import sparse\nimport numpy as np\nsa = sparse.csr_matrix(np.array([[1,2,3],[4,5,6],[7,8,9]]))\nsb = sparse.csr_matrix(np.array([0,1,2]))\n# [Begin of Missing Code]\nresult = sa.multiply(sb.T)\n# [End of Missing Code]\nprint(result)",
        "```python\nfrom scipy import sparse\nimport numpy as np\nexample_sA = sparse.csr_matrix(np.array([[1,2,3],[4,5,6],[7,8,9]]))\nexample_sB = sparse.csr_matrix(np.array([0,1,2]))\ndef f(sA = example_sA, sB = example_sB):\n    # [Begin of Missing Code]\n    result = sA.multiply(sparse.csr_matrix(np.tile(sB, (sA.shape[0], 1))))\n    # [End of Missing Code]\n    return result\n```",
        "```python\nimport numpy as np\nimport scipy.interpolate\n\npoints = np.array([\n        [ 27.827,  18.53 , -30.417], [ 24.002,  17.759, -24.782],\n        [ 22.145,  13.687, -33.282], [ 17.627,  18.224, -25.197],\n        [ 29.018,  18.841, -38.761], [ 24.834,  20.538, -33.012],\n        [ 26.232,  22.327, -27.735], [ 23.017,  23.037, -29.23 ],\n        [ 28.761,  21.565, -31.586], [ 26.263,  23.686, -32.766]])\nV = np.array([0.205,  0.197,  0.204,  0.197,  0.212,\n                   0.208,  0.204,  0.205, 0.211,  0.215])\nrequest = np.array([[25, 20, -30]])\n# [Begin of Missing Code]\ninterp = scipy.interpolate.LinearNDInterpolator(points, V)\nresult = interp(request)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nimport scipy.interpolate\n\npoints = np.array([\n        [ 27.827,  18.53 , -30.417], [ 24.002,  17.759, -24.782],\n        [ 22.145,  13.687, -33.282], [ 17.627,  18.224, -25.197],\n        [ 29.018,  18.841, -38.761], [ 24.834,  20.538, -33.012],\n        [ 26.232,  22.327, -27.735], [ 23.017,  23.037, -29.23 ],\n        [ 28.761,  21.565, -31.586], [ 26.263,  23.686, -32.766]])\nV = np.array([0.205,  0.197,  0.204,  0.197,  0.212,\n                   0.208,  0.204,  0.205, 0.211,  0.215])\nrequest = np.array([[25, 20, -30], [27, 20, -32]])\n# [Begin of Missing Code]\ninterp = scipy.interpolate.LinearNDInterpolator(points, V)\nresult = interp(request)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nfrom scipy import misc\nfrom scipy.ndimage import rotate\nimport numpy as np\ndata_orig = misc.face()\nx0,y0 = 580,300 # left eye; (xrot,yrot) should point there\nangle = np.random.randint(1, 360)\n# [Begin of Missing Code]\ncenter = np.array([data_orig.shape[1]/2, data_orig.shape[0]/2])\nrot_mat = np.array([[np.cos(np.deg2rad(angle)), -np.sin(np.deg2rad(angle))], [np.sin(np.deg2rad(angle)), np.cos(np.deg2rad(angle))]])\noffset = center - np.dot(rot_mat, center)\nxrot, yrot = np.dot(rot_mat, np.array([x0, y0])) + offset\ndata_rot = rotate(data_orig, angle)\n# [End of Missing Code]\nprint(data_rot, (xrot, yrot))\n```",
        "```python\nimport numpy as np\nfrom scipy.sparse import csr_matrix\n\narr = np.random.rand(4, 4)\nM = csr_matrix(arr)\n# [Begin of Missing Code]\nresult = M.diagonal()\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nresult = stats.kstest(times, lambda x: x/T, N=len(times))\n```\n",
        "```python\nfrom scipy import stats\nimport random\nimport numpy as np\ndef poisson_simul(rate, T):\n    time = random.expovariate(rate)\n    times = [0]\n    while (times[-1] < T):\n        times.append(time+times[-1])\n        time = random.expovariate(rate)\n    return times[1:]\nexample_rate = 1.0\nexample_T = 100.0\nexample_times = poisson_simul(example_rate, example_T)\ndef f(times = example_times, rate = example_rate, T = example_T):\n    # [Begin of Missing Code]\n    result = stats.kstest(times, lambda x: x/T, args=(rate, T)).pvalue\n    # [End of Missing Code]\n    return result\n```",
        "```python\nfrom scipy import stats\nimport random\nimport numpy as np\ndef poisson_simul(rate, T):\n    time = random.expovariate(rate)\n    times = [0]\n    while (times[-1] < T):\n        times.append(time+times[-1])\n        time = random.expovariate(rate)\n    return times[1:]\nrate = 1.0\nT = 100.0\ntimes = poisson_simul(rate, T)\n# [Begin of Missing Code]\nresult = stats.kstest(times, 'uniform')\nresult = result.pvalue >= 0.05\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nfrom scipy.sparse import hstack\nFeature = hstack([c1, c2])\n```",
        "```python\nfrom scipy import sparse\nc1 = sparse.csr_matrix([[0, 0, 1, 0], [2, 0, 0, 0], [0, 0, 0, 0]])\nc2 = sparse.csr_matrix([[0, 3, 4, 0], [0, 0, 0, 5], [6, 7, 0, 8]])\n# [Begin of Missing Code]\nFeature = sparse.hstack([c1, c2])\n# [End of Missing Code]\n#print(Feature)\n```",
        "[Solution Code]\n```python\nfrom scipy import sparse\nc1 = sparse.csr_matrix([[0, 0, 1, 0], [2, 0, 0, 0], [0, 0, 0, 0]])\nc2 = sparse.csr_matrix([[0, 3, 4, 0], [0, 0, 0, 5], [6, 7, 0, 8]])\n# [Begin of Missing Code]\nFeature = sparse.vstack([c1, c2])\n# [End of Missing Code]\n#print(Feature)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport scipy.spatial\nimport scipy.optimize\npoints1 = np.array([(x, y) for x in np.linspace(-1,1,7) for y in np.linspace(-1,1,7)])\nN = points1.shape[0]\npoints2 = 2*np.random.rand(N,2)-1\n# [Begin of Missing Code]\ndist_matrix = scipy.spatial.distance.cdist(points1, points2)\ndef objective(x, dist_matrix):\n    return np.sum(dist_matrix[x,np.arange(N)])\nx0 = np.arange(N)\nresult = scipy.optimize.minimize(objective, x0, args=(dist_matrix,))\n# [End of Missing Code]\nprint(result.x)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport scipy.spatial\nimport scipy.optimize\npoints1 = np.array([(x, y) for x in np.linspace(-1,1,7) for y in np.linspace(-1,1,7)])\nN = points1.shape[0]\npoints2 = 2*np.random.rand(N,2)-1\n# [Begin of Missing Code]\ndist_matrix = scipy.spatial.distance.cdist(points1, points2, metric='cityblock')\nrow_ind, col_ind = scipy.optimize.linear_sum_assignment(dist_matrix)\nresult = col_ind\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nfrom scipy import sparse\nimport numpy as np\na = np.ones((2, 2))\nb = sparse.csr_matrix(a)\n# [Begin of Missing Code]\nb.setdiag(0)\nb.eliminate_zeros()\n# [End of Missing Code]\nprint(b)\n```",
        "```python\nimport numpy as np\nfrom scipy import ndimage\n\nnp.random.seed(10)\ngen = np.random.RandomState(0)\nimg = gen.poisson(2, size=(512, 512))\nimg = ndimage.gaussian_filter(img.astype(np.double), (30, 30))\nimg -= img.min()\nimg /= img.max()\nthreshold = 0.75\n# [Begin of Missing Code]\nlabeled_array, num_features = ndimage.label(img > threshold)\nresult = num_features\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nfrom scipy import ndimage\n\nnp.random.seed(10)\ngen = np.random.RandomState(0)\nimg = gen.poisson(2, size=(512, 512))\nimg = ndimage.gaussian_filter(img.astype(np.double), (30, 30))\nimg -= img.min()\nimg /= img.max()\nthreshold = 0.75\n# [Begin of Missing Code]\nlabeled_array, num_features = ndimage.label(img < threshold)\nresult = num_features\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nfrom scipy import ndimage\nnp.random.seed(10)\ngen = np.random.RandomState(0)\nimg = gen.poisson(2, size=(512, 512))\nimg = ndimage.gaussian_filter(img.astype(np.double), (30, 30))\nimg -= img.min()\nexample_img /= img.max()\n\ndef f(img = example_img):\n    threshold = 0.75\n    labeled, num_regions = ndimage.label(img > threshold)\n    result = num_regions\n    return result\n```\n\nExplanation:\n- `ndimage.label` function is used to label connected regions in the binary image where the value is greater than the threshold.\n- The labeled image and the number of regions are returned by the function.\n- The number of regions is assigned to the `result` variable and returned.",
        "```python\nimport numpy as np\nfrom scipy import ndimage\n\nnp.random.seed(10)\ngen = np.random.RandomState(0)\nimg = gen.poisson(2, size=(512, 512))\nimg = ndimage.gaussian_filter(img.astype(np.double), (30, 30))\nimg -= img.min()\nimg /= img.max()\nthreshold = 0.75\n\n# Begin of Missing Code\nlabeled, num_features = ndimage.label(img > threshold)\ncenters = ndimage.center_of_mass(img, labeled, range(1, num_features+1))\nresult = [np.sqrt(center[0]**2 + center[1]**2) for center in centers]\n# End of Missing Code\n\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nfrom scipy.sparse import lil_matrix\nfrom scipy import sparse\n\nM= sparse.random(10, 10, density=0.1, format='lil')\n# [Begin of Missing Code]\nM = M + M.transpose()\n# [End of Missing Code]\nprint(M)\n```",
        "```python\nsA = sA + sA.T - sA.multiply(sA.T)\n```\nThe above code will make the lil_matrix symmetric by adding its transpose to itself and subtracting the diagonal elements. This will ensure that both sA[i,j] and sA[j,i] have the same value for any i,j.",
        "```python\nimport numpy as np\nimport scipy.ndimage\nsquare = np.zeros((32, 32))\nsquare[10:-10, 10:-10] = 1\nnp.random.seed(12)\nx, y = (32*np.random.random((2, 20))).astype(int)\nsquare[x, y] = 1\n# [Begin of Missing Code]\nstructure = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])\nlabeled_array, num_features = scipy.ndimage.label(square)\nfor i in range(1, num_features+1):\n    feature_mask = labeled_array == i\n    if np.sum(scipy.ndimage.binary_dilation(feature_mask, structure=structure) & ~feature_mask) == 0:\n        square[feature_mask] = 0\n# [End of Missing Code]\nprint(square)\n```",
        "```python\nimport numpy as np\nimport scipy.ndimage\nsquare = np.zeros((32, 32))\nsquare[10:-10, 10:-10] = np.random.randint(1, 255, size = (12, 12))\nnp.random.seed(12)\nx, y = (32*np.random.random((2, 20))).astype(int)\nsquare[x, y] = np.random.randint(1, 255, size = (20,))\n# [Begin of Missing Code]\nstructure = np.array([[1, 1, 1], [1, 0, 1], [1, 1, 1]])\nlabeled_array, num_features = scipy.ndimage.label(square)\nfor i in range(1, num_features+1):\n    feature_mask = labeled_array == i\n    if np.sum(np.logical_and(feature_mask, structure)) == np.sum(feature_mask):\n        square[feature_mask] = 0\n# [End of Missing Code]\nprint(square)\n```",
        "```python\n# [Begin of Missing Code]\nmean = col.mean()\nstandard_deviation = col.std()\n# [End of Missing Code]\n```",
        "```python\nMax = col.max()\nMin = col.min()\n```",
        "[Solution Code]\n```python\nimport numpy as np\nfrom scipy.sparse import csr_matrix\n\nnp.random.seed(10)\narr = np.random.randint(4,size=(988,988))\nsA = csr_matrix(arr)\ncol = sA.getcol(0)\n# [Begin of Missing Code]\nMedian = np.median(col.data)\nMode = np.bincount(col.data).argmax()\n# [End of Missing Code]\nprint(Median)\nprint(Mode)\n```",
        "# [Begin of Missing Code]\ndef fourier(x, *a):\n    result = 0\n    for i in range(1, degree+1):\n        result += a[i-1] * np.cos(i * np.pi / tau * x)\n    return result\n\npopt, pcov = curve_fit(fourier, z, Ua, p0=[1]*degree)\n# [End of Missing Code]",
        "```python\nimport numpy as np\nimport scipy.spatial.distance\nexample_array = np.array([[0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 2, 0, 2, 2, 0, 6, 0, 3, 3, 3],\n                          [0, 0, 0, 0, 2, 2, 0, 0, 0, 3, 3, 3],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3],\n                          [1, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 3],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 0],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 0],\n                          [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                          [1, 0, 1, 0, 0, 0, 0, 5, 5, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]])\n# [Begin of Missing Code]\nn = np.max(example_array) + 1\ncoords = np.array(list(zip(*np.where(example_array > 0))))\ndists = scipy.spatial.distance.cdist(coords, coords)\nresult = np.zeros((n, n))\nfor i in range(n):\n    for j in range(i+1, n):\n        result[i, j] = np.min(dists[np.where(example_array == i), np.where(example_array == j)])\n        result[j, i] = result[i, j]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nimport scipy.spatial.distance\nexample_array = np.array([[0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 2, 0, 2, 2, 0, 6, 0, 3, 3, 3],\n                          [0, 0, 0, 0, 2, 2, 0, 0, 0, 3, 3, 3],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3],\n                          [1, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 3],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 0],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 0],\n                          [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                          [1, 0, 1, 0, 0, 0, 0, 5, 5, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]])\n# [Begin of Missing Code]\nn_regions = np.max(example_array) + 1\ncoords = np.array(list(zip(*np.where(example_array > 0))))\ndistances = scipy.spatial.distance.cdist(coords, coords, metric='cityblock')\nresult = np.zeros((n_regions, n_regions, 3))\nfor i in range(n_regions):\n    for j in range(i+1, n_regions):\n        mask_i = example_array == i\n        mask_j = example_array == j\n        min_dist = np.min(distances[mask_i][:, mask_j])\n        result[i, j] = [i, j, min_dist]\n        result[j, i] = [j, i, min_dist]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport scipy.spatial.distance\nexample_arr = np.array([[0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0],\n                          [0, 0, 2, 0, 2, 2, 0, 6, 0, 3, 3, 3],\n                          [0, 0, 0, 0, 2, 2, 0, 0, 0, 3, 3, 3],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3],\n                          [1, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 3],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 0],\n                          [1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0, 0],\n                          [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                          [1, 0, 1, 0, 0, 0, 0, 5, 5, 0, 0, 0],\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]])\ndef f(example_array = example_arr):\n    # [Begin of Missing Code]\n    # Get the indices of all unique IDs in the array\n    unique_ids = np.unique(example_array)\n    # Create an empty N*N array to store the pairwise distances\n    result = np.zeros((len(unique_ids), len(unique_ids), 3))\n    # Loop through all unique ID pairs and calculate the pairwise distances\n    for i in range(len(unique_ids)):\n        for j in range(i+1, len(unique_ids)):\n            # Get the indices of all cells with the current unique IDs\n            idx_i = np.argwhere(example_array == unique_ids[i])\n            idx_j = np.argwhere(example_array == unique_ids[j])\n            # Calculate the pairwise distances between the cells with the current unique IDs\n            dist = scipy.spatial.distance.cdist(idx_i, idx_j, 'euclidean')\n            # Get the minimum distance between the cells with the current unique IDs\n            min_dist = np.min(dist)\n            # Store the pairwise distances in the result array\n            result[i,j] = [unique_ids[i], unique_ids[j], min_dist]\n            result[j,i] = [unique_ids[j], unique_ids[i], min_dist]\n    # [End of Missing Code]\n    return result\n```",
        "```python\nfrom scipy import interpolate\nimport numpy as np\nx = np.array([[0.12, 0.11, 0.1, 0.09, 0.08],\n              [0.13, 0.12, 0.11, 0.1, 0.09],\n              [0.15, 0.14, 0.12, 0.11, 0.1],\n              [0.17, 0.15, 0.14, 0.12, 0.11],\n              [0.19, 0.17, 0.16, 0.14, 0.12],\n              [0.22, 0.19, 0.17, 0.15, 0.13],\n              [0.24, 0.22, 0.19, 0.16, 0.14],\n              [0.27, 0.24, 0.21, 0.18, 0.15],\n              [0.29, 0.26, 0.22, 0.19, 0.16]])\ny = np.array([[71.64, 78.52, 84.91, 89.35, 97.58],\n              [66.28, 73.67, 79.87, 85.36, 93.24],\n              [61.48, 69.31, 75.36, 81.87, 89.35],\n              [57.61, 65.75, 71.7, 79.1, 86.13],\n              [55.12, 63.34, 69.32, 77.29, 83.88],\n              [54.58, 62.54, 68.7, 76.72, 82.92],\n              [56.58, 63.87, 70.3, 77.69, 83.53],\n              [61.67, 67.79, 74.41, 80.43, 85.86],\n              [70.08, 74.62, 80.93, 85.06, 89.84]])\nx_val = np.linspace(-1, 1, 100)\n# [Begin of Missing Code]\nresult = []\nfor i in range(5):\n    tck = interpolate.splrep(x[:, i], y[:, i], k=2, s=4)\n    y_int = interpolate.splev(x_val, tck, der=0)\n    result.append(y_int)\nresult = np.array(result)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport scipy.stats as ss\nx1=[38.7,  41.5,  43.8,  44.5,  45.5,  46.0,  47.7,  58.0]\nx2=[39.2,  39.3,  39.7,  41.4,  41.8,  42.9,  43.3,  45.8]\nx3=[34.0,  35.0,  39.0,  40.0,  43.0,  43.0,  44.0,  45.0]\nx4=[34.0,  34.8,  34.8,  35.4,  37.2,  37.8,  41.2,  42.8]\n# [Begin of Missing Code]\nstatistic, critical_values, significance_level = ss.anderson_ksamp([x1, x2, x3, x4])\n# [End of Missing Code]\nprint(statistic, critical_values, significance_level)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport scipy.stats as ss\nx1=[38.7,  41.5,  43.8,  44.5,  45.5,  46.0,  47.7,  58.0]\nx2=[39.2,  39.3,  39.7,  41.4,  41.8,  42.9,  43.3,  45.8]\n# [Begin of Missing Code]\nresult = ss.anderson_ksamp([x1, x2])\n# [End of Missing Code]\nprint(result)\n```\n\nNote: The `ss.anderson_ksamp` function takes a list of arrays as input, so we can pass both `x1` and `x2` as a list to the function. The `result` variable will contain the test statistic and the p-value. To interpret the result, we can compare the p-value with the significance level (0.05 in this case) and if it is less than or equal to the significance level, we reject the null hypothesis that the two arrays are drawn from the same population. Therefore, the result will be `False`.",
        "```python\nimport pandas as pd\nimport numpy as np\nimport scipy.stats as stats\ndf = pd.DataFrame([[1, 5, 2], [2, 4, 4], [3, 3, 1], [4, 2, 2], [5, 1, 4]], \n                 columns=['A', 'B', 'C'], index = [1, 2, 3, 4, 5])\n\ndef tau1(x, y):\n    tau, p_value = stats.kendalltau(x, y)\n    return tau\n\ndef kendall_tau(df, window):\n    df_corr = df.rolling(window=window)\n    df_corr = df_corr.corr(tau1)\n    df_corr = df_corr.iloc[::2, 1::]\n    df_corr.columns = [''.join(col).strip() for col in df_corr.columns.values]\n    return df_corr\n\ndf_corr = kendall_tau(df, 3)\ndf = pd.concat([df, df_corr], axis=1)\nprint(df)\n```",
        "[Solution Code]\n```python\nfrom scipy import sparse\nsa = sparse.random(10, 10, density = 0.01, format = 'csr')\n# [Begin of Missing Code]\nresult = sa.nnz == 0\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nfrom scipy import sparse\nsa = sparse.random(10, 10, density = 0.01, format = 'lil')\n# [Begin of Missing Code]\nresult = sa.nnz == 0\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nfrom scipy.linalg import block_diag\nnp.random.seed(10)\na = np.random.rand(100,2,2)\n# [Begin of Missing Code]\nresult = block_diag(*a)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nfrom scipy import stats\nnp.random.seed(10)\npre_course_scores = np.random.randn(10)\nduring_course_scores = np.random.randn(10)\n# [Begin of Missing Code]\n_, p_value = stats.ranksums(pre_course_scores, during_course_scores)\n# [End of Missing Code]\nprint(p_value)\n```",
        "```python\nimport numpy as np\nfrom scipy import stats\nexample_pre_course_scores = np.random.randn(10)\nexample_during_course_scores = np.random.randn(10)\ndef f(pre_course_scores = example_pre_course_scores, during_course_scores = example_during_course_scores):\n    # [Begin of Missing Code]\n    _, p_value = stats.ranksums(pre_course_scores, during_course_scores)\n    # [End of Missing Code]\n    return p_value\n```",
        "[Solution Code]\n```python\nimport numpy as np\na = np.array([   1. ,    2. ,    2.5,  400. ,    6. ,    0. ])\n# [Begin of Missing Code]\nn = len(a)\nmean = np.mean(a)\nstd = np.std(a, ddof=0)\nkurtosis_result = np.sum((a-mean)**4)/(n*std**4)\n# [End of Missing Code]\nprint(kurtosis_result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport scipy.stats\na = np.array([   1. ,    2. ,    2.5,  400. ,    6. ,    0. ])\n# [Begin of Missing Code]\nkurtosis_result = scipy.stats.kurtosis(a, fisher=True, bias=False)\n# [End of Missing Code]\nprint(kurtosis_result)\n```",
        "```python\nimport numpy as np\nimport scipy.interpolate\ns = np.linspace(-1, 1, 50)\nt = np.linspace(-2, 0, 50)\nx, y = np.ogrid[-1:1:10j,-2:0:10j]\nz = (x + y)*np.exp(-6.0 * (x * x + y * y))\n# [Begin of Missing Code]\nf = scipy.interpolate.interp2d(x.ravel(), y.ravel(), z.ravel(), kind='cubic')\nresult = f(s, t).diagonal()\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport scipy.interpolate\nexample_s = np.linspace(-1, 1, 50)\nexample_t = np.linspace(-2, 0, 50)\ndef f(s = example_s, t = example_t):\n    x, y = np.ogrid[-1:1:10j,-2:0:10j]\n    z = (x + y)*np.exp(-6.0 * (x * x + y * y))\n    # [Begin of Missing Code]\n    interp_func = scipy.interpolate.interp2d(x.ravel(), y.ravel(), z.ravel(), kind='cubic')\n    result = interp_func(s, t).ravel()\n    # [End of Missing Code]\n    return result\n```",
        "```python\nimport numpy as np\npoints = [[0,0], [1,4], [2,3], [4,1], [1,1], [2,2], [5,3]]\nvor = scipy.spatial.Voronoi(points)\nextraPoints = [[0.5,0.2], [3, 0], [4,0],[5,0], [4,3]]\n# [Begin of Missing Code]\nresult = np.zeros(len(vor.regions))\nfor i, point in enumerate(extraPoints):\n    region_index = vor.point_region[i]\n    if region_index != -1:\n        result[region_index] += 1\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\npoints = [[0,0], [1,4], [2,3], [4,1], [1,1], [2,2], [5,3]]\nvor = scipy.spatial.Voronoi(points)\nextraPoints = [[0.5,0.2], [3, 0], [4,0],[5,0], [4,3]]\n# [Begin of Missing Code]\nresult = np.zeros(len(vor.regions))\nfor i, point in enumerate(extraPoints):\n    region_index = vor.point_region[i]\n    if region_index != -1:\n        result[region_index] += 1\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nimport scipy.sparse as sparse\n\nnp.random.seed(10)\nmax_vector_size = 1000\nvectors = [np.random.randint(100,size=900),np.random.randint(100,size=max_vector_size),np.random.randint(100,size=950)]\n# [Begin of Missing Code]\npadded_vectors = []\nfor vector in vectors:\n    padded_vector = np.pad(vector, (0, max_vector_size - len(vector)), mode='constant')\n    padded_vectors.append(padded_vector)\nresult = sparse.csr_matrix(padded_vectors)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nimport scipy.ndimage as nd\n\na= np.zeros((5, 5))\na[1:4, 1:4] = np.arange(3*3).reshape((3, 3))\n# [Begin of Missing Code]\nkernel = np.ones((3, 3))\nkernel[1, 0] = 0\nkernel[1, 2] = 0\nb = nd.median_filter(a, 3, origin=1, footprint=kernel)\n# [End of Missing Code]\nprint(b)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nfrom scipy.sparse import csr_matrix\n\narr = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]])\nM = csr_matrix(arr)\nrow = 2\ncolumn = 3\n# [Begin of Missing Code]\nresult = M[row, column]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nresult = []\nfor r, c in zip(row, column):\n    result.append(M[r, c])\nresult = np.array(result)\n```",
        "```python\nimport numpy as np\nimport scipy.interpolate\narray = np.random.randint(0, 9, size=(10, 10, 10))\nx = np.linspace(0, 10, 10)\nx_new = np.linspace(0, 10, 100)\n# [Begin of Missing Code]\nf = scipy.interpolate.interp1d(x, array, axis=0, kind='linear')\nnew_array = f(x_new)\n# [End of Missing Code]\nprint(new_array)\n```",
        "# [Begin of Missing Code]\nprob, _ = scipy.integrate.quad(NDfx, -np.inf, x, args=(u, o2))\n# [End of Missing Code]\nprint(prob)",
        "```python\nimport scipy.integrate\nimport math\nimport numpy as np\ndef NDfx(x):\n    return((1/math.sqrt((2*math.pi)))*(math.e**((-.5)*(x**2))))\ndef f(x = 2.5, u = 1, o2 = 3):\n    # [Begin of Missing Code]\n    dev = abs((x-u)/o2)\n    P_inner = scipy.integrate.quad(NDfx,-dev,dev)[0]\n    P_outer = 1 - P_inner\n    P = P_inner + P_outer/2\n    prob = P\n    # [End of Missing Code]\n    return prob\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport scipy.fft as sf\nN = 8\n# [Begin of Missing Code]\nresult = np.zeros((N,N))\nfor i in range(N):\n    for j in range(N):\n        result[i,j] = np.sqrt(2/N) * np.cos((np.pi/N)*(i+0.5)*j)\nresult[0,:] = result[0,:] / np.sqrt(2)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nfrom scipy import sparse\nimport numpy as np\nmatrix = np.array([[3.5,   13. ,   28.5,   50. ,   77.5],\n                   [-5. ,  -23. ,  -53. ,  -95. , -149. ],\n                   [2.5,   11. ,   25.5,   46. ,   72.5]])\n# [Begin of Missing Code]\nresult = sparse.diags([matrix[1][1:], matrix[0], matrix[2][:-1]], [-1,0,1]).toarray()\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport scipy.stats\nN = 3\np = 0.5\n# [Begin of Missing Code]\nx = np.arange(N+1)\ny = np.arange(N+1)\nxx, yy = np.meshgrid(x, y)\nresult = scipy.stats.binom.pmf(xx, yy, p)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport io\nfrom scipy import stats\n\ntemp=u\"\"\"probegenes,sample1,sample2,sample3\n1415777_at Pnliprp1,20,0.00,11\n1415805_at Clps,17,0.00,55\n1415884_at Cela3b,47,0.00,100\"\"\"\ndf = pd.read_csv(io.StringIO(temp),index_col='probegenes')\n\n# [Begin of Missing Code]\nresult = df.apply(stats.zscore, axis=1)\n# [End of Missing Code]\n\nprint(result)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport io\nfrom scipy import stats\n\ntemp=u\"\"\"probegenes,sample1,sample2,sample3\n1415777_at Pnliprp1,20,0.00,11\n1415805_at Clps,17,0.00,55\n1415884_at Cela3b,47,0.00,100\"\"\"\ndf = pd.read_csv(io.StringIO(temp),index_col='probegenes')\n\n# [Begin of Missing Code]\nresult = df.apply(stats.zscore)\n# [End of Missing Code]\n\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport io\nfrom scipy import stats\n\ntemp=u\"\"\"probegenes,sample1,sample2,sample3\n1415777_at Pnliprp1,20,0.00,11\n1415805_at Clps,17,0.00,55\n1415884_at Cela3b,47,0.00,100\"\"\"\ndf = pd.read_csv(io.StringIO(temp),index_col='probegenes')\n\n# [Begin of Missing Code]\nzscore_df = df.apply(stats.zscore, axis=1, result_type='broadcast')\nresult = pd.concat([df, zscore_df.rename(columns=lambda x: x+'_zscore')], axis=1)\nresult = result.stack().to_frame().T.rename(index={0: 'data', 1: 'zscore'})\n# [End of Missing Code]\n\nprint(result)\n```",
        "```python\nimport pandas as pd\nimport io\nimport numpy as np\nfrom scipy import stats\n\ntemp=u\"\"\"probegenes,sample1,sample2,sample3\n1415777_at Pnliprp1,20,0.00,11\n1415805_at Clps,17,0.00,55\n1415884_at Cela3b,47,0.00,100\"\"\"\ndf = pd.read_csv(io.StringIO(temp),index_col='probegenes')\n\n# [Begin of Missing Code]\nzscore_df = df.apply(stats.zscore)\nresult = pd.concat([df, zscore_df], keys=['data', 'zscore'], axis=0)\nresult = result.round(3)\n# [End of Missing Code]\n\nprint(result)\n```",
        "```python\nresult = scipy.optimize.line_search(test_func, test_grad, starting_point, direction)[0]\n```\n",
        "```python\nimport numpy as np\nfrom scipy.spatial import distance\nshape = (6, 6)\n# [Begin of Missing Code]\nmid = np.array([(shape[0]-1)/2, (shape[1]-1)/2]).reshape(1, 1, 2)\ny, x = np.indices(shape)\nresult = distance.cdist(np.dstack((y, x)), mid).reshape(shape)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nfrom scipy.spatial import distance\nshape = (6, 6)\n# [Begin of Missing Code]\nmid = np.array([(shape[0]-1)/2, (shape[1]-1)/2]).reshape(1, 1, 2)\ny, x = np.indices(shape)\nresult = distance.cdist(np.dstack((y, x)), mid, metric='cityblock')\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nfrom scipy.spatial import distance\n\ndef f(shape = (6, 6)):\n    rows, cols = shape\n    mid = np.array([rows/2, cols/2]).reshape(1, 1, 2)\n    y, x = np.indices(shape)\n    result = distance.cdist(np.dstack((y, x)), mid).reshape(rows, cols)\n    return result\n```",
        "```python\nimport numpy as np\nimport scipy.ndimage\nx = np.arange(9).reshape(3, 3)\nshape = (6, 8)\n# [Begin of Missing Code]\nzoom_factor = min(np.array(shape)/np.array(x.shape))\nresult = scipy.ndimage.zoom(x, zoom_factor, order=1)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nfit_func = lambda x: np.sum(a * x**2, axis=1) - y\nout = scipy.optimize.minimize(fit_func, x0)\n```",
        "```python\nfit_params = scipy.optimize.Bounds(x_lower_bounds, np.inf)\nout = scipy.optimize.minimize(lambda x: np.dot(a, x**2), x0, method='L-BFGS-B', bounds=fit_params)\n```",
        "```python\nimport scipy.integrate\nimport numpy as np\nN0 = 10\ntime_span = [-0.1, 0.1]\n\ndef dN1_dt(t, N1):\n    return [-100 * N1[0] + np.sin(t)]\n\nsol = scipy.integrate.solve_ivp(fun=dN1_dt, t_span=time_span, y0=[N0,])\nresult = sol.y\nprint(result)\n```",
        "[Solution Code]\n```python\nimport scipy.integrate\nimport numpy as np\nN0 = 1\ntime_span = [0, 10]\n# [Begin of Missing Code]\ndef dN1_dt(t, N1):\n    return -100 * N1 + t - np.sin(t) if 0 < t < 2*np.pi else 2*np.pi\nsol = scipy.integrate.solve_ivp(fun=dN1_dt, t_span=time_span, y0=[N0,])\n# [End of Missing Code]\nresult = sol.y\nprint(result)\n```",
        "```python\nimport scipy.integrate\nimport numpy as np\nN0 = 10\ntime_span = [-0.1, 0.1]\n\ndef dN1_dt(t, N1):\n    return -100 * N1 - np.cos(t)\n\nsol = scipy.integrate.solve_ivp(fun=dN1_dt, t_span=time_span, y0=[N0,])\n\nresult = sol.y\nprint(result)\n```",
        "```python\nfor t in range (4):\n    def const(x, t=t):    \n        y=x[t]\n        return y\n    cons.append({'type':'ineq', 'fun': const})\n```\nThe issue is that the function const is using the variable t from the for loop, which changes in each iteration. By adding t=t as a default argument in the function definition, we fix the value of t for each iteration and avoid this issue.",
        "[Solution Code]\n```python\nfrom scipy import sparse\nsa = sparse.random(10, 10, density = 0.01, format = 'csr')\nsb = sparse.random(10, 10, density = 0.01, format = 'csr')\n# [Begin of Missing Code]\nresult = sparse.vstack([sa, sb])\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nfrom scipy import sparse\nsa = sparse.random(10, 10, density = 0.01, format = 'csr')\nsb = sparse.random(10, 10, density = 0.01, format = 'csr')\n# [Begin of Missing Code]\nresult = sparse.hstack([sa, sb])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport scipy.integrate\nc = 5\nlow = 0\nhigh = 1\n# [Begin of Missing Code]\ndef integrand(x, c):\n    return 2*c*x\n\nresult, error = scipy.integrate.quad(integrand, low, high, args=(c,))\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport scipy.integrate\ndef f(c=5, low=0, high=1):\n    # [Begin of Missing Code]\n    eqn = lambda x: 2*c*x\n    result,error = scipy.integrate.quad(eqn, low, high)\n    # [End of Missing Code]\n    return result\n```",
        "```python\nimport numpy as np\nfrom scipy import sparse\nV = sparse.random(10, 10, density = 0.05, format = 'dok', random_state = 42)\nx = 99\n# [Begin of Missing Code]\nnon_zero_indices = V.nonzero()\nfor i, j in zip(non_zero_indices[0], non_zero_indices[1]):\n    V[i, j] += x\n# [End of Missing Code]\nprint(V)\n```",
        "```python\nfrom scipy import sparse\nV = sparse.random(10, 10, density = 0.05, format = 'coo', random_state = 42)\nx = 100\n# [Begin of Missing Code]\nV.data += x\n# [End of Missing Code]\nprint(V)\n```",
        "[Solution Code]\n```python\nfrom scipy import sparse\nV = sparse.random(10, 10, density = 0.05, format = 'coo', random_state = 42)\nx = 100\ny = 99\n# [Begin of Missing Code]\nV.data += x\nV.data[V.data != 0] += y\n# [End of Missing Code]\nprint(V)\n```",
        "```python\nfrom scipy import sparse\nimport numpy as np\nimport math\nsa = sparse.random(10, 10, density = 0.3, format = 'csc', random_state = 42)\n# [Begin of Missing Code]\n#iterate through columns\nfor Col in range(sa.shape[1]):\n    Column = sa[:,Col].data\n    List = [x**2 for x in Column]\n    #get the column length\n    Len = math.sqrt(sum(List))\n    #normalize the column\n    sa[:,Col] = (1/Len)*Column\n# [End of Missing Code]\nprint(sa)\n```",
        "```python\nfrom scipy import sparse\nimport numpy as np\nimport math\nsa = sparse.random(10, 10, density = 0.3, format = 'csr', random_state = 42)\n# [Begin of Missing Code]\n#iterate through columns\nfor Col in range(sa.shape[1]):\n    Column = sa[:,Col].data\n    List = [x**2 for x in Column]\n    #get the column length\n    Len = math.sqrt(sum(List))\n    #normalize the column\n    sa[:,Col] = (1/Len)*Column\n# [End of Missing Code]\nprint(sa)\n```",
        "[Solution Code]\n```python\nimport scipy\nimport numpy as np\na = np.array([[26, 3, 0], [3, 195, 1], [0, 1, 17]])\n# [Begin of Missing Code]\na[a > 0] = 1\n# [End of Missing Code]\nprint(a)\n```",
        "[Solution Code]\n```python\nimport scipy\nimport numpy as np\na = np.array([[26, 3, 0], [3, 195, 1], [0, 1, 17]])\n# [Begin of Missing Code]\na[a > 0] = 1\n# [End of Missing Code]\nprint(a)\n```",
        "```python\nimport numpy as np\nimport scipy.spatial\ncentroids = np.random.rand(5, 3)\ndata = np.random.rand(100, 3)\n# [Begin of Missing Code]\nresult = []\nfor i in range(len(centroids)):\n    cluster_points = data[np.where(np.argmax(scipy.spatial.distance.cdist(data, centroids), axis=1) == i)]\n    distances = scipy.spatial.distance.cdist(cluster_points, [centroids[i]])\n    closest_index = np.argmin(distances)\n    closest_point_index = np.where(np.argmax(scipy.spatial.distance.cdist(data, centroids), axis=1) == i)[0][closest_index]\n    result.append(closest_point_index)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nimport scipy.spatial\ncentroids = np.random.rand(5, 3)\ndata = np.random.rand(100, 3)\n# [Begin of Missing Code]\nresult = []\nfor i in range(centroids.shape[0]):\n    cluster_points = data[np.where(clusters == i)[0]]\n    centroid = centroids[i]\n    closest_point = cluster_points[scipy.spatial.distance.cdist([centroid], cluster_points).argmin()]\n    result.append(closest_point)\nresult = np.array(result)\n# [End of Missing Code]\nprint(result)\n```",
        "# [Begin of Missing Code]\nresult = []\nfor i in range(centroids.shape[0]):\n    cluster_data = data[np.where(labels == i)[0]]\n    distances = scipy.spatial.distance.cdist(cluster_data, [centroids[i]])\n    k_closest_indices = np.argsort(distances.flatten())[:k]\n    result.append(np.where(labels == i)[0][k_closest_indices])\n# [End of Missing Code]",
        "```python\nresult = []\nfor i in range(len(xdata)):\n    def eqn_to_solve(a):\n        return eqn(xdata[i], a, bdata[i])\n    sol = fsolve(eqn_to_solve, x0=0.5)\n    result.append(sol)\nresult = np.array(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nfrom scipy.optimize import fsolve\ndef eqn(x, a, b):\n    return x + 2*a - b**2\n\nxdata = np.arange(4)+3\nadata = np.random.randint(0, 10, (4,))\n# [Begin of Missing Code]\ndef solve_for_b(x, a):\n    def eqn_b(b):\n        return eqn(x, a, b)\n    b1 = fsolve(eqn_b, x0=0.5)[0]\n    b2 = fsolve(eqn_b, x0=1.5)[0]\n    return min(b1, b2), max(b1, b2)\n\nresult = np.array([solve_for_b(x, a) for x, a in zip(xdata, adata)])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\ncdf = lambda x: integrate.quad(bekkers, -np.inf, x, args=(estimated_a, estimated_m, estimated_d))[0]\nresult = stats.kstest(sample_data, cdf)\n```\n",
        "```python\n# [Begin of Missing Code]\ndef cdf(x):\n    return integrate.quad(bekkers, -np.inf, x, args=(estimated_a, estimated_m, estimated_d))[0]\nks_statistic, p_value = stats.kstest(sample_data, cdf)\nresult = p_value >= 0.05\n# [End of Missing Code]\n```",
        "```python\nimport pandas as pd\nimport io\nfrom scipy import integrate\nstring = '''\nTime                      A\n2017-12-18-19:54:40   -50187.0\n2017-12-18-19:54:45   -60890.5\n2017-12-18-19:54:50   -28258.5\n2017-12-18-19:54:55    -8151.0\n2017-12-18-19:55:00    -9108.5\n2017-12-18-19:55:05   -12047.0\n2017-12-18-19:55:10   -19418.0\n2017-12-18-19:55:15   -50686.0\n2017-12-18-19:55:20   -57159.0\n2017-12-18-19:55:25   -42847.0\n'''\ndf = pd.read_csv(io.StringIO(string), sep = '\\s+')\n# [Begin of Missing Code]\nintegral_df = df.set_index('Time').rolling('25s').apply(lambda x: integrate.trapz(x.values, x.index))\n# [End of Missing Code]\nprint(integral_df)\n```",
        "```python\nimport scipy.interpolate\nx = [(2,2), (1,2), (2,3), (3,2), (2,1)]\ny = [5,7,8,10,3]\neval = [(2.7, 2.3)]\n# [Begin of Missing Code]\nresult = scipy.interpolate.griddata(x, y, eval, method='linear')\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport scipy.optimize as sciopt\nimport numpy as np\nimport pandas as pd\na=pd.DataFrame({'A1':[0,1,2,3,2,1,6,0,1,1,7,10]})\n# [Begin of Missing Code]\ndef multinomial_neg_log_likelihood(weights, data):\n    n = np.sum(data)\n    log_likelihood = np.sum(data * np.log(weights)) - n * np.log(np.sum(weights))\n    return -log_likelihood\n\nweights = sciopt.minimize(multinomial_neg_log_likelihood, np.ones(len(a.A1))/len(a.A1), args=(a.A1,), method='Nelder-Mead').x\n# [End of Missing Code]\nprint(weights)\n```",
        "```python\nimport numpy as np\nimport scipy.optimize as sciopt\nx = np.array([[ 1247.04,  1274.9 ,  1277.81,  1259.51,  1246.06,  1230.2 ,\n     1207.37,  1192.  ,  1180.84,  1182.76,  1194.76,  1222.65],\n   [  589.  ,   581.29,   576.1 ,   570.28,   566.45,   575.99,\n      601.1 ,   620.6 ,   637.04,   631.68,   611.79,   599.19]])\ny = np.array([ 1872.81,  1875.41,  1871.43,  1865.94,  1854.8 ,  1839.2 ,\n    1827.82,  1831.73,  1846.68,  1856.56,  1861.02,  1867.15])\nfp   = lambda p, x: p[0]*x[0]+p[1]*x[1]\ne    = lambda p, x, y: ((fp(p,x)-y)**2).sum()\npmin = np.array([0.5,0.7]) # mimimum bounds\npmax = np.array([1.5,1.8]) # maximum bounds\n# [Begin of Missing Code]\nresult = sciopt.fmin_l_bfgs_b(e, [1, 1], bounds=[(pmin[0], pmax[0]), (pmin[1], pmax[1])], args=(x, y))[0]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nfrom scipy import signal\narr = np.array([-624.59309896, -624.59309896, -624.59309896,\n                      -625., -625., -625.,])\nn = 2\n# [Begin of Missing Code]\nresult = signal.argrelextrema(arr, np.less_equal, axis=0, order=n)[0]\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nfrom scipy import signal\narr = np.array([[-624.59309896, -624.59309896, -624.59309896,\n                      -625., -625., -625.,], [3, 0, 0, 1, 2, 4]])\nn = 2\n# [Begin of Missing Code]\nresult = []\nfor i in range(arr.shape[0]):\n    for j in range(n, arr.shape[1]-n):\n        if arr[i,j] <= np.max(arr[i,j-n:j+n+1]) and arr[i,j] <= np.max(arr[i,j-n:j+n+1]):\n            result.append([i,j])\n# [End of Missing Code]\nprint(result)\n```",
        "```python\n# [Begin of Missing Code]\nnum_cols = df.select_dtypes(include=np.number).columns\ndf = df[(np.abs(stats.zscore(df[num_cols])) < 3).all(axis=1)]\n# [End of Missing Code]\n```"
    ],
    "Sklearn": [
        "```python\nimport numpy as np\nfrom sklearn.datasets import load_iris\nimport pandas as pd\ndata = load_iris()\n# [Begin of Missing Code]\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\n# [End of Missing Code]\nprint(data1)\n```",
        "```python\nimport numpy as np\nfrom sklearn.datasets import load_iris\nimport pandas as pd\ndata = load_iris()\n# [Begin of Missing Code]\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\ndata1['target'] = data.target\n# [End of Missing Code]\nprint(data1)\n```",
        "```python\nimport numpy as np\nfrom sklearn.datasets import load_boston\nimport pandas as pd\ndata = load_boston()\n# [Begin of Missing Code]\ndata1 = pd.DataFrame(data.data, columns=data.feature_names)\n# [End of Missing Code]\nprint(data1)\n```",
        "```python\nimport numpy as np\nfrom sklearn.datasets import load_iris\nimport pandas as pd\ndata = load_iris()\ndef solve(data):\n    # [Begin of Missing Code]\n    df = pd.DataFrame(data.data, columns=data.feature_names)\n    df['target'] = data.target\n    # [End of Missing Code]\n    return df\ndata1 = solve(data)\nprint(data1)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\ndf = load_data()\n\n# [Begin of Missing Code]\nmlb = MultiLabelBinarizer()\ndf_out = pd.concat([df, pd.DataFrame(mlb.fit_transform(df['Col3']), columns=mlb.classes_, index=df.index)], axis=1).drop('Col3', axis=1)\n# [End of Missing Code]\n\nprint(df_out)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\ndf = load_data()\n\n# [Begin of Missing Code]\nmlb = MultiLabelBinarizer()\ndf = df.join(pd.DataFrame(mlb.fit_transform(df.pop('Col3')),\n                          columns=mlb.classes_,\n                          index=df.index))\ndf_out = df.replace({np.nan: 0, 1: '1', 0: '0'})\n# [End of Missing Code]\n\nprint(df_out)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\ndf = load_data()\n\n# [Begin of Missing Code]\nmlb = MultiLabelBinarizer()\ndf_out = pd.concat([df.drop(df.columns[-1], axis=1), pd.DataFrame(mlb.fit_transform(df[df.columns[-1]]), columns=mlb.classes_, index=df.index)], axis=1)\n# [End of Missing Code]\n\nprint(df_out)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\ndf = load_data()\n\n# [Begin of Missing Code]\nmlb = MultiLabelBinarizer()\ndf_out = df.join(pd.DataFrame(mlb.fit_transform(df.iloc[:, -1]), columns=mlb.classes_, index=df.index))\n# [End of Missing Code]\n\nprint(df_out)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\ndf = load_data()\n\n# [Begin of Missing Code]\nmlb = MultiLabelBinarizer()\ndf_out = df.join(pd.DataFrame(mlb.fit_transform(df.iloc[:, -1]), columns=mlb.classes_, index=df.index))\ndf_out.iloc[:, -len(mlb.classes_):] = np.where(df_out.iloc[:, -len(mlb.classes_):] == 0, 1, 0)\n# [End of Missing Code]\n\nprint(df_out)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport sklearn.svm as suppmach\nfrom sklearn.calibration import CalibratedClassifierCV\n\nX, y, x_test = load_data()\nassert type(X) == np.ndarray\nassert type(y) == np.ndarray\nassert type(x_test) == np.ndarray\n\n# Fit model:\nsvmmodel = suppmach.LinearSVC()\n\n# Obtain decision scores\npredicted_test_scores = svmmodel.decision_function(x_test)\n\n# Convert decision scores to probability estimates using logistic function\nproba = 1 / (1 + np.exp(-predicted_test_scores))\n\nprint(proba)\n```\n\nIn the missing code section, we obtain the decision scores using `svmmodel.decision_function(x_test)`. Then, we use the logistic function to convert the decision scores to probability estimates. The resulting probabilities are stored in the variable `proba`.",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn import svm\nfrom sklearn.calibration import CalibratedClassifierCV\n\nX, y, x_predict = load_data()\nassert type(X) == np.ndarray\nassert type(y) == np.ndarray\nassert type(x_predict) == np.ndarray\n\nmodel = svm.LinearSVC()\n\n# [Begin of Missing Code]\ncalibrated_model = CalibratedClassifierCV(model, cv=5)\ncalibrated_model.fit(X, y)\nproba = calibrated_model.predict_proba(x_predict)\n# [End of Missing Code]\n\nprint(proba)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport numpy as np\nfrom scipy.sparse import csr_matrix\ndf_origin, transform_output = load_data()\n# [Begin of Missing Code]\ntransform_output = pd.DataFrame.sparse.from_spmatrix(transform_output)\ndf = pd.concat([df_origin, transform_output], axis=1)\n# [End of Missing Code]\nprint(df)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport numpy as np\nfrom scipy.sparse import csr_matrix\ndf_origin, transform_output = load_data()\n# [Begin of Missing Code]\ndf_transformed = pd.DataFrame.sparse.from_spmatrix(transform_output)\ndf = pd.concat([df_origin, df_transformed], axis=1)\n# [End of Missing Code]\nprint(df)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\nfrom scipy.sparse import csr_matrix\ndf_origin, transform_output = load_data()\ndef solve(df, transform_output):\n    # [Begin of Missing Code]\n    transformed_df = pd.DataFrame.sparse.from_spmatrix(transform_output)\n    result = pd.concat([df, transformed_df], axis=1)\n    # [End of Missing Code]\n    return result\ndf = solve(df_origin, transform_output)\nprint(df)\n```",
        "```python\n# Delete the second step (PolynomialFeatures)\ndel clf.named_steps['poly']\n\n# Insert a new step (StandardScaler) as the first step\nfrom sklearn.preprocessing import StandardScaler\nclf.named_steps['scaler'] = StandardScaler()\n\n# Note: modifying the steps dictionary directly will not affect the clf object\n# We need to modify the named_steps dictionary instead\n```\n",
        "```python\n# [Begin of Missing Code]\ndel clf.named_steps['reduce_poly']\n# [End of Missing Code]\n```",
        "[Solution Code]\nDelete the 2nd step\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import SVC\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import PolynomialFeatures\nestimators = [('reduce_dIm', PCA()), ('pOly', PolynomialFeatures()), ('svdm', SVC())]\nclf = Pipeline(estimators)\n# [Begin of Missing Code]\ndel clf.named_steps['pOly']\n# [End of Missing Code]\nprint(clf.named_steps)\n```",
        "```python\n# [Begin of Missing Code]\n# Insert a new step after the first step\nclf.steps.insert(1, ('new_step', SomeEstimator()))\n\n# Delete the second step\ndel clf.steps[2]\n# [End of Missing Code]\n```",
        "[Solution Code]\nInsert any step\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import SVC\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import PolynomialFeatures\nestimators = [('reduce_poly', PolynomialFeatures()), ('dim_svm', PCA()), ('sVm_233', SVC())]\nclf = Pipeline(estimators)\n# [Begin of Missing Code]\nnew_step = ('new_step', SVC())\nclf.steps.insert(1, new_step)\n# [End of Missing Code]\nprint(len(clf.steps))\n```",
        "```python\n# [Begin of Missing Code]\nsteps = clf.named_steps\nsteps.insert(2, ('t1919810', PCA()))\nclf.steps = steps\n# [End of Missing Code]\n```",
        "```python\nfit_params={\"early_stopping_rounds\":42,\n            \"eval_metric\" : \"mae\",\n            \"eval_set\" : [[testX, testY]]}\nmodel = xgb.XGBRegressor()\ngridsearch = GridSearchCV(model, paramGrid, verbose=verbose, cv=TimeSeriesSplit(n_splits=cv).get_n_splits([trainX, trainY]), n_jobs=n_jobs, iid=iid)\ngridsearch.fit(trainX, trainY, **fit_params)\n```",
        "```python\nfit_params={\"early_stopping_rounds\":42,\n            \"eval_metric\" : \"mae\",\n            \"eval_set\" : [[testX, testY]]}\ngridsearch = GridSearchCV(xgb.XGBRegressor(), paramGrid, verbose=1, cv=TimeSeriesSplit(n_splits=3).get_n_splits([trainX, trainY]), n_jobs=n_jobs, iid=iid)\ngridsearch.fit(trainX, trainY, **fit_params)\n```",
        "```python\nproba = []\nfor train, test in cv:\n    logreg.fit(X[train], y[train])\n    proba.append(logreg.predict_proba(X[test]))\nproba = np.concatenate(proba)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold\nX, y = load_data()\nassert type(X) == np.ndarray\nassert type(y) == np.ndarray\ncv = StratifiedKFold(5).split(X, y)\nlogreg = LogisticRegression()\n# [Begin of Missing Code]\nproba = []\nfor train_index, test_index in cv:\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    logreg.fit(X_train, y_train)\n    proba.append(logreg.predict_proba(X_test)[:, 1])\n# [End of Missing Code]\nprint(proba)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndata = load_data()\nscaler = StandardScaler()\nscaler.fit(data)\nscaled = scaler.transform(data)\n# [Begin of Missing Code]\ninversed = scaler.inverse_transform(scaled)\n# [End of Missing Code]\nprint(inversed)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndata = load_data()\nscaler = StandardScaler()\nscaler.fit(data)\nscaled = scaler.transform(data)\ndef solve(data, scaler, scaled):\n    # [Begin of Missing Code]\n    inversed = scaler.inverse_transform(scaled)\n    # [End of Missing Code]\n    return inversed\ninversed = solve(data, scaler, scaled)\nprint(inversed)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\n# [Begin of Missing Code]\nmodel_name = type(model).__name__\n# [End of Missing Code]\nprint(model_name)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\n# [Begin of Missing Code]\nmodel_name = type(model).__name__\n# [End of Missing Code]\nprint(model_name)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.svm import LinearSVC\nmodel = LinearSVC()\n# [Begin of Missing Code]\nmodel_name = type(model).__name__\n# [End of Missing Code]\nprint(model_name)\n```",
        "```python\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import NMF\nfrom sklearn.pipeline import Pipeline\nimport pandas as pd\n\ndata = load_data()\n\npipe = Pipeline([\n    (\"tf_idf\", TfidfVectorizer()),\n    (\"nmf\", NMF())\n])\n# [Begin of Missing Code]\ntf_idf_out = pipe.named_steps[\"tf_idf\"].fit_transform(data.test)\n# [End of Missing Code]\nprint(tf_idf_out)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import NMF\nfrom sklearn.pipeline import Pipeline\nimport pandas as pd\n\ndata = load_data()\n\npipe = Pipeline([\n    (\"tf_idf\", TfidfVectorizer()),\n    (\"nmf\", NMF())\n])\n# [Begin of Missing Code]\ntf_idf_out = pipe.named_steps[\"tf_idf\"].fit_transform(data.test)\n# [End of Missing Code]\nprint(tf_idf_out)\n```",
        "```python\nimport numpy as np\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nimport pandas as pd\n\ndata, target = load_data()\n\npipe = Pipeline(steps=[\n    ('select', SelectKBest(k=2)),\n    ('clf', LogisticRegression())]\n)\n\n# [Begin of Missing Code]\nselect_out = pipe.named_steps['select'].fit_transform(data, target)\n# [End of Missing Code]\n\nprint(select_out)\n```",
        "# [Begin of Missing Code]\nclf = GridSearchCV(bc, param_grid=param_grid)\nclf.fit(X_train, y_train)\n# [End of Missing Code]",
        "# [Begin of Missing Code]\nX = X.reshape(-1, 1)\n# [End of Missing Code]",
        "# [Begin of Missing Code]\nX = X.reshape(-1,1)\n# [End of Missing Code]",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\ndef preprocess(s):\n    return s.upper()\n\n# [Begin of Missing Code]\ntfidf = TfidfVectorizer(preprocessor=preprocess)\n# [End of Missing Code]\n\nprint(tfidf.preprocessor)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\ndef prePro(text):\n    return text.lower()\n\ntfidf = TfidfVectorizer(preprocessor=prePro)\nprint(tfidf.preprocessor)\n```\n\n[Explanation]\nThe missing code is defining the function `prePro` that takes in a string and returns the lowercase version of that string. Then, we create an instance of `TfidfVectorizer` and set the `preprocessor` parameter to the `prePro` function we just defined. Finally, we print out the `preprocessor` attribute of the `tfidf` object to confirm that it is set correctly.",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\n\ndata = load_data()\n\n# [Begin of Missing Code]\nscaler = preprocessing.StandardScaler()\ndf_out = pd.DataFrame(scaler.fit_transform(data), columns=data.columns, index=data.index)\n# [End of Missing Code]\n\nprint(df_out)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\ndata = load_data()\n# [Begin of Missing Code]\nscaler = preprocessing.StandardScaler()\ndf_out = pd.DataFrame(scaler.fit_transform(data), columns=data.columns, index=data.index)\n# [End of Missing Code]\nprint(df_out)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nX, y = load_data()\nassert type(X) == np.ndarray\nassert type(y) == np.ndarray\npipe = Pipeline([\n    (\"scale\", StandardScaler()),\n    (\"model\", SGDClassifier(random_state=42))\n])\ngrid = GridSearchCV(pipe, param_grid={\"model__alpha\": [1e-3, 1e-2, 1e-1, 1]}, cv=5)\n# [Begin of Missing Code]\ngrid.fit(X, y)\ncoef = grid.best_estimator_.named_steps[\"model\"].coef_\n# [End of Missing Code]\nprint(coef)\n```",
        "[Solution Code]\nrunnable code\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nX, y = load_data()\nassert type(X) == np.ndarray\nassert type(y) == np.ndarray\npipe = Pipeline([\n    (\"scale\", StandardScaler()),\n    (\"model\", RidgeClassifier(random_state=24))\n])\ngrid = GridSearchCV(pipe, param_grid={\"model__alpha\": [2e-4, 3e-3, 4e-2, 5e-1]}, cv=7)\n# [Begin of Missing Code]\ngrid.fit(X, y)\ncoef = grid.best_estimator_.named_steps[\"model\"].coef_\n# [End of Missing Code]\nprint(coef)\n```",
        "```python\nimport pandas as pd\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.feature_selection import SelectFromModel\nimport numpy as np\n\ndf = pd.read_csv('los_10_one_encoder.csv')\ny = df['LOS'] # target\nX= df.drop('LOS',axis=1) # drop LOS column\nclf = ExtraTreesClassifier(random_state=42)\nclf = clf.fit(X, y)\n\nmodel = SelectFromModel(clf, prefit=True)\nX_new = model.transform(X)\n\nselected_features = model.get_support()\ncolumn_names = X.columns[selected_features]\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.feature_selection import SelectFromModel\nimport numpy as np\nX, y = load_data()\nclf = ExtraTreesClassifier(random_state=42)\nclf = clf.fit(X, y)\n# [Begin of Missing Code]\nmodel = SelectFromModel(clf, prefit=True)\nX_new = model.transform(X)\nselected_features = model.get_support()\ncolumn_names = X.columns[selected_features]\n# [End of Missing Code]\nprint(column_names)\n```",
        "```python\nimport pandas as pd\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.feature_selection import SelectFromModel\nimport numpy as np\n\nX, y = load_data()\nclf = ExtraTreesClassifier(random_state=42)\nclf = clf.fit(X, y)\n\nmodel = SelectFromModel(clf, prefit=True)\nX_new = model.transform(X)\n\n# get selected feature indices\nselected_feature_indices = model.get_support(indices=True)\n\n# get column names of selected features\ncolumn_names = X.columns[selected_feature_indices]\n\nprint(column_names)\n```",
        "```python\nimport pandas as pd\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.feature_selection import SelectFromModel\nimport numpy as np\n\ndf = pd.read_csv('los_10_one_encoder.csv')\ny = df['LOS'] # target\nX= df.drop('LOS',axis=1) # drop LOS column\nclf = ExtraTreesClassifier(random_state=42)\nclf = clf.fit(X, y)\n\nmodel = SelectFromModel(clf, prefit=True)\nX_new = model.transform(X)\n\nselected_features = model.get_support()\ncolumn_names = list(X.columns[selected_features])\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.cluster import KMeans\np, X = load_data()\nassert type(X) == np.ndarray\nkm = KMeans()\n# [Begin of Missing Code]\nkm.fit(X)\nclosest_50_samples = X[np.argsort(np.linalg.norm(X - km.cluster_centers_[p], axis=1))[:50]]\n# [End of Missing Code]\nprint(closest_50_samples)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.cluster import KMeans\np, X = load_data()\nassert type(X) == np.ndarray\nkm = KMeans()\nkm.fit(X)\ndistances = km.transform(X)\nclosest_50_samples = X[np.argsort(distances[:, p])[:50]]\nprint(closest_50_samples)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.cluster import KMeans\n\np, X = load_data()\nassert type(X) == np.ndarray\n\nkm = KMeans()\nkm.fit(X)\n\n# Get the p^th cluster center\ncenter = km.cluster_centers_[p]\n\n# Calculate the distance between each sample and the center\ndistances = np.linalg.norm(X - center, axis=1)\n\n# Get the indices of the 100 closest samples\nclosest_indices = np.argsort(distances)[:100]\n\n# Get the actual samples\nclosest_100_samples = X[closest_indices]\n\nprint(closest_100_samples)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.cluster import KMeans\np, X = load_data()\nassert type(X) == np.ndarray\nkm = KMeans()\ndef get_samples(p, X, km):\n    km.fit(X)\n    distances = km.transform(X)\n    closest_cluster = np.argmin(distances, axis=1)\n    samples = []\n    for i in range(km.n_clusters):\n        cluster_samples = X[closest_cluster == i]\n        center = km.cluster_centers_[i]\n        distances = np.linalg.norm(cluster_samples - center, axis=1)\n        closest_samples = cluster_samples[np.argsort(distances)[:50]]\n        samples.append(closest_samples)\n    return np.concatenate(samples)\nclosest_50_samples = get_samples(p, X, km)\nprint(closest_50_samples)\n```",
        "```python\n# [Begin of Missing Code]\nX_train = pd.get_dummies(X_train, columns=[0])\n# [End of Missing Code]\n```",
        "```python\n# [Begin of Missing Code]\nX_train = pd.get_dummies(X_train, columns=[0])\n# [End of Missing Code]\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.svm import SVR\nfrom sklearn.datasets import load_data\nX, y = load_data()\nassert type(X) == np.ndarray\nassert type(y) == np.ndarray\n# fit, then predict X\n# [Begin of Missing Code]\nclf = SVR(kernel='rbf')\nclf.fit(X, y)\npredict = clf.predict(X)\n# [End of Missing Code]\nprint(predict)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport sklearn\nfrom sklearn.svm import SVR\n\nX, y = load_data()\nassert type(X) == np.ndarray\nassert type(y) == np.ndarray\n\n# fit, then predict X\n# [Begin of Missing Code]\nregressor = SVR(kernel='rbf')\nregressor.fit(X, y)\npredict = regressor.predict(X)\n# [End of Missing Code]\n\nprint(predict)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.svm import SVR\nfrom sklearn.datasets import load_data\nX, y = load_data()\nassert type(X) == np.ndarray\nassert type(y) == np.ndarray\n# fit, then predict X\n# [Begin of Missing Code]\nregressor = SVR(kernel='poly', degree=2)\nregressor.fit(X, y)\npredict = regressor.predict(X)\n# [End of Missing Code]\nprint(predict)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport sklearn\nfrom sklearn.svm import SVR\n\nX, y = load_data()\nassert type(X) == np.ndarray\nassert type(y) == np.ndarray\n\n# fit, then predict X\n# [Begin of Missing Code]\nregressor = SVR(kernel='poly', degree=2)\nregressor.fit(X, y)\npredict = regressor.predict(X)\n# [End of Missing Code]\n\nprint(predict)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nqueries, documents = load_data()\nassert type(queries) == list\nassert type(documents) == list\ntfidf = TfidfVectorizer()\ntfidf.fit_transform(documents)\n# [Begin of Missing Code]\nquery_tfidf = tfidf.transform(queries)\ncosine_similarities_of_queries = np.dot(query_tfidf, tfidf.T).toarray()\n# [End of Missing Code]\nprint(cosine_similarities_of_queries)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nqueries, documents = load_data()\nassert type(queries) == list\nassert type(documents) == list\ntfidf = TfidfVectorizer()\ntfidf.fit_transform(documents)\n# [Begin of Missing Code]\nquery_tfidf = tfidf.transform(queries)\ncosine_similarities_of_queries = cosine_similarity(query_tfidf, tfidf)\n# [End of Missing Code]\nprint(cosine_similarities_of_queries)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nqueries, documents = load_data()\nassert type(queries) == list\nassert type(documents) == list\n\ndef solve(queries, documents):\n    tfidf = TfidfVectorizer()\n    tfidf.fit_transform(documents)\n    query_tfidf = tfidf.transform(queries)\n    cosine_similarities_of_queries = cosine_similarity(query_tfidf, tfidf)\n    return cosine_similarities_of_queries\n\ncosine_similarities_of_queries = solve(queries, documents)\nprint(cosine_similarities_of_queries)\n```\n\n[Explanation]\nTo find the cosine similarity between the queries and the documents, we need to first transform the queries using the same TfidfVectorizer that we used to transform the documents. We can do this by calling `tfidf.transform(queries)`. This will give us a matrix of the same dimensions as the document matrix, but with the tf-idf values for the queries.\n\nNext, we can use the `cosine_similarity` function from `sklearn.metrics.pairwise` to calculate the cosine similarity between the query matrix and the document matrix. This will give us a 3x5 matrix of cosine similarities between each query and each document.\n\nFinally, we return this matrix from the `solve` function and print it out in the main code block.",
        "```python\nimport pandas as pd\nimport numpy as np\nimport sklearn\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nfeatures = load_data()\n\n# [Begin of Missing Code]\nmlb = MultiLabelBinarizer()\nnew_features = mlb.fit_transform(features)\nnew_features = pd.DataFrame(new_features, columns=mlb.classes_)\n# [End of Missing Code]\n\nprint(new_features)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\nimport sklearn\nf = [\n    ['t1'],\n    ['t2', 't5', 't7'],\n    ['t1', 't2', 't3', 't4', 't5'],\n    ['t4', 't5', 't6']\n]\n# [Begin of Missing Code]\nfrom sklearn.preprocessing import MultiLabelBinarizer\nmlb = MultiLabelBinarizer()\nnew_f = pd.DataFrame(mlb.fit_transform(f), columns=mlb.classes_)\n# [End of Missing Code]\nprint(new_f)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\nimport sklearn\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nfeatures = load_data()\n\n# [Begin of Missing Code]\nmlb = MultiLabelBinarizer()\nnew_features = mlb.fit_transform(features)\nnew_features = pd.DataFrame(new_features, columns=mlb.classes_)\n# [End of Missing Code]\n\nprint(new_features)\n```",
        "```python\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nfeatures = load_data()\n\ndef solve(features):\n    mlb = MultiLabelBinarizer()\n    new_features = mlb.fit_transform(features)\n    return new_features\n\nnew_features = solve(features)\nprint(new_features)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport numpy as np\nimport sklearn\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nfeatures = load_data()\n\n# [Begin of Missing Code]\nmlb = MultiLabelBinarizer()\nnew_features = pd.DataFrame(mlb.fit_transform(features), columns=mlb.classes_)\n# [End of Missing Code]\n\nprint(new_features)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport sklearn.cluster\ndata_matrix = load_data()\n# [Begin of Missing Code]\nmodel = sklearn.cluster.AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete')\ncluster_labels = model.fit_predict(data_matrix)\n# [End of Missing Code]\nprint(cluster_labels)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport sklearn.cluster\ndata_matrix = load_data()\n# [Begin of Missing Code]\ncluster = sklearn.cluster.AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete')\ncluster_labels = cluster.fit_predict(data_matrix)\n# [End of Missing Code]\nprint(cluster_labels)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport sklearn.cluster\nsimM = load_data()\n# [Begin of Missing Code]\nmodel = sklearn.cluster.AgglomerativeClustering(n_clusters=2, affinity='precomputed', linkage='complete')\ncluster_labels = model.fit_predict(simM)\n# [End of Missing Code]\nprint(cluster_labels)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport scipy.cluster\ndata_matrix = load_data()\n# [Begin of Missing Code]\ndistance_matrix = 1 - np.array(data_matrix)\nlinkage_matrix = scipy.cluster.hierarchy.linkage(distance_matrix, method='complete')\ncluster_labels = scipy.cluster.hierarchy.fcluster(linkage_matrix, 2, criterion='maxclust')\n# [End of Missing Code]\nprint(cluster_labels)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport scipy.cluster\ndata_matrix = load_data()\n# [Begin of Missing Code]\ndistance_matrix = 1 - np.array(data_matrix)\nlinkage_matrix = scipy.cluster.hierarchy.linkage(distance_matrix, method='complete')\ncluster_labels = scipy.cluster.hierarchy.cut_tree(linkage_matrix, n_clusters=2).flatten()\n# [End of Missing Code]\nprint(cluster_labels)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport scipy.cluster\nsimM = load_data()\n# [Begin of Missing Code]\nZ = scipy.cluster.hierarchy.linkage(simM, method='complete')\ncluster_labels = scipy.cluster.hierarchy.fcluster(Z, 2, criterion='maxclust')\n# [End of Missing Code]\nprint(cluster_labels)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\n\ndata = load_data()\nassert type(data) == np.ndarray\n\n# [Begin of Missing Code]\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data)\n# [End of Missing Code]\n\nprint(centered_scaled_data)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\ndata = load_data()\nassert type(data) == np.ndarray\n# [Begin of Missing Code]\nscaler = StandardScaler()\ncentered_scaled_data = scaler.fit_transform(data)\n# [End of Missing Code]\nprint(centered_scaled_data)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import PowerTransformer\ndata = load_data()\nassert type(data) == np.ndarray\n# [Begin of Missing Code]\npt = PowerTransformer(method='box-cox')\nbox_cox_data = pt.fit_transform(data)\n# [End of Missing Code]\nprint(box_cox_data)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import PowerTransformer\ndata = load_data()\nassert type(data) == np.ndarray\n# [Begin of Missing Code]\npt = PowerTransformer(method='box-cox')\nbox_cox_data = pt.fit_transform(data)\n# [End of Missing Code]\nprint(box_cox_data)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import PowerTransformer\ndata = load_data()\nassert type(data) == np.ndarray\n# [Begin of Missing Code]\npt = PowerTransformer(method='yeo-johnson')\nyeo_johnson_data = pt.fit_transform(data)\n# [End of Missing Code]\nprint(yeo_johnson_data)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import PowerTransformer\ndata = load_data()\nassert type(data) == np.ndarray\n# [Begin of Missing Code]\npt = PowerTransformer(method='yeo-johnson')\nyeo_johnson_data = pt.fit_transform(data)\n# [End of Missing Code]\nprint(yeo_johnson_data)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\ntext = load_data()\n# [Begin of Missing Code]\nvectorizer = CountVectorizer(token_pattern=r'\\b\\w+\\b|[\\?\\!\\\"]+|\\'+')\ntransformed_text = vectorizer.fit_transform(text)\n# [End of Missing Code]\nprint(transformed_text)\n```",
        "[Solution Code]\nuse random_state=42\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\ndataset = pd.read_csv('example.csv', header=None, sep=',')\n\n# [Begin of Missing Code]\nx = dataset.iloc[:, :-1]\ny = dataset.iloc[:, -1]\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n# [End of Missing Code]\n\nprint(x_train)\nprint(y_train)\nprint(x_test)\nprint(y_test)\n```",
        "[Solution Code]\nuse random_state=42\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\ndata = load_data()\n# [Begin of Missing Code]\nx = data.iloc[:, :-1]\ny = data.iloc[:, -1]\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n# [End of Missing Code]\nprint(x_train)\nprint(y_train)\nprint(x_test)\nprint(y_test)\n```",
        "[Solution Code]\nuse random_state=42\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\ndataset = pd.read_csv('example.csv', header=None, sep=',')\n\n# [Begin of Missing Code]\nx = dataset.iloc[:, :-1]\ny = dataset.iloc[:, -1]\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.4, random_state=42)\n# [End of Missing Code]\n\nprint(x_train)\nprint(y_train)\nprint(x_test)\nprint(y_test)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\ndataset = pd.read_csv('example.csv', header=None, sep=',')\n\ndef solve(data):\n    x = data.iloc[:, :-1]\n    y = data.iloc[:, -1]\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n    return x_train, y_train, x_test, y_test\n\nx_train, y_train, x_test, y_test = solve(dataset)\n\nprint(x_train)\nprint(y_train)\nprint(x_test)\nprint(y_test)\n```",
        "[Solution Code]\n```python\nfrom sklearn.cluster import KMeans\ndf = load_data()\n# [Begin of Missing Code]\nf1 = df['mse'].values\nX = f1.reshape(-1, 1)\nkmeans = KMeans(n_clusters=2).fit(X)\nlabels = kmeans.predict(X)\n# [End of Missing Code]\nprint(labels)\n```",
        "[Solution Code]\n```python\nfrom sklearn.cluster import KMeans\nimport numpy as np\nimport pandas as pd\n\ndf = pd.read_csv(\"file.csv\", parse_dates=[\"date\"])\nf1 = df['mse'].values\nf2 = list(range(0, len(f1)))\nX = np.array(list(zip(f1, f2)))\nkmeans = KMeans(n_clusters=2).fit(X)\nlabels = kmeans.predict(X)\ncentroids = kmeans.cluster_centers_\n\n# [Begin of Missing Code]\nf1 = f1.reshape(-1, 1)\nkmeans = KMeans(n_clusters=2).fit(f1)\nlabels = kmeans.predict(f1)\ncentroids = kmeans.cluster_centers_\n# [End of Missing Code]\n\nprint(labels)\n```",
        "# [Begin of Missing Code]\nlsvc = LinearSVC(penalty='l1', dual=False)\nlsvc.fit(X, y)\ncoef = lsvc.coef_\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[np.nonzero(coef)[1]]\n# [End of Missing Code]",
        "# [Begin of Missing Code]\nlsvc = LinearSVC(penalty='l1', dual=False)\nlsvc.fit(X, y)\nmodel = SelectFromModel(lsvc, prefit=True)\nselected_feature_names = np.asarray(vectorizer.get_feature_names())[model.get_support()]\n# [End of Missing Code]",
        "```python\nimport numpy as np\nimport pandas as pd\nimport sklearn\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import LinearSVC\ncorpus, y = load_data()\nassert type(corpus) == list\nassert type(y) == list\nvectorizer = TfidfVectorizer()\nX = vectorizer.fit_transform(corpus)\ndef solve(corpus, y, vectorizer, X):\n    lsvc = LinearSVC(penalty='l1', dual=False).fit(X, y)\n    coef = lsvc.coef_\n    coef = np.squeeze(coef)\n    nonzero_coef_indices = np.nonzero(coef)[0]\n    selected_feature_names = np.asarray(vectorizer.get_feature_names())[nonzero_coef_indices]\n    return selected_feature_names\nselected_feature_names = solve(corpus, y, vectorizer, X)\nprint(selected_feature_names)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\ncorpus = [\n    'We are looking for Java developer',\n    'Frontend developer with knowledge in SQL and Jscript',\n    'And this is the third one.',\n    'Is this the first document?',\n]\n# [Begin of Missing Code]\nvectorizer = CountVectorizer(stop_words=\"english\",binary=True,lowercase=False,vocabulary={'Jscript','.Net','TypeScript','SQL', 'NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = [word for word in vectorizer.vocabulary_.keys() if word in vectorizer.get_feature_names()]\n# [End of Missing Code]\nprint(feature_names)\nprint(X.toarray())\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\ncorpus = [\n    'We are looking for Java developer',\n    'Frontend developer with knowledge in SQL and Jscript',\n    'And this is the third one.',\n    'Is this the first document?',\n]\n# [Begin of Missing Code]\nvectorizer = CountVectorizer(stop_words=\"english\",binary=True,lowercase=False,vocabulary={'Jscript','.Net','TypeScript','NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = [word for _, word in sorted(zip(vectorizer.vocabulary_.values(), vectorizer.vocabulary_.keys()))]\n# [End of Missing Code]\nprint(feature_names)\nprint(X.toarray())\n```",
        "# [Begin of Missing Code]\nvectorizer = CountVectorizer(stop_words=\"english\",binary=True,lowercase=False,vocabulary={'Jscript','.Net','TypeScript','SQL', 'NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = vectorizer.get_feature_names()\nX = X.toarray()[:, [feature_names.index(word) for word in vectorizer.vocabulary]]\n# [End of Missing Code]",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\ncorpus = [\n    'We are looking for Java developer',\n    'Frontend developer with knowledge in SQL and Jscript',\n    'And this is the third one.',\n    'Is this the first document?',\n]\n# [Begin of Missing Code]\nvectorizer = CountVectorizer(stop_words=\"english\",binary=True,lowercase=False,vocabulary={'Jscript','.Net','TypeScript','NodeJS','Angular','Mongo','CSS','Python','PHP','Photoshop','Oracle','Linux','C++',\"Java\",'TeamCity','Frontend','Backend','Full stack', 'UI Design', 'Web','Integration','Database design','UX'})\nX = vectorizer.fit_transform(corpus)\nfeature_names = [word for word in vectorizer.vocabulary_.keys() if word in vectorizer.get_feature_names()]\nX = X[:, [vectorizer.vocabulary_[word] for word in feature_names]]\n# [End of Missing Code]\nprint(feature_names)\nprint(X.toarray())\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndf1 = load_data()\n\n# [Begin of Missing Code]\nslopes = np.array([]) # initialize empty array to store slopes\n\nfor col in df1.columns[1:]: # iterate over all columns except the first one\n    df2 = df1[~np.isnan(df1[col])] # remove NaN values for the current column\n    df3 = df2[['Time', col]]\n    npMatrix = np.matrix(df3)\n    X, Y = npMatrix[:,0], npMatrix[:,1]\n    slope = LinearRegression().fit(X,Y)\n    m = slope.coef_[0]\n    slopes = np.concatenate((slopes, m), axis = 0) # append the slope to the array\n\n# [End of Missing Code]\n\nprint(slopes)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\ndf1 = load_data()\n# [Begin of Missing Code]\nslopes = np.array([])\nfor col in df1.columns:\n    if col != 'Time':\n        df2 = df1[~np.isnan(df1[col])]\n        df3 = df2[['Time', col]]\n        npMatrix = np.matrix(df3)\n        X, Y = npMatrix[:,0], npMatrix[:,1]\n        slope = LinearRegression().fit(X,Y)\n        m = slope.coef_[0]\n        slopes = np.concatenate((slopes, m), axis = 0)\n# [End of Missing Code]\nprint(slopes)\n```",
        "[Solution Code]\nRunnable code\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndf = load_data()\n# [Begin of Missing Code]\nle = LabelEncoder()\ndf['Sex'] = le.fit_transform(df['Sex'])\ntransformed_df = df\n# [End of Missing Code]\nprint(transformed_df)\n```",
        "[Solution Code]\nRunnable code\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndf = load_data()\n# [Begin of Missing Code]\nle = LabelEncoder()\ndf['Sex'] = le.fit_transform(df['Sex'])\ntransformed_df = df\n# [End of Missing Code]\nprint(transformed_df)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\ndf = load_data()\ndef Transform(df):\n    # [Begin of Missing Code]\n    le = LabelEncoder()\n    transformed_df = df.copy()\n    transformed_df['Sex'] = le.fit_transform(transformed_df['Sex'])\n    # [End of Missing Code]\n    return transformed_df\ntransformed_df = Transform(df)\nprint(transformed_df)\n```",
        "[Begin of Missing Code]\nElasticNet = linear_model.ElasticNet() # create a lasso instance\nElasticNet.fit(X_train, y_train) # fit data\n\ntraining_set_score = ElasticNet.score(X_train, y_train)\ntest_set_score = ElasticNet.score(X_test, y_test)\n# [End of Missing Code]",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nnp_array = load_data()\n# [Begin of Missing Code]\nscaler = MinMaxScaler()\ntransformed = scaler.fit_transform(np_array.reshape(-1,1)).reshape(np_array.shape)\n# [End of Missing Code]\nprint(transformed)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nnp_array = load_data()\n# [Begin of Missing Code]\nscaler = MinMaxScaler()\ntransformed = scaler.fit_transform(np_array.reshape(-1, 1)).reshape(np_array.shape)\n# [End of Missing Code]\nprint(transformed)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nnp_array = load_data()\ndef Transform(a):\n    # [Begin of Missing Code]\n    scaler = MinMaxScaler()\n    new_a = scaler.fit_transform(a.reshape(-1,1)).reshape(a.shape)\n    # [End of Missing Code]\n    return new_a\ntransformed = Transform(np_array)\nprint(transformed)\n```",
        "```python\npredict = clf.predict(b)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nX = [['asdf', '1'], ['asdf', '0']]\nclf = DecisionTreeClassifier()\n# [Begin of Missing Code]\nnew_X = np.array(X)\nfor i in range(len(X)):\n    for j in range(len(X[i])):\n        if isinstance(X[i][j], str):\n            new_X[i][j] = ord(X[i][j])\n# [End of Missing Code]\nclf.fit(new_X, ['2', '3'])\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import LabelEncoder\n\nX = [['asdf', '1'], ['asdf', '0']]\nclf = DecisionTreeClassifier()\n\n# [Begin of Missing Code]\nle = LabelEncoder()\nnew_X = np.array(X)\nfor i in range(new_X.shape[1]):\n    new_X[:, i] = le.fit_transform(new_X[:, i])\n# [End of Missing Code]\n\nclf.fit(new_X, ['2', '3'])\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import LabelEncoder\n\nX = [['dsa', '2'], ['sato', '3']]\nclf = DecisionTreeClassifier()\n\n# [Begin of Missing Code]\nle = LabelEncoder()\nnew_X = np.array(X)\nfor i in range(new_X.shape[1]):\n    new_X[:, i] = le.fit_transform(new_X[:, i])\n# [End of Missing Code]\n\nclf.fit(new_X, ['4', '5'])\n```",
        "# [Begin of Missing Code]\n# Splitting the data into training and testing sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Creating the logistic regression model\nlogReg = LogisticRegression()\n\n# Fitting the model on the training data\nlogReg.fit(X_train, y_train)\n\n# [End of Missing Code]",
        "# [Begin of Missing Code]\nX = dataframe.iloc[:, :-1].astype(float)\ny = dataframe.iloc[:, -1]\nlogReg = LogisticRegression()\nlogReg.fit(X, y)\n# [End of Missing Code]",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\nfeatures_dataframe = load_data()\n\n# [Begin of Missing Code]\nsplit_index = int(len(features_dataframe)*0.2)\ntrain_dataframe = features_dataframe[:split_index]\ntest_dataframe = features_dataframe[split_index:]\n# [End of Missing Code]\n\nprint(train_dataframe)\nprint(test_dataframe)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\nfeatures_dataframe = load_data()\n\n# [Begin of Missing Code]\nsplit_index = int(len(features_dataframe)*0.8)\ntrain_dataframe = features_dataframe.iloc[split_index:]\ntest_dataframe = features_dataframe.iloc[:split_index]\n# [End of Missing Code]\n\nprint(train_dataframe)\nprint(test_dataframe)\n```",
        "```python\ntrain_size = 0.2\nnum_rows = features_dataframe.shape[0]\nsplit_index = int(num_rows * (1 - train_size))\ntrain_dataframe = features_dataframe.iloc[:split_index].sort_values(\"date\")\ntest_dataframe = features_dataframe.iloc[split_index:].sort_values(\"date\")\n```",
        "[BEGINNING OF MISSING CODE]\ndf[cols[0] + '_scale'], df[cols[1] + '_scale'] = zip(*df.groupby('Month')[cols].apply(lambda x: pd.Series(scaler.fit_transform(x))))\n[END OF MISSING CODE]",
        "[Solution Code]\n```python\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\nmyData = pd.DataFrame({\n    'Month': [3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8],\n    'A1': [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2],\n    'A2': [31, 13, 13, 13, 33, 33, 81, 38, 18, 38, 18, 18, 118],\n    'A3': [81, 38, 18, 38, 18, 18, 118, 31, 13, 13, 13, 33, 33],\n    'A4': [1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8],\n})\nscaler = MinMaxScaler()\n# [Begin of Missing Code]\ncols = myData.columns[2:4]\nmyData[['new_' + col for col in cols]] = myData.groupby('Month')[cols].apply(lambda x: pd.DataFrame(scaler.fit_transform(x), columns=['new_'+col for col in cols]))\n# [End of Missing Code]\nprint(myData)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nwords = load_data()\n# [Begin of Missing Code]\ncount = CountVectorizer(lowercase = False, token_pattern=r'\\b\\w+\\b|\\S+')\nvocabulary = count.fit_transform([words])\nfeature_names = count.get_feature_names()\n# [End of Missing Code]\nprint(feature_names)\n```",
        "[Solution Code]\nrunnable code\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nwords = load_data()\n# [Begin of Missing Code]\ncount = CountVectorizer(lowercase=False, token_pattern=r'(?u)\\b\\w+\\b')\nvocabulary = count.fit_transform([words])\nfeature_names = count.get_feature_names()\n# [End of Missing Code]\nprint(feature_names)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nGridSearch_fitted = load_data()\nassert type(GridSearch_fitted) == sklearn.model_selection._search.GridSearchCV\n# [Begin of Missing Code]\nresults = pd.DataFrame(GridSearch_fitted.cv_results_)\nfull_results = results.sort_values(by='rank_test_score')\n# [End of Missing Code]\nprint(full_results)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nGridSearch_fitted = load_data()\nassert type(GridSearch_fitted) == sklearn.model_selection._search.GridSearchCV\n# [Begin of Missing Code]\nresults = pd.DataFrame(GridSearch_fitted.cv_results_)\nfull_results = results.sort_values(by='mean_fit_time')\n# [End of Missing Code]\nprint(full_results)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import IsolationForest\nimport joblib\n\n# Fit the model to your clean data\nmodel = IsolationForest()\nmodel.fit(clean_data)\n\n# Save the model in the file named \"sklearn_model\"\njoblib.dump(model, \"sklearn_model\")\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport sklearn\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\ndf = load_data()\ntfidf = TfidfVectorizer()\ntfidf_matrix = tfidf.fit_transform(df['description'])\ncosine_similarity_matrix = cosine_similarity(tfidf_matrix)\n# [Begin of Missing Code]\nprint(cosine_similarity_matrix)\n# [End of Missing Code]\n```"
    ],
    "Pytorch": [
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\noptim = load_data()\n# [Begin of Missing Code]\nfor param_group in optim.param_groups:\n    param_group['lr'] = 0.001\n# [End of Missing Code]\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\noptim = load_data()\n# [Begin of Missing Code]\noptim.param_groups[0]['lr'] = 0.001\n# [End of Missing Code]\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\noptim = load_data()\n# [Begin of Missing Code]\nfor param_group in optim.param_groups:\n    param_group['lr'] = 0.0005\n# [End of Missing Code]\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\noptim = load_data()\n\n# [Begin of Missing Code]\noptim.param_groups[0]['lr'] = 0.0005\n# [End of Missing Code]\n```\n\nTo change the learning rate of the optimizer, we can access the `param_groups` attribute of the optimizer and then set the `'lr'` key of the first dictionary in the list to the desired learning rate. In this case, we set it to `0.0005`. \n\nAs for whether to use `lr=0.05` or `lr=0.0005`, it depends on the specific problem and the model architecture. Generally, a higher learning rate can lead to faster convergence but may also cause the loss to oscillate or diverge. A lower learning rate may lead to slower convergence but can be more stable. It is recommended to try different learning rates and observe the training process to determine the optimal value.",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nfrom gensim.models import Word2Vec\nfrom gensim.test.utils import common_texts\ninput_Tensor = load_data()\nword2vec = Word2Vec(sentences=common_texts, vector_size=100, window=5, min_count=1, workers=4)\n\n# [Begin of Missing Code]\nweights = torch.FloatTensor(word2vec.wv.vectors)\nembedding_layer = torch.nn.Embedding.from_pretrained(weights)\nembedded_input = embedding_layer(input_Tensor)\n# [End of Missing Code]\n\nprint(embedded_input)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nfrom gensim.models import Word2Vec\nfrom gensim.test.utils import common_texts\ninput_Tensor = load_data()\nword2vec = Word2Vec(sentences=common_texts, vector_size=100, window=5, min_count=1, workers=4)\ndef get_embedded_input(input_Tensor):\n    weights = torch.FloatTensor(word2vec.wv.vectors)\n    embedding = torch.nn.Embedding.from_pretrained(weights)\n    embedded_input = embedding(input_Tensor)\n    return embedded_input\nembedded_input = get_embedded_input(input_Tensor)\nprint(embedded_input)\n```",
        "```python\nimport numpy as np\nimport torch\nimport pandas as pd\nx = load_data()\n# [Begin of Missing Code]\npx = pd.DataFrame(x.numpy())\n# [End of Missing Code]\nprint(px)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport torch\nimport pandas as pd\nx = torch.rand(4,4)\n# [Begin of Missing Code]\npx = pd.DataFrame(x.numpy())\n# [End of Missing Code]\nprint(px)\n```",
        "```python\nimport numpy as np\nimport torch\nimport pandas as pd\nx = load_data()\n# [Begin of Missing Code]\npx = pd.DataFrame(x.numpy())\n# [End of Missing Code]\nprint(px)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nA_log, B = load_data()\n# [Begin of Missing Code]\nA_log = A_log.bool() # convert to boolean tensor\nC = B[:, A_log] # slice using logical index\n# [End of Missing Code]\nprint(C)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nA_logical, B = load_data()\n# [Begin of Missing Code]\nA_logical = A_logical.nonzero().squeeze()\nC = B[:, A_logical]\n# [End of Missing Code]\nprint(C)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nA_log, B = load_data()\n# [Begin of Missing Code]\nC = B[:, A_log.nonzero().squeeze()]\n# [End of Missing Code]\nprint(C)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nA_log, B = load_data()\n# [Begin of Missing Code]\nC = B[:, A_log.nonzero().squeeze()]\n# [End of Missing Code]\nprint(C)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\n\nA_log, B = load_data()\n\ndef solve(A_log, B):\n    # [Begin of Missing Code]\n    C = B[:, A_log.nonzero().squeeze()]\n    # [End of Missing Code]\n    return C\n\nC = solve(A_log, B)\nprint(C)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nA_log, B = load_data()\n# [Begin of Missing Code]\nA_log = A_log.nonzero().squeeze()\nC = B[:, A_log]\n# [End of Missing Code]\nprint(C)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nidx, B = load_data()\n# [Begin of Missing Code]\nC = B.index_select(1, idx)\n# [End of Missing Code]\nprint(C)\n```",
        "[Solution Code]\n```python\nimport pandas as pd\nimport torch\nimport numpy as np\nx_array = load_data()\n# [Begin of Missing Code]\nx_list = x_array.tolist()\nx_tensor = torch.tensor(x_list)\n# [End of Missing Code]\nprint(x_tensor)\n```",
        "```python\nimport pandas as pd\nimport torch\nimport numpy as np\nx_array = load_data()\n# [Begin of Missing Code]\nx_tensor = torch.tensor(np.stack(x_array), dtype=torch.float)\n# [End of Missing Code]\nprint(x_tensor)\n```",
        "```python\ndef Convert(a):\n    t = torch.from_numpy(np.stack(a))\n    return t\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nlens = load_data()\n# [Begin of Missing Code]\nmax_len = max(lens)\nmask = torch.zeros((len(lens), max_len), dtype=torch.long)\nfor i, l in enumerate(lens):\n    mask[i, :l] = 1\n# [End of Missing Code]\nprint(mask)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nlens = load_data()\n# [Begin of Missing Code]\nmax_len = max(lens)\nmask = torch.zeros((len(lens), max_len), dtype=torch.long)\nfor i, length in enumerate(lens):\n    mask[i, :length] = 1\n# [End of Missing Code]\nprint(mask)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nlens = load_data()\n# [Begin of Missing Code]\nmax_len = max(lens)\nmask = torch.zeros((len(lens), max_len), dtype=torch.long)\nfor i, l in enumerate(lens):\n    mask[i, :l] = 1\n# [End of Missing Code]\nprint(mask)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nlens = load_data()\ndef get_mask(lens):\n    max_len = max(lens)\n    mask = torch.zeros((len(lens), max_len), dtype=torch.long)\n    for i, l in enumerate(lens):\n        mask[i, :l] = 1\n    return mask\nmask = get_mask(lens)\nprint(mask)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nTensor_2D = load_data()\n# [Begin of Missing Code]\ndiag_ele = Tensor_2D.shape[1]\nbatch_size = Tensor_2D.shape[0]\nTensor_3D = torch.zeros(batch_size, diag_ele, diag_ele)\nfor i in range(batch_size):\n    Tensor_3D[i] = torch.diag(Tensor_2D[i])\n# [End of Missing Code]\nprint(Tensor_3D)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nTensor_2D = load_data()\ndef Convert(t):\n    # [Begin of Missing Code]\n    batch_size, diag_size = t.shape\n    result = torch.zeros(batch_size, diag_size, diag_size)\n    for i in range(batch_size):\n        result[i] = torch.diag(t[i])\n    # [End of Missing Code]\n    return result\nTensor_3D = Convert(Tensor_2D)\nprint(Tensor_3D)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\na, b = load_data()\n# [Begin of Missing Code]\nif a.shape[0] == 1:\n    ab = torch.cat((a, b.unsqueeze(0)), dim=0)\nelse:\n    ab = torch.cat((a, b.repeat(a.shape[0], 1)), dim=0)\n# [End of Missing Code]\nprint(ab)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\na, b = load_data()\n# [Begin of Missing Code]\nif a.shape[0] > b.shape[0]:\n    pad = torch.zeros((a.shape[0]-b.shape[0], b.shape[1]))\n    b = torch.cat((b, pad), dim=0)\nelif b.shape[0] > a.shape[0]:\n    pad = torch.zeros((b.shape[0]-a.shape[0], a.shape[1]))\n    a = torch.cat((a, pad), dim=0)\nab = torch.stack((a,b), 0)\n# [End of Missing Code]\nprint(ab)\n```",
        "```python\ndef solve(a, b):\n    ab = torch.cat((a.unsqueeze(0), b.unsqueeze(0)), dim=0)\n    return ab\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\na = torch.rand((10, 1000, 96))\nlengths = torch.randint(1000, (10,))\n# [Begin of Missing Code]\nfor i in range(len(lengths)):\n    a[i, int(lengths[i]):, :] = 0\n# [End of Missing Code]\nprint(a)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\na = torch.rand((10, 1000, 96))\nlengths = torch.randint(1000, (10,))\n# [Begin of Missing Code]\nfor i in range(a.shape[0]):\n    a[i, lengths[i]:, :] = 2333\n# [End of Missing Code]\nprint(a)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\na = torch.rand((10, 1000, 23))\nlengths = torch.randint(1000, (10,))\n# [Begin of Missing Code]\nfor i in range(len(lengths)):\n    a[i, lengths[i]:, :] = 0\n# [End of Missing Code]\nprint(a)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\na = torch.rand((10, 1000, 23))\nlengths = torch.randint(1000, (10,))\n# [Begin of Missing Code]\nfor i in range(10):\n    a[i, lengths[i]:, :] = 2333\n# [End of Missing Code]\nprint(a)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nlist_of_tensors = load_data()\n# [Begin of Missing Code]\ntensor_of_tensors = torch.stack(list_of_tensors)\n# [End of Missing Code]\nprint(tensor_of_tensors)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nlist = load_data()\n# [Begin of Missing Code]\nnew_tensors = torch.stack(list)\n# [End of Missing Code]\nprint(new_tensors)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nlist_of_tensors = load_data()\ndef Convert(lt):\n    # [Begin of Missing Code]\n    tt = torch.stack(lt)\n    # [End of Missing Code]\n    return tt\ntensor_of_tensors = Convert(list_of_tensors)\nprint(tensor_of_tensors)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nlist_of_tensors = load_data()\n# [Begin of Missing Code]\ntensor_of_tensors = torch.stack(list_of_tensors)\n# [End of Missing Code]\nprint(tensor_of_tensors)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nt, idx = load_data()\nassert type(t) == torch.Tensor\nassert type(idx) == np.ndarray\n# [Begin of Missing Code]\nresult = t[np.arange(len(t)), idx]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nt, idx = load_data()\nassert type(t) == torch.Tensor\nassert type(idx) == np.ndarray\n# [Begin of Missing Code]\nresult = t[:, idx == 1].squeeze()\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nt, idx = load_data()\nassert type(t) == torch.Tensor\nassert type(idx) == np.ndarray\n# [Begin of Missing Code]\nresult = t[np.arange(len(t)), idx]\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nids, x = load_data()\n# [Begin of Missing Code]\nresult = torch.gather(x, 1, ids.repeat(1,1,x.shape[-1])).squeeze(1)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nids, x = load_data()\n# [Begin of Missing Code]\nresult = torch.gather(x, 1, ids.repeat(1, x.shape[1], 1)).squeeze(1)\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nids, x = load_data()\n# [Begin of Missing Code]\nresult = torch.gather(x, 1, torch.unsqueeze(ids, 2))\nresult = torch.squeeze(result, 1)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nsoftmax_output = load_data()\n# [Begin of Missing Code]\n_, y = torch.max(torch.Tensor(softmax_output), 1)\ny = y.view(-1, 1)\n# [End of Missing Code]\nprint(y)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nsoftmax_output = load_data()\n# [Begin of Missing Code]\n_, y = torch.max(torch.tensor(softmax_output), 1)\ny = y.reshape(-1, 1)\n# [End of Missing Code]\nprint(y)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nsoftmax_output = load_data()\n# [Begin of Missing Code]\n_, y = torch.max(torch.Tensor(softmax_output), 1)\ny = y.view(-1, 1)\n# [End of Missing Code]\nprint(y)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nsoftmax_output = load_data()\ndef solve(softmax_output):\n    # [Begin of Missing Code]\n    _, y = torch.max(softmax_output, dim=1)\n    y = y.view(-1, 1)\n    # [End of Missing Code]\n    return y\ny = solve(softmax_output)\nprint(y)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nsoftmax_output = load_data()\ndef solve(softmax_output):\n    # [Begin of Missing Code]\n    _, y = torch.max(softmax_output, dim=1)\n    # [End of Missing Code]\n    return y\ny = solve(softmax_output)\nprint(y)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nfrom torch.autograd import Variable\nimport torch\nimport torch.nn.functional as F\n\ndef cross_entropy2d(input, target, weight=None, size_average=True):\n    # input: (n, c, w, z), target: (n, w, z)\n    n, c, w, z = input.size()\n    # log_p: (n, c, w, z)\n    log_p = F.log_softmax(input, dim=1)\n    # log_p: (n*w*z, c)\n    log_p = log_p.permute(0, 3, 2, 1).contiguous().view(-1, c)  # make class dimension last dimension\n    target = target.view(n*w*z, -1)\n    # target: (n*w*z,)\n    mask = target >= 0\n    target = target[mask]\n    log_p = log_p[mask.squeeze()]\n    loss = F.nll_loss(log_p, target, weight=weight, size_average=size_average)\n    return loss\n\nimages, labels = load_data()\nloss = cross_entropy2d(images, labels)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nA, B = load_data()\n# [Begin of Missing Code]\ncnt_equal = np.sum(A == B)\n# [End of Missing Code]\nprint(cnt_equal)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nA, B = load_data()\n# [Begin of Missing Code]\ncnt_equal = np.sum(A == B)\n# [End of Missing Code]\nprint(cnt_equal)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nA, B = load_data()\n# [Begin of Missing Code]\ncnt_not_equal = np.count_nonzero(A != B)\n# [End of Missing Code]\nprint(cnt_not_equal)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nA, B = load_data()\ndef Count(A, B):\n    # [Begin of Missing Code]\n    cnt_equal = np.sum(A == B)\n    # [End of Missing Code]\n    return cnt_equal\ncnt_equal = Count(A, B)\nprint(cnt_equal)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nA, B = load_data()\n# [Begin of Missing Code]\nx = A.shape[0] // 2\ncnt_equal = np.sum(A[-x:] == B[-x:])\n# [End of Missing Code]\nprint(cnt_equal)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nA, B = load_data()\n# [Begin of Missing Code]\nx = A.shape[0] // 2\ncnt_not_equal = np.sum(A[x:] != B[x:])\n# [End of Missing Code]\nprint(cnt_not_equal)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\na = load_data()\nassert a.shape == (1, 3, 10, 40, 1)\nchunk_dim = 10\n# [Begin of Missing Code]\nnum_splits = a.shape[3] - chunk_dim + 1\na_split = torch.split(a, chunk_dim, dim=3)\ntensors_31 = []\nfor i in range(num_splits):\n    tensors_31.append(a_split[0][:,:,:,(i):(i+chunk_dim),:])\n# [End of Missing Code]\nfor tensor in tensors_31:\n    print(tensor)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\na = load_data()\nassert a.shape == (1, 3, 10, 40, 1)\nchunk_dim = 10\n# [Begin of Missing Code]\na_split = torch.split(a, chunk_dim, dim=2)\ntensors_31 = [a_split[i:i+31] for i in range(31)]\n# [End of Missing Code]\nfor tensor in tensors_31:\n    print(tensor)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nmask, clean_input_spectrogram, output= load_data()\n# [Begin of Missing Code]\noutput[mask == 1] = clean_input_spectrogram[mask == 1]\n# [End of Missing Code]\nprint(output)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nmask, clean_input_spectrogram, output= load_data()\n# [Begin of Missing Code]\noutput[mask == 0] = clean_input_spectrogram[mask == 0]\n# [End of Missing Code]\nprint(output)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nx, y = load_data()\n# [Begin of Missing Code]\nsign_x = torch.sign(x)\nsign_y = torch.sign(y)\nmin_vals = torch.min(torch.abs(x), torch.abs(y))\nsigned_min = min_vals * torch.where(torch.abs(x) < torch.abs(y), sign_x, sign_y)\n# [End of Missing Code]\nprint(signed_min)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nx, y = load_data()\n# [Begin of Missing Code]\nsign_x = torch.sign(x)\nsign_y = torch.sign(y)\nmax_vals = torch.max(torch.abs(x), torch.abs(y))\nsigned_max = max_vals * torch.where(torch.abs(x) >= torch.abs(y), sign_x, sign_y)\n# [End of Missing Code]\nprint(signed_max)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nx, y = load_data()\ndef solve(x, y):\n    sign_x = torch.sign(x)\n    sign_y = torch.sign(y)\n    min_vals, indices = torch.min(torch.stack((torch.abs(x), torch.abs(y))), dim=0)\n    signed_min = min_vals * torch.where(indices == 0, sign_x, sign_y)\n    return signed_min\nsigned_min = solve(x, y)\nprint(signed_min)\n```\n\n[Explanation]\nThe missing code should compute the minimum absolute values of the two tensors and multiply them with the corresponding signs. To do this, we first compute the signs of the two tensors using `torch.sign(x)` and `torch.sign(y)`. Then, we use `torch.stack` to stack the two tensors along a new dimension and compute the minimum values and their indices using `torch.min`. The resulting `indices` tensor will have 0s where the minimum value came from `x` and 1s where it came from `y`. We can then use `torch.where` to select the appropriate sign for each minimum value and multiply them together to get the final result.",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nMyNet = torch.nn.Sequential(torch.nn.Linear(4, 15),\n                            torch.nn.Sigmoid(),\n                            torch.nn.Linear(15, 3),\n                            )\nMyNet.load_state_dict(torch.load(\"my_model.pt\"))\ninput = load_data()\nassert type(input) == torch.Tensor\n# [Begin of Missing Code]\noutput = MyNet(input)\nconfidence_score = torch.nn.functional.softmax(output, dim=1)[0][classes.item()].item()\n# [End of Missing Code]\nprint(confidence_score)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\na, b = load_data()\n# [Begin of Missing Code]\noverlap = (a[:, -1] + b[:, 0]) / 2\nresult = np.concatenate((a[:, :-1], overlap.reshape(-1, 1), b[:, 1:]), axis=1)\nresult = torch.Tensor(result)\n# [End of Missing Code]\nprint(result)\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\n\na = torch.Tensor([[1, 2, 3], [1, 2, 3]])\nb = torch.Tensor([[5, 6, 7], [5, 6, 7]])\n\ndef solve(a, b):\n    # [Begin of Missing Code]\n    overlap = (a[:, -1] + b[:, 0]) / 2\n    result = torch.cat((a[:, :-1], overlap.unsqueeze(1), b[:, 1:]), dim=1)\n    # [End of Missing Code]\n    return result\n\nresult = solve(a, b)\nprint(result)\n```\n\n[Output]\n```\ntensor([[1., 2., 4., 6., 7.],\n        [1., 2., 4., 6., 7.]])\n```",
        "```python\nimport numpy as np\nimport pandas as pd\nimport torch\nt = torch.arange(8).reshape(1,4,2).float()\n# [Begin of Missing Code]\nzeros = torch.zeros((1, 6, 4))\nzeros[:, 1:5, 1:3] = t\nresult = zeros\n# [End of Missing Code]\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nt = torch.arange(4).reshape(1,2,2).float()\nprint(t)\nnew=torch.zeros(1,1,4)\nprint(new)\nresult = torch.cat([new,t,new], dim=1)\nprint(result)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nt = torch.arange(8).reshape(1,4,2).float()\nprint(t)\nnew=torch.tensor([[-1, -1, -1, -1]])\nprint(new)\nnew = new.repeat(t.shape[0], 1)\nnew = new.unsqueeze(1)\nr = torch.cat([new, t, new], dim=1)\nprint(r)\n```",
        "[Solution Code]\n```python\nimport numpy as np\nimport pandas as pd\nimport torch\nhid_dim = 32\ndata = torch.randn(10, 2, 3, hid_dim)\ndata = data.view(10, 2 * 3, hid_dim)\nW = torch.randn(hid_dim)\n# [Begin of Missing Code]\nW = W.unsqueeze(0).unsqueeze(0)\nresult = torch.bmm(data, W).squeeze()\nresult = result.view(10, 2, 3)\n# [End of Missing Code]\nprint(result)\n```"
    ]
}